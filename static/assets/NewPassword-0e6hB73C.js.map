{"version":3,"file":"NewPassword-0e6hB73C.js","sources":["../../src/modules/auth/new-password/services/types.ts","../../src/modules/auth/new-password/services/server_newPassword.ts","../../src/modules/auth/new-password/hooks/useNewPasswordOnSubmit.ts","../../src/modules/auth/new-password/hooks/useNewPasswordOnValidate.ts","../../src/modules/auth/new-password/hooks/useNewPasswordInitialValues.ts","../../src/modules/auth/new-password/NewPassword.tsx"],"sourcesContent":["import { z } from 'zod'\n\nexport const userNewPasswordSchema = z.object({\n    restoreCode: z.string().trim().min(1, 'Required field').nullable(),\n    password: z.string().trim().min(1, 'Required field'),\n    passwordRepeat: z.string().trim().min(1, 'Required field'),\n})\n\nexport type IUserNewPasswordSchema = z.infer<typeof userNewPasswordSchema>\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport ky from 'ky'\nimport { type IUserNewPasswordSchema } from './types'\n\nexport const server_newPassword = async (props: { formData: IUserNewPasswordSchema }) => {\n    const endpoint = import.meta.env['VITE_NODE_HEROKU_ORIGIN']\n    const xapikey = import.meta.env['VITE_X_API_KEY']\n\n    try {\n        return await ky\n            .post(`${endpoint}new-password`, {\n                credentials: 'include', //\n                json: props.formData,\n                method: 'POST',\n                headers: {\n                    'x-api-key': xapikey,\n                    'Content-Type': 'application/json',\n                },\n            })\n            .json<Promise<{ message: string } | undefined>>()\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type IUserNewPasswordSchema } from '../services/types'\nimport { useNavigate } from 'react-router-dom'\nimport { useMutation } from '@tanstack/react-query'\nimport { processError, notifySuccess } from '@/helpers/processMessage'\nimport { server_newPassword } from '../services/server_newPassword'\nimport { APP_ROUTES_ENUM } from '@/services/enums'\n\nexport const useNewPasswordOnSubmit = () => {\n    const navigate = useNavigate()\n\n    const mutation = useMutation({\n        mutationFn: ({ formData }: { formData: IUserNewPasswordSchema }) => server_newPassword({ formData }),\n    })\n\n    const onSubmit = (values: IUserNewPasswordSchema, formikHelpers: FormikHelpers<IUserNewPasswordSchema>) => {\n        if (!values.restoreCode) {\n            processError(`We don't recognize you. May be your link is broken. Please restart the process. Thank you!`)\n            formikHelpers.resetForm()\n            formikHelpers.setSubmitting(false)\n            return\n        }\n\n        mutation.mutate(\n            { formData: values },\n            {\n                onError: (error) => {\n                    processError(error.message)\n                },\n                onSuccess: () => {\n                    formikHelpers.resetForm()\n                    notifySuccess(`\n                        Account was restored successfully. Thank you!`)\n                    navigate(`/${APP_ROUTES_ENUM.LOGIN}`)\n                },\n                onSettled: () => {\n                    formikHelpers.setSubmitting(false)\n                },\n            },\n        )\n    }\n\n    return { onSubmit }\n}\n","import { type IUserNewPasswordSchema, userNewPasswordSchema } from '../services/types'\n\nexport const useNewPasswordOnValidate = () => {\n    const validate = (values: IUserNewPasswordSchema) => {\n        const result = userNewPasswordSchema.safeParse(values)\n        const errors: Partial<IUserNewPasswordSchema> = {}\n        if (!result.success) {\n            for (const issue of result.error.issues) {\n                errors[issue.path[0] as keyof IUserNewPasswordSchema] = issue.message\n            }\n        }\n\n        if (values.password !== values.passwordRepeat) {\n            errors.password = 'Passwords do not match'\n            errors.passwordRepeat = 'Passwords do not match'\n        }\n        return errors\n    }\n\n    return { validate }\n}\n","import { getParam_Code } from '@/helpers/urlSearchParams'\nimport { type IUserNewPasswordSchema } from '../services/types'\n\nexport const useNewPasswordInitialValues = (): { initialValues: IUserNewPasswordSchema } => {\n    return { initialValues: { password: '', passwordRepeat: '', restoreCode: getParam_Code() } }\n}\n","import { Formik, Form } from 'formik'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { AuthPasswordInput } from '../shared-components/AuthPasswordInput'\nimport { type IUserNewPasswordSchema } from './services/types'\nimport { useNewPasswordOnSubmit } from './hooks/useNewPasswordOnSubmit'\nimport { useNewPasswordOnValidate } from './hooks/useNewPasswordOnValidate'\nimport { useNewPasswordInitialValues } from './hooks/useNewPasswordInitialValues'\n\nconst NewPasswordIndex: React.FC = () => {\n    const { onSubmit } = useNewPasswordOnSubmit()\n    const { validate } = useNewPasswordOnValidate()\n    const { initialValues } = useNewPasswordInitialValues()\n\n    return (\n        <div className='flex flex-col gap-10 mt-10 items-center'>\n            <Formik<IUserNewPasswordSchema> initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n                {({ isSubmitting }) => (\n                    <Form className='flex flex-col gap-5'>\n                        <AuthPasswordInput />\n                        <AuthPasswordInput repeatType />\n                        <StyledButton\n                            className='w-full'\n                            type='submit'\n                            disabled={isSubmitting}\n                            startIcon={isSubmitting && <IconInfiniteLoading className='text-slate-500 w-5 h-5' />}\n                        >\n                            Restore\n                        </StyledButton>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n\nexport default NewPasswordIndex\n"],"names":["userNewPasswordSchema","z","object","restoreCode","string","trim","min","nullable","password","passwordRepeat","server_newPassword","props","endpoint","import","xapikey","ky","post","credentials","json","formData","method","headers","e","resolveError","useNewPasswordOnSubmit","navigate","useNavigate","mutation","useMutation","mutationFn","onSubmit","values","formikHelpers","processError","resetForm","setSubmitting","mutate","onError","error","message","onSuccess","notifySuccess","APP_ROUTES_ENUM","LOGIN","onSettled","useNewPasswordOnValidate","validate","result","safeParse","errors","success","issue","issues","path","useNewPasswordInitialValues","initialValues","getParam_Code","NewPasswordIndex","jsx","Formik","isSubmitting","jsxs","Form","AuthPasswordInput","StyledButton","IconInfiniteLoading"],"mappings":"6aAEaA,MAAAA,EAAwBC,EAAEC,OAAO,CAC1CC,YAAaF,EAAEG,OAAAA,EAASC,KAAAA,EAAOC,IAAI,EAAG,gBAAgB,EAAEC,SAAS,EACjEC,SAAUP,EAAEG,OAAO,EAAEC,OAAOC,IAAI,EAAG,gBAAgB,EACnDG,eAAgBR,EAAEG,OAAO,EAAEC,OAAOC,IAAI,EAAG,gBAAgB,CAC7D,CAAC,ECFYI,EAAqB,MAAOC,GAAgD,CAC/EC,MAAAA,EAAWC,8BACXC,EAAUD,YAEZ,GAAA,CACA,OAAO,MAAME,EACRC,KAAM,GAAEJ,CAAS,eAAe,CAC7BK,YAAa,UACbC,KAAMP,EAAMQ,SACZC,OAAQ,OACRC,QAAS,CACL,YAAaP,EACb,eAAgB,kBAAA,CAEvB,CAAA,EACAI,KAA+C,QAC/CI,EAAG,CACD,OAAA,MAAMC,EAAaD,CAAC,CAAA,CAEnC,ECfaE,EAAyBA,IAAM,CACxC,MAAMC,EAAWC,EAAY,EAEvBC,EAAWC,EAAY,CACzBC,WAAYA,CAAC,CAAEV,SAAAA,KAAqDT,EAAmB,CAAES,SAAAA,CAAU,CAAA,CAAA,CACtG,EA6BM,MAAA,CAAEW,SA3BQA,CAACC,EAAgCC,IAAyD,CACnG,GAAA,CAACD,EAAO5B,YAAa,CACrB8B,EAAc,4FAA2F,EACzGD,EAAcE,UAAU,EACxBF,EAAcG,cAAc,EAAK,EACjC,MAAA,CAGJR,EAASS,OACL,CAAEjB,SAAUY,CAAAA,EACZ,CACIM,QAAoBC,GAAA,CAChBL,EAAaK,EAAMC,OAAO,CAC9B,EACAC,UAAWA,IAAM,CACbR,EAAcE,UAAU,EACTO,EAAA;AAAA,sEACmC,EACxChB,EAAA,IAAGiB,EAAgBC,KAAM,EAAC,CACxC,EACAC,UAAWA,IAAM,CACbZ,EAAcG,cAAc,EAAK,CAAA,CACrC,CAER,CACJ,CAEkB,CACtB,ECzCaU,EAA2BA,KAiB7B,CAAEC,SAhBSf,GAAmC,CAC3CgB,MAAAA,EAAS/C,EAAsBgD,UAAUjB,CAAM,EAC/CkB,EAA0C,CAAC,EAC7C,GAAA,CAACF,EAAOG,QACGC,UAAAA,KAASJ,EAAOT,MAAMc,OAC7BH,EAAOE,EAAME,KAAK,CAAC,CAAiC,EAAIF,EAAMZ,QAIlER,OAAAA,EAAOvB,WAAauB,EAAOtB,iBAC3BwC,EAAOzC,SAAW,yBAClByC,EAAOxC,eAAiB,0BAErBwC,CACX,CAEkB,GChBTK,EAA8BA,KAChC,CAAEC,cAAe,CAAE/C,SAAU,GAAIC,eAAgB,GAAIN,YAAaqD,EAAc,CAAA,CAAI,GCKzFC,EAA6BA,IAAM,CAC/B,KAAA,CAAE3B,SAAAA,GAAaN,EAAuB,EACtC,CAAEsB,SAAAA,GAAaD,EAAyB,EACxC,CAAEU,cAAAA,GAAkBD,EAA4B,EAGlD,OAAAI,EAAA,IAAC,OAAI,UAAU,0CACX,eAACC,EAA+B,CAAA,cAAAJ,EAA8B,SAAAT,EAAoB,SAAAhB,EAC7E,SAAC,CAAA,CAAE8B,aAAAA,CACA,IAAAC,EAAA,KAACC,EAAK,CAAA,UAAU,sBACZ,SAAA,CAAAJ,EAAA,IAACK,EAAiB,EAAA,EAClBL,EAAAA,IAACK,EAAkB,CAAA,WAAU,EAAA,CAAA,EAC5BL,EAAA,IAAAM,EAAA,CACG,UAAU,SACV,KAAK,SACL,SAAUJ,EACV,UAAWA,GAAiBF,EAAAA,IAAAO,EAAA,CAAoB,UAAU,2BAA4B,SAG1F,SAAA,CAAA,CAAA,CACJ,CAAA,CAER,CAAA,EACJ,CAER"}