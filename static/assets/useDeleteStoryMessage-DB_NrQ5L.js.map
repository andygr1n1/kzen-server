{"version":3,"file":"useDeleteStoryMessage-DB_NrQ5L.js","sources":["../../src/modules/stories/components/story-maker/service/mutation_deleteStoryMessage.ts","../../src/modules/stories/components/story-maker/service/useDeleteStoryMessage.ts"],"sourcesContent":["import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { storyMessageResponseFr } from '@/modules/stories/services/fragments/storyMessageResponseFr'\n\nexport const mutation_deleteStoryMessage = async ({ id, storyId }: { id: string; storyId: string }) => {\n    try {\n        const client = await generateClient()\n\n        const mutation = graphql(\n            `\n                mutation mutation_deleteStoryMessage(\n                    $id: uuid!\n                    $deletedAt: timestamptz\n                    $storyId: uuid!\n                    $updatedAt: timestamptz\n                ) {\n                    update_stories_messages_by_pk(pk_columns: { id: $id }, _set: { deleted_at: $deletedAt }) {\n                        ...StoryMessageResponseFr\n                    }\n                    update_stories_by_pk(pk_columns: { id: $storyId }, _set: { updated_at: $updatedAt }) {\n                        id\n                    }\n                }\n            `,\n            [storyMessageResponseFr],\n        )\n\n        return await client.request(mutation, {\n            id,\n            deletedAt: formatDateWithTimezone(),\n            storyId,\n            updatedAt: formatDateWithTimezone(),\n        })\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { mutation_deleteStoryMessage } from './mutation_deleteStoryMessage'\nimport { useUuidFromPath } from '@/hooks/useUuidFromPath'\nimport { cast } from '@/helpers'\n\nexport const useDeleteStoryMessage = () => {\n    const queryClient = useQueryClient()\n    const { id: storyId } = useUuidFromPath()\n\n    const mutation = useMutation({\n        mutationFn: ({ id }: { id: string }) => mutation_deleteStoryMessage({ id, storyId: cast(storyId) }),\n        onSuccess: () => {\n            queryClient.invalidateQueries()\n        },\n    })\n\n    const deleteStoryMessage = ({ id }: { id: string }) => {\n        mutation.mutate({ id })\n    }\n\n    return { deleteStoryMessage }\n}\n"],"names":["mutation_deleteStoryMessage","id","storyId","client","generateClient","mutation","graphql","storyMessageResponseFr","request","deletedAt","formatDateWithTimezone","updatedAt","e","resolveError","useDeleteStoryMessage","queryClient","useQueryClient","useUuidFromPath","useMutation","mutationFn","cast","onSuccess","invalidateQueries","deleteStoryMessage","mutate"],"mappings":"2PAMO,MAAMA,EAA8B,MAAO,CAAEC,GAAAA,EAAIC,QAAAA,CAAyC,IAAM,CAC/F,GAAA,CACMC,MAAAA,EAAS,MAAMC,EAAe,EAE9BC,EAAWC,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAeD,CAACC,CAAsB,CAC3B,EAEO,OAAA,MAAMJ,EAAOK,QAAQH,EAAU,CAClCJ,GAAAA,EACAQ,UAAWC,EAAuB,EAClCR,QAAAA,EACAS,UAAWD,EAAuB,CAAA,CACrC,QACIE,EAAG,CACD,OAAA,MAAMC,EAAaD,CAAC,CAAA,CAEnC,ECjCaE,EAAwBA,IAAM,CACvC,MAAMC,EAAcC,EAAe,EAC7B,CAAEf,GAAIC,GAAYe,EAAgB,EAElCZ,EAAWa,EAAY,CACzBC,WAAYA,CAAC,CAAElB,GAAAA,KAAyBD,EAA4B,CAAEC,GAAAA,EAAIC,QAASkB,EAAKlB,CAAO,CAAA,CAAG,EAClGmB,UAAWA,IAAM,CACbN,EAAYO,kBAAkB,CAAA,CAClC,CACH,EAMM,MAAA,CAAEC,mBAJkBA,CAAC,CAAEtB,GAAAA,CAAAA,IAAyB,CACnDI,EAASmB,OAAO,CAAEvB,GAAAA,CAAAA,CAAI,CAC1B,CAE4B,CAChC"}