{"version":3,"mappings":";soBAIO,MAAMA,EAAwB,MAAO,CAAEC,OAAQC,CAA6C,IAAM,CAC/FC,QAAWC,8BACXC,EAAUD,YAEZ,IACA,OAAO,MAAME,EACRC,KAAM,GAAEJ,CAAS,kBAAkB,CAChCK,YAAa,UACbN,OACAO,OAAQ,OACRC,QAAS,CACL,YAAaL,EACb,eAAgB,mBAEvB,GACAH,KAA+C,QAC/CS,EAAG,CACD,aAAMC,EAAaD,CAAC,EAEnC,ECnBaE,EAAoBA,IAAM,CACnC,MAAMC,EAAWC,EAAY,CACzBC,WAAYA,CAAC,CAAEf,YAAqDD,EAAsB,CAAEC,QAAQ,GACvG,EAcM,OAAEgB,eAZcA,CAAC,CACpBhB,SACAiB,YACAC,eAKE,CACFL,EAASM,OAAO,CAAEnB,UAAU,CAAEiB,YAAWC,YAAW,CACxD,CAEwB,CAC5B,EChBaE,EAAqCA,IAAM,CAC9C,MAAEC,YAAaC,EAAY,EAC3B,CAAEN,kBAAmBJ,EAAkB,EAiBtC,OAAEW,SAfQA,CAACvB,EAAoCwB,IAA6D,CACzG,MAAEC,iBAAkBD,EAEXR,EAAA,CACXhB,SACAiB,UAAWA,IAAM,CACJI,EAAA,EACTK,EAAO,mCAAmC,CAC9C,EACAR,UAAWA,IAAM,CACbO,EAAc,EAAK,EACvB,CACH,CACL,CAEkB,CACtB,ECxBaE,EAAuCA,KAwBzC,CAAEC,SAvBS5B,GAAuC,CACrD,MAAM6B,EAAoE,CAAC,EAEvE7B,SAAO8B,oBAAsB9B,EAAO+B,cACpCF,EAAOC,kBAAoB,oDAC3BD,EAAOE,YAAc,0BAGpB/B,EAAOgC,SAASC,SACjBJ,EAAOG,SAAW,kBAGjBhC,EAAO+B,YAAYE,SACpBJ,EAAOE,YAAc,kBAGpB/B,EAAO8B,kBAAkBG,SAC1BJ,EAAOC,kBAAoB,kBAGxBD,CACX,CAEkB,GCpBTK,EAA0CA,IAAM,CACnD,MAAEC,OAAMC,aAAcC,EAAoB,EAGzC,OAAEC,cAFyCC,EAAY,CAAEC,KAAML,EAAM,EAEpDC,WAAU,CACtC,EAEMG,EAAcA,CAAC,CAAEC,MAA+C,KAAmC,CACrGC,OAAOD,iBAAMC,QAAS,GACtBT,SAAU,GACVD,YAAa,GACbD,kBAAmB,EACvB,GCVMY,EAAyBC,OAAK,IAAMC,EAAA,WAAO,sCAAqC,0EAAC,EAEjFC,EAAqCA,IAAM,CACvC,MAAEC,eAAczB,YAAaC,EAAY,EACzC,CAAEC,YAAaH,EAAmC,EAClD,CAAEQ,YAAaD,EAAqC,EACpD,CAAEW,iBAAkBJ,EAAwC,EAElE,OACKa,EAAA,IAAAC,EAAA,CAAO,MAAO,eAAgB,KAAM,CAAC,CAACF,EAAc,SAAAzB,EAChD,SAAEyB,EACCC,MAAC,OAAI,UAAU,8CACX,SAACA,MAAAE,EAAA,CACG,mBAAkB,GAClB,cAAAX,EACA,SAAAV,EACA,SAAAL,EAEA,SAACwB,EAAA,IAAAG,EAAA,UAAS,SAAU,KAChB,eAACR,EAAsB,GAC3B,GACJ,EACJ,EACA,KACR,CAER","names":["server_updatePassword","values","json","endpoint","import","xapikey","ky","post","credentials","method","headers","e","resolveError","useUpdatePassword","mutation","useMutation","mutationFn","updatePassword","onSuccess","onSettled","mutate","useUserProfilePasswordFormOnSubmit","onCancel","useProfile$","onSubmit","formikHelpers","setSubmitting","notify","useUserProfilePasswordFormOnValidate","validate","errors","repeatNewPassword","newPassword","password","length","useUserProfilePasswordFormInitialValues","data","isLoading","useFetchProfileInfo","initialValues","initialData","user","email","ProfileNewPasswordForm","lazy","__vitePreload","ProfileNewPasswordDialog","editPassword","jsx","XModal","Formik","Suspense"],"ignoreList":[],"sources":["../../src/modules/profile/services/update-password/server_updatePassword.ts","../../src/modules/profile/services/update-password/useUpdatePassword.ts","../../src/modules/profile/components/profile-new-password/hooks/useUserProfilePasswordFormOnSubmit.ts","../../src/modules/profile/components/profile-new-password/hooks/useUserProfilePasswordFormOnValidate.ts","../../src/modules/profile/components/profile-new-password/hooks/useUserProfilePasswordFormInitialValues.ts","../../src/modules/profile/components/profile-new-password/ProfileNewPasswordDialog.tsx"],"sourcesContent":["import { resolveError } from '@/helpers/tryCatchRequest'\nimport ky from 'ky'\nimport { type IUserProfilePasswordSchema } from '../types'\n\nexport const server_updatePassword = async ({ values: json }: { values: IUserProfilePasswordSchema }) => {\n    const endpoint = import.meta.env['VITE_NODE_HEROKU_ORIGIN']\n    const xapikey = import.meta.env['VITE_X_API_KEY']\n\n    try {\n        return await ky\n            .post(`${endpoint}update-password`, {\n                credentials: 'include', //\n                json,\n                method: 'POST',\n                headers: {\n                    'x-api-key': xapikey,\n                    'Content-Type': 'application/json',\n                },\n            })\n            .json<Promise<{ message: string } | undefined>>()\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { type IUserProfilePasswordSchema } from '../types'\nimport { server_updatePassword } from './server_updatePassword'\n\nexport const useUpdatePassword = () => {\n    const mutation = useMutation({\n        mutationFn: ({ values }: { values: IUserProfilePasswordSchema }) => server_updatePassword({ values }),\n    })\n\n    const updatePassword = ({\n        values,\n        onSuccess,\n        onSettled,\n    }: {\n        values: IUserProfilePasswordSchema\n        onSuccess?: () => void\n        onSettled?: () => void\n    }) => {\n        mutation.mutate({ values }, { onSuccess, onSettled })\n    }\n\n    return { updatePassword }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type IUserProfilePasswordSchema } from '../../../services'\nimport { useProfile$ } from '../../../stores/useProfile.store'\nimport { useUpdatePassword } from '@/modules/profile/services/update-password/useUpdatePassword'\nimport { notify } from '@/helpers/processMessage'\n\nexport const useUserProfilePasswordFormOnSubmit = () => {\n    const { onCancel } = useProfile$()\n    const { updatePassword } = useUpdatePassword()\n\n    const onSubmit = (values: IUserProfilePasswordSchema, formikHelpers: FormikHelpers<IUserProfilePasswordSchema>) => {\n        const { setSubmitting } = formikHelpers\n\n        updatePassword({\n            values,\n            onSuccess: () => {\n                onCancel()\n                notify('Password was successfully changed')\n            },\n            onSettled: () => {\n                setSubmitting(false)\n            },\n        })\n    }\n\n    return { onSubmit }\n}\n","import { type IUserProfilePasswordSchema } from '../../../services'\n\nexport const useUserProfilePasswordFormOnValidate = () => {\n    const validate = (values: IUserProfilePasswordSchema) => {\n        const errors: Partial<Record<keyof IUserProfilePasswordSchema, string>> = {}\n\n        if (values.repeatNewPassword !== values.newPassword) {\n            errors.repeatNewPassword = 'Repeated password does not match the new password'\n            errors.newPassword = 'Passwords do not match'\n        }\n\n        if (!values.password.length) {\n            errors.password = 'Required field'\n        }\n\n        if (!values.newPassword.length) {\n            errors.newPassword = 'Required field'\n        }\n\n        if (!values.repeatNewPassword.length) {\n            errors.repeatNewPassword = 'Required field'\n        }\n\n        return errors\n    }\n\n    return { validate }\n}\n","import {\n    type IUserProfilePasswordSchema,\n    type IUserProfileSchema,\n    useFetchProfileInfo,\n} from '../../../services/index.ts'\n\nexport const useUserProfilePasswordFormInitialValues = () => {\n    const { data, isLoading } = useFetchProfileInfo()\n    const initialValues: IUserProfilePasswordSchema = initialData({ user: data })\n\n    return { initialValues, isLoading }\n}\n\nconst initialData = ({ user }: { user: IUserProfileSchema | undefined }): IUserProfilePasswordSchema => ({\n    email: user?.email || '',\n    password: '',\n    newPassword: '',\n    repeatNewPassword: '',\n})\n","import { Suspense, lazy } from 'react'\nimport { XModal } from '@/components-x/x-modal/XModal'\nimport { useProfile$ } from '../../stores/useProfile.store'\nimport { Formik } from 'formik'\nimport { type IUserProfilePasswordSchema } from '../../services'\nimport { useUserProfilePasswordFormOnSubmit } from './hooks/useUserProfilePasswordFormOnSubmit'\nimport { useUserProfilePasswordFormOnValidate } from './hooks/useUserProfilePasswordFormOnValidate'\nimport { useUserProfilePasswordFormInitialValues } from './hooks/useUserProfilePasswordFormInitialValues'\nconst ProfileNewPasswordForm = lazy(() => import('./components/ProfileNewPasswordForm'))\n\nconst ProfileNewPasswordDialog: React.FC = () => {\n    const { editPassword, onCancel } = useProfile$()\n    const { onSubmit } = useUserProfilePasswordFormOnSubmit()\n    const { validate } = useUserProfilePasswordFormOnValidate()\n    const { initialValues } = useUserProfilePasswordFormInitialValues()\n\n    return (\n        <XModal title={'New password'} open={!!editPassword} onCancel={onCancel}>\n            {!!editPassword ? (\n                <div className='flex h-full w-full flex-auto flex-col gap-5'>\n                    <Formik<IUserProfilePasswordSchema>\n                        enableReinitialize\n                        initialValues={initialValues}\n                        validate={validate}\n                        onSubmit={onSubmit}\n                    >\n                        <Suspense fallback={null}>\n                            <ProfileNewPasswordForm />\n                        </Suspense>\n                    </Formik>\n                </div>\n            ) : null}\n        </XModal>\n    )\n}\n\nexport default ProfileNewPasswordDialog\n"],"file":"assets/ProfileNewPasswordDialog-BKlDRSO7.js"}