{"version":3,"mappings":"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","names":["profileService","instance","useProfile$","z","object","editProfile","boolean","editPassword","queryClient","useQueryClient","data","store","useQuery","queryKey","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","initialData","openEditProfile","setQueryData","openEditPassword","onCancel","viewMode","ProfileBirthdayInput","formikContext","useFormikContext","onDatePickerChange","day","setFieldValue","prepareFinishedAtForInsert","Date","onClear","jsx","FormLabel","XDatePicker","values","birthday","undefined","getYear","now","ProfileEmailInput","XInput","email","handleChange","touched","Boolean","errors","ProfileNameInput","name","ProfilePhoneInput","phone","useProfileDetailsFormInitialValues","isLoading","useFetchProfileInfo","initialValues","id","crypto","randomUUID","avatar","useInitProfileDetailsForm","useEffect","setFormikState","prevState","IconEditProfile","props","EditProfile","cn","StyledButton","CancelButton","SubmitButton","ProfileDetailsForm","Form","jsxs","IconInfiniteLoading","useProfileDetailsFormOnValidate","validate","result","userProfileSchema","safeParse","success","issue","error","issues","key","path","message","length","mutation_updateUserProfile","userProfile","client","generateClient","mutation","graphql","res","request","parse","update_heroes","returning","e","resolveError","useUpdateUserProfile","useMutation","mutationFn","onSuccess","invalidateQueries","updateUserProfile","onSettled","mutate","useProfileDetailsFormOnSubmit","onSubmit","formikHelpers","setSubmitting","IconEditPassword","ProfileNewPasswordDialog","lazy","EditPassword","Suspense","ProfileDetails","Formik","ProfileImageCropDialog","imgSrc","XModal","resetForm","ImageCropper","isSubmitting","handleSubmit","UploadHoverAnimation","IconUpload","ProfileImageCropDialogTrigger","onChange","src","ProfileAvatar","UploadInput","mutation_updateAvatar","imgPath","useProfileAvatarSubmit","userId","useUser$","getCropArea","useImageCropper$","croppedImg","getCroppedImg","cast","uploadNewImageToServer","img","route","SERVER_ROUTES","PROFILE_IMAGE_UPLOAD","deleteImageFromServer","PROFILE_IMAGE_DELETE","notifySuccess","resetQueries","KEY_ImageCropperStore","ProfileAvatarIndex","Fragment","ProfileIndex","ModuleWrapper"],"ignoreList":[],"sources":["../../src/modules/profile/services/profileService.ts","../../src/modules/profile/stores/types.ts","../../src/modules/profile/stores/useProfile.store.ts","../../src/modules/profile/components/profile-details/components/ProfileBirthdayInput.tsx","../../src/modules/profile/components/profile-details/components/ProfileEmailInput.tsx","../../src/modules/profile/components/profile-details/components/ProfileNameInput.tsx","../../src/modules/profile/components/profile-details/components/ProfilePhoneInput.tsx","../../src/modules/profile/components/profile-details/hooks/useProfileDetailsFormInitialValues.ts","../../src/modules/profile/components/profile-details/hooks/useInitProfileDetailsForm.ts","../../src/assets/icons/IconEditProfile.tsx","../../src/modules/profile/components/profile-details/components/EditProfile.tsx","../../src/modules/profile/components/profile-details/components/CancelButton.tsx","../../src/modules/profile/components/profile-details/components/SubmitButton.tsx","../../src/modules/profile/components/profile-details/components/ProfileDetailsForm.tsx","../../src/modules/profile/components/profile-details/hooks/useProfileDetailsFormOnValidate.ts","../../src/modules/profile/services/update-profile-data/mutation_updateUserProfile.ts","../../src/modules/profile/services/update-profile-data/useUpdateUserProfile.ts","../../src/modules/profile/components/profile-details/hooks/useProfileDetailsFormOnSubmit.ts","../../src/assets/icons/IconEditPassword.tsx","../../src/modules/profile/components/profile-details/components/EditPassword.tsx","../../src/modules/profile/components/profile-details/ProfileDetails.tsx","../../src/modules/profile/components/profile-avatar/ProfileImageCropDialog.tsx","../../src/modules/profile/components/profile-avatar/components/UploadHoverAnimation.tsx","../../src/modules/profile/components/profile-avatar/ProfileImageCropDialogTrigger.tsx","../../src/modules/profile/services/update-avatar/mutation_updateAvatar.ts","../../src/modules/profile/components/profile-avatar/hooks/useProfileAvatarSubmit.ts","../../src/modules/profile/components/profile-avatar/ProfileAvatarIndex.tsx","../../src/modules/profile/ProfileIndex.tsx"],"sourcesContent":["export const profileService = {\n    instance: 'profileService',\n    useProfile$: () => ['useProfile$'],\n}\n","import { z } from 'zod'\n\nconst profileStoreSchema = z.object({\n    editProfile: z.boolean(),\n    editPassword: z.boolean(),\n})\n\nexport type IProfile$ = z.infer<typeof profileStoreSchema>\n","import { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { profileService } from '../services'\nimport { type IProfile$ } from './types'\n\nexport const useProfile$ = () => {\n    const queryClient = useQueryClient()\n\n    const { data: store } = useQuery<IProfile$>({\n        queryKey: profileService.useProfile$(),\n        staleTime: Infinity,\n        refetchOnWindowFocus: false,\n        refetchOnMount: false,\n        initialData: { editProfile: false, editPassword: false },\n    })\n\n    const openEditProfile = () => {\n        queryClient.setQueryData<IProfile$>(profileService.useProfile$(), { ...store, editProfile: !store.editProfile })\n    }\n    const openEditPassword = () => {\n        queryClient.setQueryData<IProfile$>(profileService.useProfile$(), { ...store, editPassword: true })\n    }\n\n    const onCancel = () => {\n        queryClient.setQueryData<IProfile$>(profileService.useProfile$(), { editProfile: false, editPassword: false })\n    }\n\n    return {\n        store,\n        openEditProfile,\n        openEditPassword,\n        onCancel,\n        viewMode: !store.editProfile,\n        editPassword: store.editPassword,\n    }\n}\n","import { XDatePicker } from '@/components-x/x-date-picker/XDatePicker'\nimport { getYear } from 'date-fns'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { prepareFinishedAtForInsert } from '@/helpers/date.helpers'\nimport { useFormikContext } from 'formik'\nimport { useProfile$ } from '@/modules/profile/stores/useProfile.store'\nimport { type IUserProfileSchema } from '@/modules/profile/services'\n\nexport const ProfileBirthdayInput = () => {\n    const { viewMode } = useProfile$()\n    const formikContext = useFormikContext<IUserProfileSchema>()\n\n    function onDatePickerChange(day: Date | undefined) {\n        day && formikContext.setFieldValue('birthday', prepareFinishedAtForInsert(new Date(day)))\n    }\n    function onClear() {\n        formikContext.setFieldValue('birthday', null)\n    }\n\n    return (\n        <div>\n            <FormLabel title='Birthday' />\n\n            <XDatePicker\n                numberOfMonths={1}\n                mode='single'\n                /* picker is converting date automatically by UTC */\n                selected={formikContext.values.birthday ? new Date(formikContext.values.birthday) : undefined}\n                onSelect={onDatePickerChange}\n                dateFormat={'do MMMM yyyy'}\n                captionLayout='dropdown-buttons'\n                fromYear={getYear(new Date(Date.now())) - 100}\n                toYear={getYear(new Date(Date.now())) + 100}\n                fixedWeeks\n                showOutsideDays\n                showWeekNumber\n                // ISOWeek\n                onClear={onClear}\n                placeholder='Set date'\n                readOnly={viewMode}\n                showToday\n            />\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport { type IUserProfileSchema } from '@/modules/profile/services'\n\nexport const ProfileEmailInput = () => {\n    const formikContext = useFormikContext<IUserProfileSchema>()\n\n    return (\n        <div>\n            <FormLabel title='Email' />\n            <XInput\n                data-testid='profile-email-input'\n                disabled={true}\n                readOnly={true}\n                autoFocus={true}\n                value={formikContext.values.email}\n                name='email'\n                placeholder='Email'\n                onChange={formikContext.handleChange}\n                error={formikContext.touched.email && Boolean(formikContext.errors.email)}\n                errorMessage={formikContext.errors.email}\n            />\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport { type IUserProfileSchema } from '@/modules/profile/services'\nimport { useProfile$ } from '@/modules/profile/stores/useProfile.store'\n\nexport const ProfileNameInput = () => {\n    const { viewMode } = useProfile$()\n    const formikContext = useFormikContext<IUserProfileSchema>()\n\n    return (\n        <div>\n            <FormLabel title='Name' />\n            <XInput\n                data-testid='profile-name-input'\n                disabled={viewMode}\n                readOnly={viewMode}\n                autoFocus={true}\n                value={formikContext.values.name}\n                name='name'\n                placeholder='Name'\n                onChange={formikContext.handleChange}\n                error={formikContext.touched.name && Boolean(formikContext.errors.name)}\n                errorMessage={formikContext.errors.name}\n            />\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport { type IUserProfileSchema } from '@/modules/profile/services'\nimport { useProfile$ } from '@/modules/profile/stores/useProfile.store'\n\nexport const ProfilePhoneInput = () => {\n    const { viewMode } = useProfile$()\n    const formikContext = useFormikContext<IUserProfileSchema>()\n\n    return (\n        <div>\n            <FormLabel title='Phone' />\n            <XInput\n                data-testid='profile-phone-input'\n                disabled={viewMode}\n                readOnly={viewMode}\n                value={formikContext.values.phone || ''}\n                name='phone'\n                placeholder='Phone'\n                onChange={formikContext.handleChange}\n                error={formikContext.touched.phone && Boolean(formikContext.errors.phone)}\n                errorMessage={formikContext.errors.phone}\n            />\n        </div>\n    )\n}\n","import { type IUserProfileSchema, useFetchProfileInfo } from '../../../services/index.ts'\n\nexport const useProfileDetailsFormInitialValues = () => {\n    const { data, isLoading } = useFetchProfileInfo()\n    const initialValues: IUserProfileSchema = initialData()\n\n    return { initialValues: data || initialValues, isLoading }\n}\n\nconst initialData = (): IUserProfileSchema => ({\n    id: crypto.randomUUID(),\n    birthday: null,\n    email: '',\n    name: '',\n    phone: '',\n    avatar: '',\n})\n","import { useFormikContext } from 'formik'\nimport { useEffect } from 'react'\nimport { useProfileDetailsFormInitialValues } from './useProfileDetailsFormInitialValues'\nimport { useProfile$ } from '../../../stores/useProfile.store'\nimport type { IUserProfileSchema } from '@/modules/profile/services'\n\nexport const useInitProfileDetailsForm = () => {\n    const { viewMode } = useProfile$()\n    const { initialValues, isLoading } = useProfileDetailsFormInitialValues()\n    const formikContext = useFormikContext<IUserProfileSchema>()\n\n    useEffect(() => {\n        formikContext.setFormikState((prevState) => ({\n            ...prevState,\n            values: initialValues,\n        }))\n    }, [viewMode])\n\n    return { isLoading, viewMode }\n}\n","import type { SVGProps } from 'react'\n\nexport function IconEditProfile(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' {...props}>\n            <path\n                fill='currentColor'\n                d='M4 19v-1.8q0-.85.438-1.562T5.6 14.55q1.55-.775 3.15-1.162T12 13q.925 0 1.825.113t1.8.362l-1.675 1.7q-.5-.075-.975-.125T12 15q-1.4 0-2.775.338T6.5 16.35q-.225.125-.363.35T6 17.2v.8h6v2H5q-.425 0-.712-.288T4 19m10 1v-1.25q0-.4.163-.763t.437-.637l4.925-4.925q.225-.225.5-.325t.55-.1q.3 0 .575.113t.5.337l.925.925q.2.225.313.5t.112.55t-.1.563t-.325.512l-4.925 4.925q-.275.275-.637.425t-.763.15H15q-.425 0-.712-.288T14 20m7.5-5.575l-.925-.925zm-6 5.075h.95l3.025-3.05l-.45-.475l-.475-.45l-3.05 3.025zm3.525-3.525l-.475-.45l.925.925zM12 12q-1.65 0-2.825-1.175T8 8t1.175-2.825T12 4t2.825 1.175T16 8t-1.175 2.825T12 12m0-2q.825 0 1.413-.587T14 8t-.587-1.412T12 6t-1.412.588T10 8t.588 1.413T12 10m0-2'\n            ></path>\n        </svg>\n    )\n}\n","import { IconEditProfile } from '@/assets/icons/IconEditProfile'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { cn } from '@/helpers/cn'\nimport { useProfile$ } from '@/modules/profile/stores/useProfile.store'\n\nexport const EditProfile = () => {\n    const { openEditProfile, viewMode } = useProfile$()\n\n    return (\n        <div className={cn('opacity-70', !viewMode && 'opacity-100')}>\n            <StyledButton\n                size='small'\n                startIcon={<IconEditProfile width={24} height={24} />}\n                onClick={openEditProfile}\n                variant={viewMode ? 'text' : 'contained'}\n            ></StyledButton>\n        </div>\n    )\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { useProfile$ } from '@/modules/profile/stores/useProfile.store'\n\nexport const CancelButton = () => {\n    const { onCancel } = useProfile$()\n    return (\n        <StyledButton onClick={onCancel} size='small' error variant={'outlined'}>\n            Cancel\n        </StyledButton>\n    )\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\n\nexport const SubmitButton = () => {\n    return (\n        <StyledButton type='submit' size='small' variant={'contained'}>\n            Save\n        </StyledButton>\n    )\n}\n","import { Form } from 'formik'\nimport { ProfileBirthdayInput } from './ProfileBirthdayInput'\nimport { ProfileEmailInput } from './ProfileEmailInput'\nimport { ProfileNameInput } from './ProfileNameInput'\nimport { ProfilePhoneInput } from './ProfilePhoneInput'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { useInitProfileDetailsForm } from '@/modules/profile/components/profile-details/hooks/useInitProfileDetailsForm'\nimport { EditProfile } from './EditProfile'\nimport { CancelButton } from './CancelButton'\nimport { SubmitButton } from './SubmitButton'\n\nexport const ProfileDetailsForm = () => {\n    const { isLoading, viewMode } = useInitProfileDetailsForm()\n\n    return (\n        <Form>\n            <div className='flex items-center justify-between my-1 '>\n                <div className='flex gap-2'>\n                    <EditProfile />\n                </div>\n                {!viewMode && (\n                    <div className='flex gap-2'>\n                        <CancelButton />\n                        <SubmitButton />\n                    </div>\n                )}\n            </div>\n            <div className='flex flex-col gap-2 bg-global-2-bg p-5 rounded-md shadow-[rgba(0,_0,_0,_0.24)_0px_3px_8px] pl-5'>\n                {isLoading && (\n                    <div className='w-full h-full z-[100] bg-global-bg-plasma left-0 flex items-center duration-300 justify-center top-0 fixed'>\n                        <IconInfiniteLoading className='w-20 h-20 text-blue-500 duration-300' />\n                    </div>\n                )}\n                <ProfileEmailInput />\n                <ProfileNameInput />\n                <ProfilePhoneInput />\n                <ProfileBirthdayInput />\n            </div>\n        </Form>\n    )\n}\n","import { type IUserProfileSchema, userProfileSchema } from '../../../services'\n\nexport const useProfileDetailsFormOnValidate = () => {\n    const validate = (values: IUserProfileSchema) => {\n        const result = userProfileSchema.safeParse(values)\n        const errors: Partial<Record<keyof IUserProfileSchema, string>> = {}\n        if (!result.success) {\n            for (const issue of result.error.issues) {\n                const key = issue.path[0] as keyof IUserProfileSchema\n                errors[key] = issue.message\n            }\n        }\n\n        if (!values.name.length) {\n            errors.name = 'Required field'\n        }\n        return errors\n    }\n\n    return { validate }\n}\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport { type IUserProfileSchema, userProfileSchema } from '../types'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\n\nexport const mutation_updateUserProfile = async ({ userProfile }: { userProfile: IUserProfileSchema }) => {\n    try {\n        const client = await generateClient()\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { id, email, ...props } = userProfile\n\n        const mutation = graphql(`\n            mutation mutation_updateUserProfile($userProfile: heroes_set_input!) {\n                update_heroes(where: {}, _set: $userProfile) {\n                    returning {\n                        id\n                        avatar\n                        birthday\n                        email\n                        name\n                        phone\n                    }\n                }\n            }\n        `)\n\n        const res = await client.request(mutation, { userProfile: props })\n\n        return userProfileSchema.parse(res?.update_heroes?.returning?.[0])\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\n\nimport { type IUserProfileSchema } from '../types'\nimport { mutation_updateUserProfile } from './mutation_updateUserProfile'\n\nexport const useUpdateUserProfile = () => {\n    const queryClient = useQueryClient()\n\n    const mutation = useMutation({\n        mutationFn: ({ userProfile }: { userProfile: IUserProfileSchema }) => {\n            return mutation_updateUserProfile({ userProfile })\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries()\n        },\n    })\n\n    const updateUserProfile = ({\n        userProfile,\n        onSuccess,\n        onSettled,\n    }: {\n        userProfile: IUserProfileSchema\n        onSuccess?: () => void\n        onSettled?: () => void\n    }) => {\n        mutation.mutate({ userProfile }, { onSuccess, onSettled })\n    }\n    return { updateUserProfile }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type IUserProfileSchema } from '../../../services'\nimport { useProfile$ } from '../../../stores/useProfile.store'\nimport { useUpdateUserProfile } from '../../../services/update-profile-data/useUpdateUserProfile'\n\nexport const useProfileDetailsFormOnSubmit = () => {\n    const { onCancel } = useProfile$()\n    const { updateUserProfile } = useUpdateUserProfile()\n\n    const onSubmit = (values: IUserProfileSchema, formikHelpers: FormikHelpers<IUserProfileSchema>) => {\n        const { setSubmitting } = formikHelpers\n\n        updateUserProfile({\n            userProfile: values,\n            onSuccess: () => {\n                onCancel()\n            },\n            onSettled: () => {\n                setSubmitting(false)\n            },\n        })\n    }\n\n    return { onSubmit }\n}\n","import type { SVGProps } from 'react'\n\nexport function IconEditPassword(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' {...props}>\n            <path\n                fill='none'\n                stroke='currentColor'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth={2}\n                d='M12 17v4m-2-1l4-2m-4 0l4 2m-9-3v4m-2-1l4-2m-4 0l4 2m12-3v4m-2-1l4-2m-4 0l4 2M9 6a3 3 0 1 0 6 0a3 3 0 0 0-6 0m-2 8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2'\n            ></path>\n        </svg>\n    )\n}\n","import { IconEditPassword } from '@/assets/icons/IconEditPassword'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useProfile$ } from '@/modules/profile/stores/useProfile.store'\nimport { Suspense, lazy } from 'react'\nconst ProfileNewPasswordDialog = lazy(() => import('../../profile-new-password/ProfileNewPasswordDialog'))\n\nexport const EditPassword = () => {\n    const { openEditPassword } = useProfile$()\n\n    return (\n        <div className='opacity-70 absolute left-10 top-1'>\n            <StyledButton\n                size='small'\n                startIcon={<IconEditPassword width={24} height={24} />}\n                onClick={openEditPassword}\n                variant='text'\n            />\n            <Suspense fallback={null}>\n                <ProfileNewPasswordDialog />\n            </Suspense>\n        </div>\n    )\n}\n","import { Formik } from 'formik'\nimport { type IUserProfileSchema } from '../../services'\nimport { ProfileDetailsForm } from './components/ProfileDetailsForm'\nimport { useProfileDetailsFormInitialValues } from './hooks/useProfileDetailsFormInitialValues'\nimport { useProfileDetailsFormOnValidate } from './hooks/useProfileDetailsFormOnValidate'\nimport { useProfileDetailsFormOnSubmit } from './hooks/useProfileDetailsFormOnSubmit'\nimport { EditPassword } from './components/EditPassword'\n\nexport const ProfileDetails: React.FC = () => {\n    const { onSubmit } = useProfileDetailsFormOnSubmit()\n    const { validate } = useProfileDetailsFormOnValidate()\n    const { initialValues } = useProfileDetailsFormInitialValues()\n\n    return (\n        <div className='relative'>\n            <EditPassword />\n            <Formik<IUserProfileSchema>\n                enableReinitialize\n                initialValues={initialValues}\n                validate={validate}\n                onSubmit={onSubmit}\n            >\n                <ProfileDetailsForm />\n            </Formik>\n        </div>\n    )\n}\n","import { XModal } from '@/components-x/x-modal/XModal'\nimport { useFormikContext } from 'formik'\nimport { type IUpdateAvatarFormSchema } from '../../services'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { ImageCropper } from '@/components/image-cropper/ImageCropper'\n\nexport const ProfileImageCropDialog = () => {\n    const formikContext = useFormikContext<IUpdateAvatarFormSchema>()\n    const { imgSrc } = formikContext.values\n\n    return (\n        <XModal title={'Avatar'} open={!!imgSrc} onCancel={formikContext.resetForm}>\n            {imgSrc && (\n                <div className='text-cText m-auto flex  flex-col bg-transparent'>\n                    <ImageCropper imgPath={imgSrc} />\n                    <StyledButton\n                        disabled={formikContext.isSubmitting}\n                        className='w-full'\n                        onClick={() => formikContext.handleSubmit()}\n                    >\n                        Save\n                    </StyledButton>\n                </div>\n            )}\n        </XModal>\n    )\n}\n","import { IconUpload } from '@/assets/icons'\n\nexport const UploadHoverAnimation: React.FC = () => {\n    return (\n        <div\n            className='w-full h-full flex absolute opacity-0 group-hover:opacity-100 top-0 z-10 transition-all \n            rounded-full duration-300 items-center justify-center bg-blue-100/20'\n        >\n            <IconUpload className='min-w-[50px] min-h-[50px] text-blue-600 ' />\n        </div>\n    )\n}\n","import { useSelectUploadFile } from '@/helpers/useSelectUploadFile'\nimport { ProfileAvatar } from '@/modules/profile/components/profile-avatar/components/ProfileAvatar'\nimport { UploadInput } from '@/components/UploadInput'\nimport { UploadHoverAnimation } from './components/UploadHoverAnimation'\nimport { useFormikContext } from 'formik'\nimport { type IUpdateAvatarFormSchema } from '../../services'\n\nexport const ProfileImageCropDialogTrigger = () => {\n    const formikContext = useFormikContext<IUpdateAvatarFormSchema>()\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        useSelectUploadFile(e, (src: string) => {\n            formikContext.setFieldValue('imgSrc', src)\n        })\n    }\n\n    return (\n        <div data-testid='profile-avatar-index' className='group relative mx-auto w-fit rounded-full'>\n            <ProfileAvatar />\n            <UploadHoverAnimation />\n            <UploadInput onChange={onChange} />\n        </div>\n    )\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { userProfileSchema } from '../types'\nimport { graphql } from '@/api/tada'\n\nexport const mutation_updateAvatar = async ({ imgPath: avatar }: { imgPath: string }) => {\n    try {\n        const client = await generateClient()\n\n        const mutation = graphql(`\n            mutation mutation_updateAvatar($avatar: String!) {\n                update_heroes(where: {}, _set: { avatar: $avatar }) {\n                    returning {\n                        id\n                        avatar\n                        birthday\n                        email\n                        name\n                        phone\n                    }\n                }\n            }\n        `)\n\n        const res = await client.request(mutation, { avatar })\n\n        return userProfileSchema.parse(res?.update_heroes?.returning?.[0])\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { type FormikHelpers } from 'formik'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport getCroppedImg from '@/helpers/cropImage'\nimport { deleteImageFromServer, uploadNewImageToServer } from '@/services/image/image.service'\nimport { cast } from '@/helpers'\nimport { SERVER_ROUTES } from '@/services/enums'\nimport { useImageCropper$ } from '@/components/image-cropper/stores/useImageCropper.store'\nimport { KEY_ImageCropperStore } from '@/components/image-cropper/stores/types'\nimport { notifySuccess } from '@/helpers/processMessage'\nimport { type IUpdateAvatarFormSchema, useFetchProfileInfo } from '@/modules/profile/services'\nimport { mutation_updateAvatar } from '@/modules/profile/services/update-avatar/mutation_updateAvatar'\nimport { useUser$ } from '@/modules/app/mst/StoreProvider'\n\nexport const useProfileAvatarSubmit = () => {\n    const queryClient = useQueryClient()\n    const { id: userId } = useUser$()\n    const { data } = useFetchProfileInfo()\n\n    const { getCropArea } = useImageCropper$()\n\n    const mutation = useMutation({\n        mutationFn: async ({ values }: { values: IUpdateAvatarFormSchema }) => {\n            if (!values.imgSrc) return\n            const croppedImg = await getCroppedImg(values.imgSrc, cast(getCropArea()))\n\n            const imgPath = await uploadNewImageToServer({\n                img: cast(croppedImg),\n                route: SERVER_ROUTES.PROFILE_IMAGE_UPLOAD,\n                userId,\n            })\n            if (data?.avatar) {\n                await deleteImageFromServer(data.avatar, SERVER_ROUTES.PROFILE_IMAGE_DELETE)\n            }\n            return mutation_updateAvatar({ imgPath: cast(imgPath) })\n        },\n    })\n\n    const onSubmit = (values: IUpdateAvatarFormSchema, formikHelpers: FormikHelpers<IUpdateAvatarFormSchema>) => {\n        mutation.mutate(\n            { values },\n            {\n                onSuccess: () => {\n                    formikHelpers.resetForm()\n                    notifySuccess(`\n                        Avatar successfully updated. Thank you!`)\n                },\n                onSettled: () => {\n                    formikHelpers.setSubmitting(false)\n                    queryClient.resetQueries({ queryKey: KEY_ImageCropperStore() })\n                    queryClient.invalidateQueries()\n                },\n            },\n        )\n    }\n\n    return { onSubmit }\n}\n","import { Form, Formik } from 'formik'\nimport { ProfileImageCropDialog } from './ProfileImageCropDialog'\nimport { ProfileImageCropDialogTrigger } from './ProfileImageCropDialogTrigger'\nimport { type IUpdateAvatarFormSchema } from '../../services'\nimport { useProfileAvatarSubmit } from './hooks/useProfileAvatarSubmit'\n\nexport const ProfileAvatarIndex = () => {\n    const { onSubmit } = useProfileAvatarSubmit()\n\n    return (\n        <>\n            <Formik<IUpdateAvatarFormSchema> enableReinitialize initialValues={{ imgSrc: '' }} onSubmit={onSubmit}>\n                <Form className='flex flex-col gap-5'>\n                    <ProfileImageCropDialogTrigger />\n                    {/* * */}\n                    {/* D I A L O G S */}\n                    <ProfileImageCropDialog />\n                </Form>\n            </Formik>\n        </>\n    )\n}\n","import { ModuleWrapper } from '@/components/ModuleWrapper'\nimport { ProfileDetails } from './components/profile-details/ProfileDetails'\nimport { ProfileAvatarIndex } from './components/profile-avatar/ProfileAvatarIndex'\n\nconst ProfileIndex = () => {\n    return (\n        <ModuleWrapper>\n            <div className='flex flex-col gap-10 w-full max-w-[600px] mx-auto relative'>\n                <ProfileAvatarIndex />\n                <ProfileDetails />\n                {/* achievements - crate only through goal */}\n            </div>\n        </ModuleWrapper>\n    )\n}\n\nexport default ProfileIndex\n"],"file":"assets/ProfileIndex-rBHi4SyT.js"}