{"version":3,"file":"AchEditor-C8UpyWON.js","sources":["../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-toolbar/components/ToggleFavoriteNewAch.tsx","../../src/assets/icons/IconSnowflake.tsx","../../src/modules/achievements/components-shared/ach-freeze/service/mutation_freezeAch.ts","../../src/modules/achievements/components-shared/ach-freeze/hooks/useFreezeAch.ts","../../src/modules/achievements/components-shared/ach-freeze/AchToggleFreeze.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-toolbar/AchEditorToolbar.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/topbar-extra-content/note-editor-form-submit/useAchEditorFormOnSubmit.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/topbar-extra-content/note-editor-form-submit/AchEditorFormSubmit.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/components/AchCreatedDaysAgo.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/components/AchCreatedAt.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/components/AchCreatedAtInput.tsx","../../src/modules/achievements/services/fetch-ach/query_fetchAch.ts","../../src/modules/achievements/services/fetch-ach/useFetchAch.ts","../../src/modules/achievements/components/ach-editor-dialog/hooks/useAchData.ts","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/components/AchDescriptionRichInput.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/components/ach-img-crop-dialog/AchImgCropDialog.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/components/ach-img-crop-dialog/AchImgCropDialogTrigger.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/components/AchTitleInput.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/components/ach-info/AchInfo.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/hooks/useAchEditorTabs.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/ach-editor-tabs/AchEditorTabs.tsx","../../src/modules/achievements/components/ach-editor-dialog/components/AchEditorForm.tsx","../../src/modules/achievements/services/upsert-ach/mutation_upsertAch.ts","../../src/modules/achievements/services/upsert-ach/useUpsertAch.ts","../../src/modules/achievements/components/ach-editor-dialog/hooks/useEditorFormOnSubmit.ts","../../src/modules/achievements/components/ach-editor-dialog/hooks/useEditorFormOnValidate.ts","../../src/modules/achievements/components/ach-editor-dialog/hooks/useAchEditorInitialValues.ts","../../src/modules/achievements/components/ach-editor-dialog/components/AchEditor.tsx"],"sourcesContent":["import { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconHeart } from '@/assets/icons/IconHeart'\nimport { useFormikContext } from 'formik'\nimport { type IAch } from '@/modules/achievements/services/types'\n\nexport const ToggleFavoriteNewAch = () => {\n    const formikContext = useFormikContext<IAch>()\n    const isFavorite = formikContext.values.is_favorite\n    return (\n        <>\n            <StyledButton\n                id='toggleFavoriteAch'\n                error={!!isFavorite}\n                variant={isFavorite ? 'contained' : 'text'}\n                size={'small'}\n                onClick={() => {\n                    formikContext.setFieldValue('is_favorite', !isFavorite)\n                }}\n                startIcon={<IconHeart className='mb-0.5 h-6 w-6 opacity-70 hover:opacity-100' />}\n            />\n        </>\n    )\n}\n","import type { SVGProps } from 'react'\n\nexport function IconSnowflake(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg xmlns='http://www.w3.org/2000/svg' width='0.88rem' height='1rem' viewBox='0 0 448 512' {...props}>\n            <path\n                fill='currentColor'\n                d='M224 0c17.7 0 32 14.3 32 32v30.1l15-15c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-49 49v70.3l61.4-35.8L335 98.4c3.4-12.8 16.6-20.4 29.4-17s20.4 16.6 17 29.4l-5.2 19.3l23.6-13.8c15.3-8.9 34.9-3.7 43.8 11.5s3.8 34.9-11.5 43.8l-25.3 14.8l21.7 5.8c12.8 3.4 20.4 16.6 17 29.4s-16.6 20.4-29.4 17l-67.7-18.1l-60.9 35.5l60.9 35.5l67.7-18.1c12.8-3.4 26 4.2 29.4 17s-4.2 26-17 29.4l-21.7 5.8l25.3 14.8c15.3 8.9 20.4 28.5 11.5 43.8s-28.5 20.4-43.8 11.5l-23.6-13.8l5.2 19.3c3.4 12.8-4.2 26-17 29.4s-26-4.2-29.4-17l-17.7-66.1l-61.3-35.8V382l49 49c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-15-15V480c0 17.7-14.3 32-32 32s-32-14.3-32-32v-30.1l-15 15c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l49-49v-70.3l-61.4 35.8l-17.7 66.1c-3.4 12.8-16.6 20.4-29.4 17s-20.4-16.6-17-29.4l5.2-19.3l-23.8 13.7c-15.3 8.9-34.9 3.7-43.8-11.5s-3.7-34.9 11.5-43.8l25.3-14.8l-21.7-5.8c-12.8-3.4-20.4-16.6-17-29.4s16.6-20.4 29.4-17l67.7 18.1l61-35.4l-60.9-35.5l-67.7 18.1c-12.8 3.4-26-4.2-29.4-17s4.2-26 17-29.4l21.7-5.8l-25.3-14.8C.6 162.7-4.5 143.1 4.4 127.9s28.5-20.4 43.8-11.5l23.6 13.8l-5.2-19.3c-3.4-12.8 4.2-26 17-29.4s26 4.2 29.4 17l17.7 66.1l61.3 35.7V130l-49-49c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l15 15L192 32c0-17.7 14.3-32 32-32'\n            ></path>\n        </svg>\n    )\n}\n","import { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { achResponseFr } from '@/modules/achievements/services/fragments/achResponseFr'\n\nexport const mutation_freezeAch = async ({ id, freezed }: { id: string; freezed: boolean }) => {\n    try {\n        const mutation = graphql(\n            `\n                mutation mutation_updateAchFreezed($id: uuid!, $freezed: Boolean!) {\n                    update_achievements_by_pk(pk_columns: { id: $id }, _set: { freezed: $freezed }) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        return await client.request(mutation, { id, freezed })\n    } catch (e) {\n        await resolveError(e)\n        return\n    }\n}\n","import { useAchEditorDialog$ } from '@/modules/achievements/components/ach-editor-dialog/mst/provider'\nimport type { IAch } from '@/modules/achievements/services/types'\nimport { useMutation } from '@tanstack/react-query'\nimport { useFormikContext } from 'formik'\nimport { mutation_freezeAch } from '../service/mutation_freezeAch'\nimport { useInvalidateAchs } from '@/modules/achievements/hooks/useInvalidateAchs'\n\nexport const useFreezeAch = () => {\n    const { onSuccess } = useInvalidateAchs()\n    const formikContext = useFormikContext<IAch>()\n    const { edit_id } = useAchEditorDialog$()\n\n    const mutation = useMutation({\n        mutationFn: (props: { id: string; freezed: boolean }) => {\n            return mutation_freezeAch(props)\n        },\n        onSuccess,\n    })\n\n    const freezeAch = () => {\n        const freezed = !formikContext.values.freezed\n        formikContext.setFieldValue('freezed', freezed)\n\n        if (edit_id) {\n            mutation.mutate({\n                id: edit_id,\n                freezed,\n            })\n        }\n    }\n\n    return {\n        freezeAch,\n        freezed: formikContext.values.freezed,\n    }\n}\n","import { IconSnowflake } from '@/assets/icons/IconSnowflake'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { cn } from '@/helpers/cn'\nimport { useFreezeAch } from './hooks/useFreezeAch'\n\nexport const AchToggleFreeze = () => {\n    const { freezeAch, freezed } = useFreezeAch()\n\n    return (\n        <StyledButton\n            onClick={freezeAch}\n            variant='text'\n            startIcon={\n                <IconSnowflake\n                    className={cn(\n                        'w-[22px] h-[22px] opacity-70 hover:opacity-100',\n                        freezed && 'opacity-100 text-blue-500',\n                    )}\n                />\n            }\n        ></StyledButton>\n    )\n}\n","import { useFormikContext } from 'formik'\nimport { type IAch } from '@/modules/achievements/services/types'\nimport { ToggleFavoriteNewAch } from './components/ToggleFavoriteNewAch'\nimport { useAchEditorDialog$ } from '../../mst/provider'\nimport { AchIsFavorite } from '@/modules/achievements/components-shared/ach-is-favorite/AchIsFavorite'\nimport { AchIsDeleted } from '@/modules/achievements/components-shared/ach-is-deleted/AchIsDeleted'\nimport { AchToggleEdit } from '@/modules/achievements/components-shared/AchToggleEdit'\nimport { AchToggleFreeze } from '@/modules/achievements/components-shared/ach-freeze/AchToggleFreeze'\n\nexport const AchEditorToolbar = () => {\n    const { edit_id } = useAchEditorDialog$()\n    const formikContext = useFormikContext<IAch>()\n\n    return (\n        <div className='relative flex w-full min-h-[32px] flex-wrap items-center justify-center gap-5'>\n            {edit_id && <AchToggleEdit id={edit_id} />}\n            {!edit_id ? (\n                <ToggleFavoriteNewAch />\n            ) : (\n                <AchIsFavorite id={edit_id} isFavorite={!!formikContext.values.is_favorite} />\n            )}\n            {edit_id && <AchIsDeleted id={edit_id} deletedAt={!!formikContext.values.deleted_at} />}\n            <AchToggleFreeze />\n        </div>\n    )\n}\n","import { type IAch } from '@/modules/achievements/services/types'\nimport { useFormikContext } from 'formik'\n\nexport const useAchEditorFormOnSubmit = () => {\n    const formikContext = useFormikContext<IAch>()\n\n    return { OkText: 'Save', tooltipText: '', disabled: false, isSubmitting: formikContext.isSubmitting }\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { useAchEditorFormOnSubmit } from './useAchEditorFormOnSubmit'\n\nexport const AchEditorFormSubmit: React.FC = () => {\n    const { disabled, OkText, tooltipText, isSubmitting } = useAchEditorFormOnSubmit()\n\n    return (\n        <div className='relative'>\n            <StyledButton\n                variant='outlined'\n                type='submit'\n                disabled={disabled || isSubmitting}\n                size='small'\n                className='z-10'\n            >\n                {!isSubmitting ? OkText : <IconInfiniteLoading className='w-6 h-6' />}\n            </StyledButton>\n            {disabled && tooltipText && (\n                <div\n                    id='disabledTooltip'\n                    className='pointer-events-auto absolute left-0 top-0\n                    z-20 h-full w-full rounded-lg bg-transparent'\n                />\n            )}\n            {disabled && tooltipText && <XTooltip anchorSelect='#disabledTooltip'>{tooltipText}</XTooltip>}\n        </div>\n    )\n}\n","import { cast } from '@/helpers'\nimport { calculateCreatedDaysAgo } from '@/helpers/date.helpers'\nimport { type IAch } from '@/modules/achievements/services/types'\nimport { useFormikContext } from 'formik'\n\nexport const AchCreatedDaysAgo = () => {\n    const formikContext = useFormikContext<IAch>()\n\n    const { created_at } = formikContext.values\n    const createdDaysAgo = calculateCreatedDaysAgo(cast(formikContext.values.created_at))\n\n    const createString = !!createdDaysAgo ? `${createdDaysAgo} ${createdDaysAgo === 1 ? 'day' : 'days'} ago` : 'today'\n\n    return (\n        <>\n            {created_at && (\n                <div className='flex items-center gap-2 font-extralight text-xs min-w-fit'>{createString}</div>\n            )}\n        </>\n    )\n}\n","import { format } from 'date-fns'\nimport { convertStringDate } from '@/helpers/date.helpers'\nimport { useFormikContext } from 'formik'\nimport { type IAch } from '@/modules/achievements/services/types'\nimport { AchCreatedDaysAgo } from './AchCreatedDaysAgo'\n\nexport const AchCreatedAt = () => {\n    const formikContext = useFormikContext<IAch>()\n\n    const created = formikContext.values.created_at\n\n    return created ? (\n        <div className='flex items-center gap-2 mb-5 opacity-80 flex-wrap'>\n            <div className='font-extralight text-xs min-w-fit'>created</div>\n            <AchCreatedDaysAgo />\n            <div className='font-extralight text-xs min-w-fit'>\n                on {format(convertStringDate(created), 'do MMMM yyyy, EEEE')}\n            </div>\n        </div>\n    ) : null\n}\n","import { XDatePicker } from '@/components-x/x-date-picker/XDatePicker'\nimport { getYear } from 'date-fns'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { prepareFinishedAtForInsert } from '@/helpers/date.helpers'\nimport { useFormikContext } from 'formik'\nimport { type IAch } from '@/modules/achievements/services/types'\nimport { useAchEditorDialog$ } from '@/modules/achievements/components/ach-editor-dialog/mst/provider'\n\nexport const AchCreatedAtInput = () => {\n    const formikContext = useFormikContext<IAch>()\n    const { readonly } = useAchEditorDialog$()\n    function onDatePickerChange(day: Date | undefined) {\n        day && formikContext.setFieldValue('created_at', prepareFinishedAtForInsert(new Date(day)))\n    }\n    function onClear() {\n        formikContext.setFieldValue('created_at', null)\n    }\n\n    return (\n        <div>\n            <FormLabel title='Date *' />\n\n            <XDatePicker\n                numberOfMonths={1}\n                mode='single'\n                /* picker is converting date automatically by UTC */\n                selected={formikContext.values.created_at ? new Date(formikContext.values.created_at) : undefined}\n                onSelect={onDatePickerChange}\n                dateFormat={'do MMMM yyyy'}\n                captionLayout='dropdown-buttons'\n                fromYear={getYear(new Date(Date.now())) - 100}\n                toYear={getYear(new Date(Date.now())) + 100}\n                fixedWeeks\n                showOutsideDays\n                showWeekNumber\n                onClear={onClear}\n                showToday\n                disabled={readonly}\n                readOnly={readonly}\n            />\n        </div>\n    )\n}\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\nimport { achResponseFr } from '../fragments/achResponseFr'\n\nexport const query_fetchAch = async ({ id }: { id: string }) => {\n    try {\n        const query = graphql(\n            `\n                query query_fetchAch($id: uuid!) {\n                    achievements_by_pk(id: $id) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        const data = await client.request(query, { id })\n\n        return data?.achievements_by_pk\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useQuery } from '@tanstack/react-query'\nimport { query_fetchAch } from './query_fetchAch'\nimport { achService } from '../achService'\nimport { cast } from '@/helpers'\n\nexport const useFetchAch = (props: { id?: string }) => {\n    const { id } = props\n    const { isLoading, data, isFetching, isFetched } = useQuery({\n        queryKey: achService.fetchAchKey(`${id}`),\n        queryFn: async () => await query_fetchAch({ id: cast(id) }),\n        staleTime: 1000,\n        refetchOnWindowFocus: false,\n        refetchOnMount: true,\n        enabled: !!id,\n    })\n    return {\n        isLoading,\n        data,\n        isFetching,\n        isFetched,\n    }\n}\n","import { useFetchAch } from '@/modules/achievements/services/fetch-ach/useFetchAch'\nimport { useAchEditorDialog$ } from '../mst/provider'\n\nexport const useAchData = () => {\n    const { edit_id } = useAchEditorDialog$()\n    const { isLoading, data, isFetching, isFetched } = useFetchAch({ id: edit_id })\n    return {\n        isLoading,\n        data,\n        isFetched,\n        isFetching,\n    }\n}\n","import { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport { useAchData } from '../../../../../hooks/useAchData'\nimport { type IAch } from '@/modules/achievements/services/types'\nimport { XTiptap } from '@/components-x/x-tiptap/XTiptap'\nimport { useAchEditorDialog$ } from '@/modules/achievements/components/ach-editor-dialog/mst/provider'\n\nexport const AchDescriptionRichInput = () => {\n    const { readonly } = useAchEditorDialog$()\n    const formikContext = useFormikContext<IAch>()\n    const { isLoading, data } = useAchData()\n\n    return (\n        <div className='relative pb-2'>\n            <FormLabel title='Description' />\n            <XTiptap\n                // wrapperClassName='min-h-52'\n                isLoading={isLoading}\n                content={data?.description || ''}\n                onChange={(content) => formikContext.setFieldValue('description', content)}\n                readonly={readonly}\n                // error={formikContext.touched.description && Boolean(formikContext.errors.description)}\n                // errorMessage={formikContext.errors.description}\n            />\n        </div>\n    )\n}\n","import { useFormikContext } from 'formik'\nimport { type IAchEditor } from '@/modules/achievements/services/types'\nimport { ImgCropper } from '@/components/img-cropper-dialog/ImgCropperDialog'\n\nexport const AchImgCropDialog = () => {\n    const formikContext = useFormikContext<IAchEditor>()\n    const { img_src_buffer, img_src } = formikContext.values\n\n    const addCroppedImg = async (cropper?: Cropper) => {\n        formikContext.setFieldValue('img_src_buffer', undefined)\n        formikContext.setFieldValue('img_src', cropper?.getCroppedCanvas().toDataURL())\n    }\n\n    const onCancel = async () => {\n        formikContext.setFieldValue('img_src_buffer', undefined)\n        formikContext.setFieldValue('img_src', undefined)\n    }\n\n    return <ImgCropper src={img_src} open={!!img_src && !!img_src_buffer} onOk={addCroppedImg} onCancel={onCancel} />\n}\n","import { useSelectUploadFile } from '@/helpers/useSelectUploadFile'\nimport { UploadInput } from '@/components/UploadInput'\nimport { useFormikContext } from 'formik'\nimport { type IAchEditor } from '@/modules/achievements/services/types'\nimport { IconUpload } from '@/assets/icons'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { cn } from '@/helpers/cn'\nimport { useAchEditorDialog$ } from '@/modules/achievements/components/ach-editor-dialog/mst/provider'\n\nexport const AchImgCropDialogTrigger = () => {\n    const { readonly } = useAchEditorDialog$()\n    const formikContext = useFormikContext<IAchEditor>()\n    const { img_src, img_path } = formikContext.values\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        useSelectUploadFile(e, (src: string) => {\n            formikContext.setFieldValue('img_src', src)\n            formikContext.setFieldValue('img_src_buffer', src)\n        })\n    }\n\n    const error = formikContext.touched.title && Boolean(formikContext.errors.img_src)\n\n    const errorMessage = formikContext.errors.img_src\n\n    const imgSrc = img_path || img_src\n\n    return (\n        <div className={cn(readonly && 'pointer-events-none select-none')}>\n            <FormLabel title='Logo' />\n            <div\n                data-testid='profile-avatar-index'\n                className={cn(\n                    `group relative mx-auto flex h-[300px] w-[calc(100%-40px)] p-5\n                    items-center justify-center rounded-md border border-solid\n                    border-blue-900 hover:border-blue-600 shadow-md transition-shadow duration-300`,\n                    error && 'border-red-500 hover:border-red-500',\n                    readonly && 'border-transparent',\n                )}\n            >\n                {imgSrc && (\n                    <img\n                        src={\n                            img_src ||\n                            `${import.meta.env['VITE_FIRE_BUNNY_STORAGE']}achievements/${img_path}` ||\n                            undefined\n                        }\n                        className='absolute top-0 left-0 right-[120px] w-full h-full opacity-[0.04] rounded-md z-1'\n                    />\n                )}\n                {imgSrc && (\n                    <img\n                        src={\n                            img_src ||\n                            `${import.meta.env['VITE_FIRE_BUNNY_STORAGE']}achievements/${img_path}` ||\n                            undefined\n                        }\n                        className='absolute h-[300px] w-[300px] rounded-md z-10'\n                    />\n                )}\n                {!readonly && (\n                    <IconUpload\n                        width={64}\n                        height={64}\n                        className={cn(\n                            'duration-300 z-20 group-hover:text-blue-600 text-blue-900',\n                            error && 'text-red-900/50 group-hover:text-red-900',\n                        )}\n                    />\n                )}\n                <UploadInput onChange={onChange} />\n                {error && errorMessage && (\n                    <div\n                        data-testid='error-message'\n                        className='font-kzen bg-global-3-bg absolute bottom-[-6px] left-2 z-20 m-0 rounded-full p-0 px-1 text-xs leading-3 text-red-700 '\n                    >\n                        {errorMessage}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport { type IAch } from '@/modules/achievements/services/types'\nimport { useAchEditorDialog$ } from '@/modules/achievements/components/ach-editor-dialog/mst/provider'\n\nexport const AchTitleInput = () => {\n    const { readonly } = useAchEditorDialog$()\n    const formikContext = useFormikContext<IAch>()\n\n    return (\n        <div>\n            <FormLabel title='Title *' />\n            <XInput\n                readOnly={readonly}\n                data-testid='ach-title-input'\n                autoFocus={true}\n                value={formikContext.values.title}\n                name='title'\n                onChange={formikContext.handleChange}\n                error={formikContext.touched.title && Boolean(formikContext.errors.title)}\n                errorMessage={formikContext.errors.title}\n            />\n        </div>\n    )\n}\n","import { AchCreatedAt } from './components/AchCreatedAt'\nimport { AchCreatedAtInput } from './components/AchCreatedAtInput'\nimport { AchDescriptionRichInput } from './components/AchDescriptionRichInput'\nimport { AchImgCropDialog } from './components/ach-img-crop-dialog/AchImgCropDialog'\nimport { AchImgCropDialogTrigger } from './components/ach-img-crop-dialog/AchImgCropDialogTrigger'\nimport { AchTitleInput } from './components/AchTitleInput'\n\nexport const AchInfo: React.FC = () => {\n    return (\n        <div className='py-2'>\n            <AchCreatedAt />\n            <div className='flex flex-col gap-5'>\n                <AchTitleInput />\n                <AchDescriptionRichInput />\n                <AchCreatedAtInput />\n                <AchImgCropDialogTrigger />\n                {/* * */}\n                {/* D I A L O G S */}\n                <AchImgCropDialog />\n            </div>\n        </div>\n    )\n}\n","import { type TabsProps } from 'antd'\nimport { AchInfo } from '../components/ach-info/AchInfo'\n\nexport const useAchEditorTabs = () => {\n    const editorTabs: TabsProps['items'] = [{ key: '1', label: 'Achievement', children: <AchInfo /> }]\n\n    return { editorTabs }\n}\n","import { Tabs } from 'antd'\nimport { AchEditorFormSubmit } from './components/topbar-extra-content/note-editor-form-submit/AchEditorFormSubmit'\nimport { useAchEditorTabs } from './hooks/useAchEditorTabs'\nimport { useAchEditorDialog$ } from '../../mst/provider'\nimport { observer } from 'mobx-react-lite'\n\nexport const AchEditorTabs = observer(() => {\n    const { readonly } = useAchEditorDialog$()\n    const { editorTabs } = useAchEditorTabs()\n\n    return (\n        <Tabs\n            className='[&_.ant-tabs-nav::before]:border-slate-500 '\n            tabBarStyle={{\n                position: 'sticky',\n                top: -20,\n                background: 'var(--colors-global-2-bg-plasma)',\n                zIndex: 10,\n            }}\n            defaultActiveKey='1'\n            items={editorTabs}\n            tabBarExtraContent={!readonly && <AchEditorFormSubmit />}\n            indicator={{ align: 'center' }}\n        />\n    )\n})\n","import { Form } from 'formik'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { AchEditorToolbar } from './ach-editor-toolbar/AchEditorToolbar'\nimport { AchEditorTabs } from './ach-editor-tabs/AchEditorTabs'\nimport { useAchData } from '../hooks/useAchData'\n\nexport const AchEditorForm = () => {\n    const { isLoading } = useAchData()\n\n    return (\n        <Form>\n            {isLoading && (\n                <div className='w-full h-full z-[100] bg-global-bg-plasma left-0 flex items-center duration-300 justify-center top-0 fixed'>\n                    <IconInfiniteLoading className='w-20 h-20 text-blue-500 duration-300' />\n                </div>\n            )}\n            <AchEditorToolbar />\n            <AchEditorTabs />\n        </Form>\n    )\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport type { IAchEditor } from '../types'\nimport { graphql } from '@/api/tada'\nimport { achResponseFr } from '../fragments/achResponseFr'\n\nexport const mutation_upsertAch = async ({ values }: { values: IAchEditor }) => {\n    try {\n        const object = {\n            id: values.id,\n            title: values.title,\n            description: values.description,\n            img_path: values.img_path,\n            is_favorite: values.is_favorite,\n            freezed: values.freezed,\n            created_at: values.created_at,\n        }\n\n        const mutation = graphql(\n            `\n                mutation mutation_upsertAch($object: achievements_insert_input!) {\n                    insert_achievements_one(\n                        object: $object\n                        on_conflict: {\n                            constraint: achievements_id_key\n                            update_columns: [title, description, img_path, is_favorite, freezed, created_at]\n                        }\n                    ) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        return await client.request(mutation, { object })\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { type IAchEditor } from '../types'\nimport { useInvalidateAchs } from '../../hooks/useInvalidateAchs'\nimport { mutation_upsertAch } from './mutation_upsertAch'\nimport { cast } from '@/helpers'\nimport { SERVER_ROUTES } from '@/services/enums'\nimport { uploadNewImageToServer } from '@/services/image/image.service'\nimport { useUser$ } from '@/modules/app/mst/StoreProvider'\n\nexport const useUpsertAch = () => {\n    const { id: userId } = useUser$()\n    const { onSuccess } = useInvalidateAchs()\n\n    const mutation = useMutation({\n        mutationFn: async ({ values }: { values: IAchEditor }) => {\n            let imgPath: string | null | undefined = values.img_path\n            if (values.img_src) {\n                imgPath = await uploadNewImageToServer({\n                    img: cast(values.img_src),\n                    route: SERVER_ROUTES.ACH_IMAGE_UPLOAD,\n                    userId,\n                })\n            }\n\n            return mutation_upsertAch({ values: { ...values, img_path: imgPath || null } })\n        },\n        onSuccess,\n    })\n\n    const upsertAch = ({\n        values,\n        onSuccess,\n        onSettled,\n    }: {\n        values: IAchEditor\n        onSuccess?: () => void\n        onSettled?: () => void\n    }) => {\n        mutation.mutate({ values }, { onSuccess, onSettled })\n    }\n\n    return { upsertAch }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type IAchEditor } from '@/modules/achievements/services/types'\nimport { useUpsertAch } from '@/modules/achievements/services/upsert-ach/useUpsertAch'\nimport { useAchEditorDialog$ } from '../mst/provider'\n\nexport const useEditorFormOnSubmit = () => {\n    const { onClose } = useAchEditorDialog$()\n    const { upsertAch } = useUpsertAch()\n\n    const onSubmit = (values: IAchEditor, formikHelpers: FormikHelpers<IAchEditor>) => {\n        const { setSubmitting } = formikHelpers\n        upsertAch({\n            values,\n            onSuccess: () => {\n                onClose()\n            },\n            onSettled: () => {\n                setSubmitting(false)\n            },\n        })\n    }\n\n    return { onSubmit }\n}\n","import { type IAchEditor, achSchema } from '@/modules/achievements/services/types'\n\nexport const useEditorFormOnValidate = () => {\n    const validate = (values: IAchEditor) => {\n        const result = achSchema.safeParse(values)\n        const errors: Partial<Record<keyof IAchEditor, string>> = {}\n        if (!result.success) {\n            for (const issue of result.error.issues) {\n                const key = issue.path[0] as keyof IAchEditor\n                errors[key] = issue.message\n            }\n        }\n\n        if (!values.title.length) {\n            errors.title = 'Required field'\n        }\n\n        if (!values.img_path?.length && !values.img_src?.length) {\n            errors.img_src = 'Required field'\n        }\n\n        return errors\n    }\n\n    return { validate }\n}\n","import { useMemo } from 'react'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { useAchData } from './useAchData.ts'\nimport { type IAch, type IAchEditor } from '@/modules/achievements/services/types.ts'\n\nexport const useAchEditorInitialValues = () => {\n    const { data, isFetching, isFetched } = useAchData()\n    const initialValues: IAchEditor = useMemo(() => initialAch(data), [!!data, isFetching, isFetched])\n\n    return { initialValues: initialValues }\n}\n\nconst initialAch = (data: IAch | null | undefined): IAchEditor => ({\n    id: data?.id || crypto.randomUUID(),\n    created_at: data?.created_at || formatDateWithTimezone(),\n    deleted_at: data?.deleted_at || null,\n    is_favorite: !!data?.is_favorite,\n    title: data?.title || '',\n    description: data?.description || '',\n    img_path: data?.img_path || '',\n    archived: !!data?.archived,\n    freezed: !!data?.freezed,\n})\n","import { type IAchEditor } from '@/modules/achievements/services/types'\nimport { Formik } from 'formik'\nimport { AchEditorForm } from './AchEditorForm'\nimport { useEditorFormOnSubmit } from '../hooks/useEditorFormOnSubmit'\nimport { useEditorFormOnValidate } from '../hooks/useEditorFormOnValidate'\nimport { useAchEditorInitialValues } from '../hooks/useAchEditorInitialValues'\n\n/**\n * @goalId toggle between new note and edit note\n */\nconst AchEditor = () => {\n    const { onSubmit } = useEditorFormOnSubmit()\n    const { validate } = useEditorFormOnValidate()\n    const { initialValues } = useAchEditorInitialValues()\n\n    return (\n        <Formik<IAchEditor> enableReinitialize initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n            <AchEditorForm />\n        </Formik>\n    )\n}\n\nexport default AchEditor\n"],"names":["ToggleFavoriteNewAch","formikContext","useFormikContext","isFavorite","values","is_favorite","jsx","StyledButton","setFieldValue","IconHeart","IconSnowflake","props","mutation_freezeAch","id","freezed","mutation","graphql","achResponseFr","generateClient","request","e","resolveError","useFreezeAch","onSuccess","useInvalidateAchs","edit_id","useAchEditorDialog$","useMutation","mutationFn","freezeAch","mutate","AchToggleFreeze","cn","AchEditorToolbar","jsxs","AchToggleEdit","AchIsFavorite","AchIsDeleted","deleted_at","useAchEditorFormOnSubmit","OkText","tooltipText","disabled","isSubmitting","AchEditorFormSubmit","IconInfiniteLoading","XTooltip","AchCreatedDaysAgo","created_at","createdDaysAgo","calculateCreatedDaysAgo","cast","createString","AchCreatedAt","created","format","convertStringDate","AchCreatedAtInput","readonly","onDatePickerChange","day","prepareFinishedAtForInsert","Date","onClear","FormLabel","XDatePicker","undefined","getYear","now","query_fetchAch","query","data","achievements_by_pk","useFetchAch","isLoading","isFetching","isFetched","useQuery","queryKey","achService","fetchAchKey","queryFn","staleTime","refetchOnWindowFocus","refetchOnMount","enabled","useAchData","AchDescriptionRichInput","XTiptap","description","content","AchImgCropDialog","img_src_buffer","img_src","addCroppedImg","cropper","getCroppedCanvas","toDataURL","onCancel","ImgCropper","AchImgCropDialogTrigger","img_path","onChange","src","error","touched","title","Boolean","errors","errorMessage","imgSrc","IconUpload","UploadInput","AchTitleInput","XInput","handleChange","AchInfo","useAchEditorTabs","editorTabs","key","label","children","AchEditorTabs","observer","Tabs","position","top","background","zIndex","align","AchEditorForm","Form","mutation_upsertAch","object","useUpsertAch","userId","useUser$","imgPath","uploadNewImageToServer","img","route","SERVER_ROUTES","ACH_IMAGE_UPLOAD","upsertAch","onSettled","useEditorFormOnSubmit","onClose","onSubmit","formikHelpers","setSubmitting","useEditorFormOnValidate","validate","result","achSchema","safeParse","success","issue","issues","path","message","length","useAchEditorInitialValues","initialValues","useMemo","initialAch","crypto","randomUUID","formatDateWithTimezone","archived","AchEditor","Formik"],"mappings":"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"}