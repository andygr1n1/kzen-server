{"version":3,"mappings":"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","names":["filteredGoalsFabric","goals","timeFrame","compact","uniq","map","goal","finished_at","format","convertStringDate","filteredGoals","filter","getMonthNumber","month","MONTHS_ENUM","KEY_useGoalsFiltersStore","z","object","searchInput","string","serverSearchInput","status","goalStatusSchema","useGoalsFilters","queryClient","useQueryClient","data","store","useQuery","queryKey","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","initialData","goalStatusEnum","active","onChangeServerSearchInput","useMemo","debounce","e","setQueryData","target","value","onChange","GoalsCards","queryFilter","isLoading","fetchNextPage","hasNextPage","useFetchGoals","limit","ref","inView","useInView","useEffect","jsxs","tp","renderGoals","length","React","jsx","FormLabel","split","TopGoal","id","IsLoading","AddGoal","setStore","setState","useGoalEditor$","addGoal","goalEditorMode","new","goalId","open","StyledButton","IconNew","useGetGoalsParamsFilter","paramFilter","location","useLocation","state","isActive","isStatusActive","isExpired","isExpiredGoalStatus","isRitualized","isFilterStateRitualized","isFavorite","isStatusFavorite","isCompleted","isStatusCompleted","isDeleted","isStatusDeleted","isAll","isStatusAll","ActiveFilterIcon","icon","IconFocus","IconAll","IconExpired","IconRitual","IconFavorite","IconCompleted","IconDeleteTemp","GoalsFiltersSelectButton","observer","cn","GoalsFilterSelect","setOpen","useState","navigate","useNavigate","onClose","setGoalsFilterParam","pathname","search","XDropdown","x","DropdownRender","XMenuDropdown","XMenuItem","artifactStatus","all","SearchGoalsInput","cancel","XInput","IconSearch","GoalsHeader","GoalEditorDialog","lazy","__vitePreload","GoalsByFilterIndex","ModuleWrapper","Suspense","useSetGoalsParamsFilter","setFilter","getGoalsFilterParam","GoalsCmsIndex","Routes","Route","Navigate"],"ignoreList":[],"sources":["../../src/modules/goals/helpers/filteredGoalsFabric.ts","../../src/helpers/getMonthNumber.helper.ts","../../src/modules/goals/components/goals-cms/stores/types.ts","../../src/modules/goals/components/goals-cms/stores/useGoalsFilters.store.ts","../../src/modules/goals/components/goals-cms/components/GoalsCards.tsx","../../src/modules/goals/components/goals-cms/components/AddGoal.tsx","../../src/modules/goals/shared-hooks/useGetGoalsParamsFilter.ts","../../src/modules/goals/components/goals-cms/components/ActiveFilterIcon.tsx","../../src/modules/goals/components/goals-cms/components/GoalsFiltersSelectButton.tsx","../../src/modules/goals/components/goals-cms/components/GoalsFilterSelect.tsx","../../src/modules/goals/components/goals-cms/components/SearchGoalsInput.tsx","../../src/modules/goals/components/goals-cms/components/GoalsHeader.tsx","../../src/modules/goals/components/goals-cms/GoalsByFilterIndex.tsx","../../src/modules/goals/shared-hooks/useSetGoalsParamsFilter.ts","../../src/modules/goals/components/goals-cms/GoalsCmsIndex.tsx"],"sourcesContent":["import { compact, uniq } from 'lodash-es'\nimport { type IGoalSchema } from '../shared-service/types'\nimport { format } from 'date-fns'\nimport { convertStringDate } from '@/helpers/date.helpers'\n\nexport const filteredGoalsFabric = (\n    goals: IGoalSchema[] = [],\n): {\n    timeFrame: string[]\n    filteredGoals: (tp: string) => IGoalSchema[]\n} => {\n    const timeFrame = compact(\n        uniq(goals.map((goal) => goal.finished_at && format(convertStringDate(goal.finished_at), 'yyyy MMMM'))),\n    )\n\n    const filteredGoals = (timeFrame: string) => {\n        return goals.filter(\n            (goal) => goal.finished_at && format(convertStringDate(goal.finished_at), 'yyyy MMMM') === timeFrame,\n        )\n    }\n\n    return {\n        timeFrame,\n        filteredGoals,\n    }\n}\n","export enum MONTHS_ENUM {\n    JANUARY = 'January',\n    FEBRUARY = 'February',\n    MARCH = 'March',\n    APRIL = 'April',\n    MAY = 'May',\n    JUNE = 'June',\n    JULY = 'July',\n    AUGUST = 'August',\n    SEPTEMBER = 'September',\n    OCTOBER = 'October',\n    NOVEMBER = 'November',\n    DECEMBER = 'December',\n}\n\nexport const getMonthNumber = (month: MONTHS_ENUM | string | undefined): number => {\n    switch (month) {\n        case MONTHS_ENUM.JANUARY:\n            return 1\n        case MONTHS_ENUM.FEBRUARY:\n            return 2\n        case MONTHS_ENUM.MARCH:\n            return 3\n        case MONTHS_ENUM.APRIL:\n            return 4\n        case MONTHS_ENUM.MAY:\n            return 5\n        case MONTHS_ENUM.JUNE:\n            return 6\n        case MONTHS_ENUM.JULY:\n            return 7\n        case MONTHS_ENUM.AUGUST:\n            return 8\n        case MONTHS_ENUM.SEPTEMBER:\n            return 9\n        case MONTHS_ENUM.OCTOBER:\n            return 10\n        case MONTHS_ENUM.NOVEMBER:\n            return 11\n        case MONTHS_ENUM.DECEMBER:\n            return 12\n        default:\n            return 1\n    }\n}\n","import { goalStatusSchema } from '@/modules/goals/shared-service'\nimport { z } from 'zod'\n\nexport const KEY_useGoalsFiltersStore = () => ['KEY_useGoalsFiltersStore']\n\nconst foalsFiltersSchema = z.object({\n    searchInput: z.string(),\n    serverSearchInput: z.string(),\n    status: goalStatusSchema,\n})\n\nexport type IGoalsFiltersSchema = z.infer<typeof foalsFiltersSchema>\n","import { goalStatusEnum } from '@/modules/goals/shared-service'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { type IGoalsFiltersSchema, KEY_useGoalsFiltersStore } from './types'\nimport { type ChangeEvent, useMemo } from 'react'\nimport { debounce } from 'lodash-es'\n\nexport const useGoalsFilters = () => {\n    const queryClient = useQueryClient()\n\n    const { data: store } = useQuery<IGoalsFiltersSchema>({\n        queryKey: KEY_useGoalsFiltersStore(),\n        staleTime: Infinity,\n        refetchOnWindowFocus: false,\n        refetchOnMount: false,\n        initialData: { searchInput: '', serverSearchInput: '', status: goalStatusEnum.active },\n    })\n\n    const onChangeServerSearchInput = useMemo(() => {\n        return debounce((e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            queryClient.setQueryData(KEY_useGoalsFiltersStore(), {\n                ...store,\n                serverSearchInput: e.target.value,\n                searchInput: e.target.value,\n            })\n        }, 1000)\n    }, [])\n\n    const onChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        queryClient.setQueryData(KEY_useGoalsFiltersStore(), { ...store, searchInput: e.target.value })\n        onChangeServerSearchInput(e)\n    }\n\n    const serverSearchInput = store.serverSearchInput\n    const searchInput = store.searchInput\n\n    return {\n        store,\n        serverSearchInput,\n        onChange,\n        onChangeServerSearchInput,\n        searchInput,\n    }\n}\n","import React, { useEffect } from 'react'\nimport { type IGoalStatus } from '@/modules/goals/shared-service/types'\nimport { useFetchGoals } from '@/modules/goals/shared-service/fetch-goals/useFetchGoals'\nimport { useInView } from 'react-intersection-observer'\nimport { TopGoal } from '../../goals-dashboard/components/TopGoal'\nimport { filteredGoalsFabric } from '@/modules/goals/helpers/filteredGoalsFabric'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { getMonthNumber } from '@/helpers/getMonthNumber.helper'\nimport { useGoalsFilters } from '../stores/useGoalsFilters.store'\nimport { IsLoading } from '@/components/loading/IsLoading'\n\nexport const GoalsCards: React.FC<{ queryFilter: IGoalStatus }> = ({ queryFilter }) => {\n    const { serverSearchInput } = useGoalsFilters()\n    const { isLoading, goals, fetchNextPage, hasNextPage } = useFetchGoals({\n        queryFilter,\n        // very important to set this limit also for invalidation\n        limit: 20,\n        serverSearchInput,\n    })\n\n    const { ref, inView } = useInView()\n\n    useEffect(() => {\n        inView && hasNextPage && fetchNextPage()\n    }, [inView, hasNextPage])\n\n    const { filteredGoals, timeFrame } = filteredGoalsFabric(goals)\n\n    return (\n        <div className='animate-opacity-3 mx-auto flex w-full flex-col gap-5'>\n            {timeFrame.map((tp) => {\n                const renderGoals = filteredGoals(tp)\n                return renderGoals.length ? (\n                    <React.Fragment key={tp}>\n                        <div>{tp && <FormLabel title={tp} />}</div>\n                        {tp && (\n                            <div className='bg-global-2-bg-plasma animate-opacity-5 relative'>\n                                <img\n                                    loading='lazy'\n                                    title={tp}\n                                    src={`/img/seasons/${getMonthNumber(tp.split(' ')[1])}.png`}\n                                    className='rounded-md animate-opacity-5 z-1 z-10 flex w-full items-center justify-center'\n                                />\n                            </div>\n                        )}\n                        <div className='flex flex-col gap-5'>\n                            {renderGoals.map((goal) => {\n                                return (\n                                    <TopGoal\n                                        zIndex={2000}\n                                        key={goal.id}\n                                        goal={goal}\n                                        className='mx-auto min-h-[60px] !w-full !flex-[100%]'\n                                    />\n                                )\n                            })}\n                        </div>\n                    </React.Fragment>\n                ) : null\n            })}\n\n            <div ref={ref} className='flex relative w-full min-h-[100px] justify-center'>\n                <IsLoading isLoading={isLoading} />\n            </div>\n        </div>\n    )\n}\n","import { IconNew } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useGoalEditor$ } from '../../goal-editor-dialog/stores/goal-editor-store/useGoalEditor.store'\nimport { goalEditorMode } from '../../goal-editor-dialog/stores/goal-editor-store/types'\n\nexport const AddGoal = () => {\n    const { setStore: setState } = useGoalEditor$()\n\n    const addGoal = () => {\n        setState({ goalEditorMode: goalEditorMode.new, goalId: null, open: true })\n    }\n\n    return (\n        <div className='opacity-70'>\n            <StyledButton startIcon={<IconNew width={24} height={24} />} onClick={addGoal} className='' variant='text'>\n                Add goal\n            </StyledButton>\n        </div>\n    )\n}\n","import { useLocation } from 'react-router-dom'\nimport { isExpiredGoalStatus, isFilterStateRitualized } from '@/modules/goals/helpers/goalsGuards'\nimport { isStatusActive, isStatusAll, isStatusCompleted, isStatusDeleted, isStatusFavorite } from '@/services/guards'\nimport { type IArtifactStatus } from '@/services/types'\n\nexport const useGetGoalsParamsFilter = () => {\n    const location = useLocation()\n    const paramFilter: IArtifactStatus = location.state?.filter\n\n    const isActive = isStatusActive(paramFilter)\n    const isExpired = isExpiredGoalStatus(paramFilter)\n    const isRitualized = isFilterStateRitualized(paramFilter)\n    const isFavorite = isStatusFavorite(paramFilter)\n    const isCompleted = isStatusCompleted(paramFilter)\n    const isDeleted = isStatusDeleted(paramFilter)\n    const isAll = isStatusAll(paramFilter)\n\n    return { paramFilter, isExpired, isActive, isRitualized, isFavorite, isCompleted, isDeleted, isAll }\n}\n","import { IconDeleteTemp, IconFavorite, IconRitual } from '@/assets/icons'\nimport { useGetGoalsParamsFilter } from '../../../shared-hooks/useGetGoalsParamsFilter'\nimport { IconExpired } from '@/assets/icons/IconExpired'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { IconCompleted } from '@/assets/icons/IconCompleted'\nimport { IconAll } from '@/assets/icons/IconAll'\n\nexport const ActiveFilterIcon: React.FC = () => {\n    const { isExpired, isFavorite, isDeleted, isCompleted, isRitualized, isAll } = useGetGoalsParamsFilter()\n\n    let icon = <IconFocus width={24} height={24} className='min-h-[24px] min-w-[24px]' />\n    if (isAll) icon = <IconAll width={24} height={24} className='min-h-[24px] min-w-[24px] text-sky-400' />\n    if (isExpired) icon = <IconExpired width={24} height={24} className='min-h-[24px] min-w-[24px] text-amber-600' />\n    if (isRitualized) icon = <IconRitual width={24} height={24} className='min-h-[24px] min-w-[24px] text-teal-600' />\n    if (isFavorite) icon = <IconFavorite width={24} height={24} className='min-h-[24px] min-w-[24px] text-rose-600' />\n    if (isCompleted)\n        icon = <IconCompleted width={24} height={24} className='min-h-[24px] min-w-[24px] text-violet-600' />\n    if (isDeleted) icon = <IconDeleteTemp width={24} height={24} className='min-h-[24px] min-w-[24px] text-slate-600' />\n    return icon\n}\n","import { observer } from 'mobx-react-lite'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { ActiveFilterIcon } from './ActiveFilterIcon'\nimport { useGetGoalsParamsFilter } from '../../../shared-hooks/useGetGoalsParamsFilter'\nimport { cn } from '@/helpers/cn'\n\nexport const GoalsFiltersSelectButton: React.FC = observer(() => {\n    const { isExpired, isFavorite, isDeleted, isCompleted, isRitualized, isAll } = useGetGoalsParamsFilter()\n    return (\n        <StyledButton\n            startIcon={<ActiveFilterIcon />}\n            // onClick={ }\n            className={cn(\n                '!border-blue-600 hover:!bg-blue-600/20',\n                isAll && '!border-sky-400/20 hover:!bg-sky-400/20',\n                isExpired && '!border-amber-500/20 hover:!bg-amber-500/20',\n                isFavorite && '!border-rose-500/20 hover:!bg-rose-500/20',\n                isRitualized && '!border-teal-500/20 hover:!bg-teal-500/20',\n                isCompleted && '!border-violet-500/20 hover:!bg-violet-500/20',\n                isDeleted && '!border-slate-500/20 hover:!bg-slate-500/20',\n            )}\n            variant='outlined'\n        />\n    )\n})\n","import { observer } from 'mobx-react-lite'\n\nimport { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { useState } from 'react'\nimport { IconDeleteTemp, IconFavorite, IconRitual } from '@/assets/icons'\nimport { GoalsFiltersSelectButton } from './GoalsFiltersSelectButton'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useNavigate } from 'react-router-dom'\nimport { setGoalsFilterParam } from '@/modules/goals/helpers/goalsFilterParamLocalForage'\nimport { IconExpired } from '@/assets/icons/IconExpired'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { IconCompleted } from '@/assets/icons/IconCompleted'\nimport { type IGoalStatus } from '@/modules/goals/shared-service'\nimport { artifactStatus } from '@/services/types'\nimport { IconAll } from '@/assets/icons/IconAll'\n\nexport const GoalsFilterSelect: React.FC = observer(() => {\n    const [open, setOpen] = useState(false)\n    const navigate = useNavigate()\n\n    const onClose = (filter: IGoalStatus) => {\n        setGoalsFilterParam(filter)\n        navigate({ pathname: '/goals/filtered-goals', search: `?filter=${filter}` }, { state: { filter } })\n        setOpen(false)\n    }\n\n    return (\n        <XDropdown\n            onOpenChange={(x) => {\n                setOpen(x)\n            }}\n            trigger={['hover']}\n            open={open}\n            dropdownRender={() => <DropdownRender onClose={onClose} />}\n            placement='bottomRight'\n            overlayClassName='!z-[55]'\n        >\n            <div>\n                <GoalsFiltersSelectButton />\n            </div>\n        </XDropdown>\n    )\n})\n\nconst DropdownRender: React.FC<{ onClose: (filter: IGoalStatus) => void }> = observer(({ onClose }) => {\n    return (\n        <XMenuDropdown>\n            <XMenuItem\n                onClick={() => {\n                    onClose('active')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFocus className='text-blue-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-blue-500'>Active</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('favorite')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFavorite className='text-rose-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-rose-500'>Favorite</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('ritual')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconRitual className='text-teal-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-teal-500'>Ritualized</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('expired')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconExpired className='text-amber-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-amber-500'>Expired</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('completed')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconCompleted className='text-violet-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-violet-500'>Completed</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('deleted')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconDeleteTemp className='text-slate-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-slate-500'>Deleted</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose(artifactStatus.all)\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconAll className='text-sky-400' width={26} height={26} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-sky-400'>All</span>\n                </StyledButton>\n            </XMenuItem>\n        </XMenuDropdown>\n    )\n})\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { IconSearch } from '@/assets/icons/IconSearch'\nimport { useEffect } from 'react'\nimport { useGoalsFilters } from '../stores/useGoalsFilters.store'\n\nexport const SearchGoalsInput = () => {\n    const { store, onChange, onChangeServerSearchInput } = useGoalsFilters()\n\n    useEffect(() => {\n        return () => {\n            onChangeServerSearchInput.cancel()\n        }\n    }, [])\n\n    return (\n        <XInput\n            type='text'\n            autoFocus={false}\n            value={store.searchInput}\n            onChange={onChange}\n            startIcon={<IconSearch className='text-slate-500/50' width={20} height={20} />}\n            placeholder='Search'\n            width='!max-w-[600px] !w-full'\n        />\n    )\n}\n","import { AddGoal } from './AddGoal'\nimport { GoalsFilterSelect } from './GoalsFilterSelect'\nimport { SearchGoalsInput } from './SearchGoalsInput'\n\nexport const GoalsHeader: React.FC = () => {\n    return (\n        <div className='flex w-full mx-auto gap-8'>\n            <div className='flex flex-col w-full gap-4'>\n                <AddGoal />\n                <div className='flex w-full items-center justify-end gap-2'>\n                    <SearchGoalsInput />\n                    <div className='flex gap-2 w-[108px]'>\n                        <GoalsFilterSelect />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import { Suspense, lazy } from 'react'\nimport { ModuleWrapper } from '@/components/ModuleWrapper'\nimport { useLocation } from 'react-router-dom'\nimport { GoalsCards } from './components/GoalsCards'\nimport { type IGoalStatus } from '@/modules/goals/shared-service/types'\nimport { GoalsHeader } from './components/GoalsHeader'\nconst GoalEditorDialog = lazy(() => import('@/modules/goals/components/goal-editor-dialog/GoalEditorDialog'))\n\nexport const GoalsByFilterIndex: React.FC = () => {\n    const location = useLocation()\n    const queryFilter: IGoalStatus = location.state?.filter\n    return (\n        <ModuleWrapper>\n            <Suspense fallback={null}>\n                <GoalEditorDialog />\n            </Suspense>\n            <div className='flex flex-col gap-10 w-full max-w-[600px] mx-auto relative'>\n                <GoalsHeader />\n                <GoalsCards key={queryFilter} queryFilter={queryFilter} />\n            </div>\n        </ModuleWrapper>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { getGoalsFilterParam } from '../helpers/goalsFilterParamLocalForage'\n\nexport const useSetGoalsParamsFilter = () => {\n    const [filter, setFilter] = useState<string | null>(null)\n\n    useEffect(() => {\n        ;(async () => {\n            const data = await getGoalsFilterParam()\n            setFilter(data || 'active')\n        })()\n    }, [])\n    return { filter }\n}\n","import { Navigate, Route, Routes } from 'react-router-dom'\nimport { GoalsByFilterIndex } from './GoalsByFilterIndex'\nimport { useSetGoalsParamsFilter } from '../../shared-hooks/useSetGoalsParamsFilter'\n\nconst GoalsCmsIndex: React.FC = () => {\n    const { filter } = useSetGoalsParamsFilter()\n    if (!filter) return null\n\n    return (\n        <Routes>\n            <Route\n                path={'/'}\n                element={<Navigate to={`/goals/filtered-goals?filter=${filter}`} state={{ filter: `${filter}` }} />}\n            />\n            <Route path='filtered-goals' element={<GoalsByFilterIndex />} />\n        </Routes>\n    )\n}\n\nexport default GoalsCmsIndex\n"],"file":"assets/GoalsCmsIndex-DZZrWgDY.js"}