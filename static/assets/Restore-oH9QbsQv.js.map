{"version":3,"file":"Restore-oH9QbsQv.js","sources":["../../src/modules/auth/restore/services/types.ts","../../src/modules/auth/restore/services/server_restoreUser.ts","../../src/modules/auth/restore/hooks/useRestoreOnSubmit.ts","../../src/modules/auth/restore/hooks/useRestoreOnValidate.ts","../../src/modules/auth/restore/hooks/useRestoreInitialValues.ts","../../src/modules/auth/restore/Restore.tsx"],"sourcesContent":["import { z } from 'zod'\n\nexport const userRestoreSchema = z.object({\n    email: z.string().email(),\n})\n\nexport type IUserRestoreSchema = z.infer<typeof userRestoreSchema>\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport ky from 'ky'\nimport { type IUserRestoreSchema } from './types'\n\nexport const server_restoreUser = async (props: { formData: IUserRestoreSchema }) => {\n    const endpoint = import.meta.env['VITE_NODE_HEROKU_ORIGIN']\n    const xapikey = import.meta.env['VITE_X_API_KEY']\n\n    try {\n        return await ky\n            .post(`${endpoint}restore`, {\n                credentials: 'include', //\n                json: props.formData,\n                method: 'POST',\n                headers: {\n                    'x-api-key': xapikey,\n                    'Content-Type': 'application/json',\n                },\n            })\n            .json<Promise<{ message: string } | undefined>>()\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type IUserRestoreSchema } from '../services/types'\nimport { useNavigate } from 'react-router-dom'\nimport { APP_ROUTES_ENUM } from '@/services/enums'\nimport { useMutation } from '@tanstack/react-query'\nimport { notifySuccess } from '@/helpers/processMessage'\nimport { server_restoreUser } from '../services/server_restoreUser'\n\nexport const useRestoreOnSubmit = () => {\n    const navigate = useNavigate()\n\n    const mutation = useMutation({\n        mutationFn: ({ formData }: { formData: IUserRestoreSchema }) => server_restoreUser({ formData }),\n    })\n\n    const onSubmit = (values: IUserRestoreSchema, formikHelpers: FormikHelpers<IUserRestoreSchema>) => {\n        mutation.mutate(\n            { formData: values },\n            {\n                onError: (/* error */) => {\n                    // processError(error.message)\n                },\n                onSuccess: () => {\n                    formikHelpers.resetForm()\n                    notifySuccess(`\n                        A link has been sent to your email.\n                        Please check your inbox and click on the link to continue the process.\n                        Thank you!`)\n                    navigate(`/${APP_ROUTES_ENUM.LOGIN}`)\n                },\n                onSettled: () => {\n                    formikHelpers.setSubmitting(false)\n                },\n            },\n        )\n    }\n\n    return { onSubmit }\n}\n","import { type IUserRestoreSchema, userRestoreSchema } from '../services/types'\n\nexport const useRestoreOnValidate = () => {\n    const validate = (values: IUserRestoreSchema) => {\n        const result = userRestoreSchema.safeParse(values)\n        const errors: Partial<IUserRestoreSchema> = {}\n        if (!result.success) {\n            for (const issue of result.error.issues) {\n                errors[issue.path[0] as keyof IUserRestoreSchema] = issue.message\n            }\n        }\n\n        if (!values.email.length) {\n            errors.email = 'Required field'\n        }\n\n        return errors\n    }\n\n    return { validate }\n}\n","import { type IUserRestoreSchema } from '../services/types'\n\nexport const useRestoreInitialValues = (): { initialValues: IUserRestoreSchema } => {\n    return { initialValues: { email: '' } }\n}\n","import { AlreadyHaveAccount } from '../shared-components/AlreadyHaveAccount'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { Formik, Form } from 'formik'\nimport { type IUserRestoreSchema } from './services/types'\nimport { AuthEmailInput } from '../shared-components/AuthEmailInput'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useRestoreOnSubmit } from './hooks/useRestoreOnSubmit'\nimport { useRestoreOnValidate } from './hooks/useRestoreOnValidate'\nimport { useRestoreInitialValues } from './hooks/useRestoreInitialValues'\n\nconst Register: React.FC = () => {\n    const { onSubmit } = useRestoreOnSubmit()\n    const { validate } = useRestoreOnValidate()\n    const { initialValues } = useRestoreInitialValues()\n\n    return (\n        <div className='flex flex-col gap-10 mt-10 items-center'>\n            <Formik<IUserRestoreSchema> initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n                {({ isSubmitting }) => (\n                    <Form className='flex flex-col gap-5'>\n                        <AuthEmailInput />\n                        <StyledButton\n                            className='w-full'\n                            type='submit'\n                            disabled={isSubmitting}\n                            startIcon={isSubmitting && <IconInfiniteLoading className='text-slate-500 w-5 h-5' />}\n                        >\n                            Restore\n                        </StyledButton>\n                        <AlreadyHaveAccount />\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n\nexport default Register\n"],"names":["userRestoreSchema","z","object","email","string","server_restoreUser","props","endpoint","import","xapikey","ky","post","credentials","json","formData","method","headers","e","resolveError","useRestoreOnSubmit","navigate","useNavigate","mutation","useMutation","mutationFn","onSubmit","values","formikHelpers","mutate","onError","onSuccess","resetForm","notifySuccess","APP_ROUTES_ENUM","LOGIN","onSettled","setSubmitting","useRestoreOnValidate","validate","result","safeParse","errors","success","issue","error","issues","path","message","length","useRestoreInitialValues","initialValues","Register","jsx","Formik","isSubmitting","jsxs","Form","AuthEmailInput","StyledButton","IconInfiniteLoading","AlreadyHaveAccount"],"mappings":"gdAEaA,MAAAA,EAAoBC,EAAEC,OAAO,CACtCC,MAAOF,EAAEG,OAAO,EAAED,MAAM,CAC5B,CAAC,ECAYE,EAAqB,MAAOC,GAA4C,CAC3EC,MAAAA,EAAWC,8BACXC,EAAUD,YAEZ,GAAA,CACA,OAAO,MAAME,EACRC,KAAM,GAAEJ,CAAS,UAAU,CACxBK,YAAa,UACbC,KAAMP,EAAMQ,SACZC,OAAQ,OACRC,QAAS,CACL,YAAaP,EACb,eAAgB,kBAAA,CAEvB,CAAA,EACAI,KAA+C,QAC/CI,EAAG,CACD,OAAA,MAAMC,EAAaD,CAAC,CAAA,CAEnC,ECfaE,EAAqBA,IAAM,CACpC,MAAMC,EAAWC,EAAY,EAEvBC,EAAWC,EAAY,CACzBC,WAAYA,CAAC,CAAEV,SAAAA,KAAiDT,EAAmB,CAAES,SAAAA,CAAU,CAAA,CAAA,CAClG,EAwBM,MAAA,CAAEW,SAtBQA,CAACC,EAA4BC,IAAqD,CAC/FL,EAASM,OACL,CAAEd,SAAUY,CAAAA,EACZ,CACIG,QAASA,IAAiB,CACtB,EAEJC,UAAWA,IAAM,CACbH,EAAcI,UAAU,EACTC,EAAA;AAAA;AAAA;AAAA,mCAGA,EACLZ,EAAA,IAAGa,EAAgBC,KAAM,EAAC,CACxC,EACAC,UAAWA,IAAM,CACbR,EAAcS,cAAc,EAAK,CAAA,CACrC,CAER,CACJ,CAEkB,CACtB,ECpCaC,EAAuBA,KAiBzB,CAAEC,SAhBSZ,GAA+B,CACvCa,MAAAA,EAASvC,EAAkBwC,UAAUd,CAAM,EAC3Ce,EAAsC,CAAC,EACzC,GAAA,CAACF,EAAOG,QACGC,UAAAA,KAASJ,EAAOK,MAAMC,OAC7BJ,EAAOE,EAAMG,KAAK,CAAC,CAA6B,EAAIH,EAAMI,QAI9D,OAACrB,EAAOvB,MAAM6C,SACdP,EAAOtC,MAAQ,kBAGZsC,CACX,CAEkB,GCjBTQ,EAA0BA,KAC5B,CAAEC,cAAe,CAAE/C,MAAO,EAAA,CAAK,GCOpCgD,EAAqBA,IAAM,CACvB,KAAA,CAAE1B,SAAAA,GAAaN,EAAmB,EAClC,CAAEmB,SAAAA,GAAaD,EAAqB,EACpC,CAAEa,cAAAA,GAAkBD,EAAwB,EAG9C,OAAAG,EAAA,IAAC,OAAI,UAAU,0CACX,eAACC,EAA2B,CAAA,cAAAH,EAA8B,SAAAZ,EAAoB,SAAAb,EACzE,SAAC,CAAA,CAAE6B,aAAAA,CACA,IAAAC,EAAA,KAACC,EAAK,CAAA,UAAU,sBACZ,SAAA,CAAAJ,EAAA,IAACK,EAAc,EAAA,EACdL,MAAAM,EAAA,CACG,UAAU,SACV,KAAK,SACL,SAAUJ,EACV,UAAWA,GAAiBF,EAAA,IAAAO,EAAA,CAAoB,UAAU,wBAAA,GAA4B,SAG1F,UAAA,QACCC,EAAkB,CAAA,CAAA,CAAA,CACvB,CAAA,CAER,CAAA,EACJ,CAER"}