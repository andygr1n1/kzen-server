{"version":3,"mappings":"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","names":["Stories$","types","model","searchInput","serverSearchInput","status","optional","enumeration","artifactStatusSchema","options","actions","self","onChangeField","field","value","onChangeSSI","onChangeInput","storeContext","createContext","stories$","create","useStories$","store","useContext","Error","Stories$Provider","children","StoryEditorDialog$","open","storyId","maybe","string","onClose","undefined","onOpen","props","storyEditorDialog$","useStoryEditorDialog$","StoryEditorDialog$Provider","StoryEditor","lazy","__vitePreload","StoryEditorTitle","StoryEditorDialog","observer","XModal","jsx","Suspense","AddStory","StyledButton","IconNew","SearchStoriesInput","onChangeServerSearchInput","useMemo","debounce","e","target","useEffect","cancel","XInput","IconSearch","useGetStoriesParamsFilter","paramFilter","location","useLocation","state","filter","isActive","isStatusActive","isFavorite","isStatusFavorite","isDeleted","isStatusDeleted","isArchived","isStatusArchived","isAll","isStatusAll","ActiveFilterIcon","icon","IconFocus","IconAll","IconFavorite","IconArchive","IconDeleteTemp","FiltersSelectButton","cn","StoriesFilterSelect","setOpen","useState","navigate","useNavigate","searchParams","URLSearchParams","search","set","pathname","toString","XDropdown","x","DropdownRender","XMenuDropdown","XMenuItem","artifactStatus","all","StoriesHeader","jsxs","z","object","id","uuid","title","img_path","nullable","img_src","img_src_buffer","img_path_delete","storySchema","created_at","updated_at","deleted_at","archived","boolean","is_favorite","StoryStatus","story","IconHeart","storiesService","instance","fetchStories","params","fetchStory","storyMakerService","useFetchStoryInfo","useFetchStoryMessages","useInvalidateStories","queryClient","useQueryClient","onSuccess","invalidateQueries","predicate","query","queryKey","storyResponseFr","graphql","mutation_updateStoryIsArchived","mutation","generateClient","request","then","res","parse","update_stories_by_pk","resolveError","useUpdateStoryIsArchived","useMutation","mutationFn","toggleArchived","mutate","StoryIsArchived","label","Fragment","XTooltip","mutation_updateStoryIsFavorite","client","useUpdateStoryIsFavorite","toggleFavorite","StoryIsFavorite","mutation_updateStoryDeletedAt","deletedAt","useUpdateStoryDeletedAt","updateStoryDeletedAt","StoryIsDeleted","formatDateWithTimezone","useEditStory","editStory","EditStory","IconEdit","StoryContextMenu","NoImage","className","iconClassName","IconLandscape","Story","isMobile","popoverState","setPopoverState","useTogglePopoverState","format","Date","updated_by_user","name","query_activeStories","limit","userId","offset","result","stories","query_allStories","query_favoriteStories","query_archivedStories","query_deletedStories","useFetchStories","queryFilter","active","useUser$","data","fetchNextPage","hasNextPage","isFetching","isFetchingNextPage","isLoading","useInfiniteQuery","queryFn","pageParam","nextCursor","favorite","deleted","initialPageParam","getNextPageParam","lastPage","pages","last","length","staleTime","refetchOnWindowFocus","refetchOnMount","enabled","uniqWith","compact","flatten","map","page","a","b","filteredStoriesFabric","timeFrame","uniq","convertStringDate","filtered","StoriesList","useWindowMatchMedia","ref","inView","useInView","XSkeleton","tp","renderArtifacts","React","FormLabel","art","StoriesByFilterIndex","ModuleWrapper","StoryMakerIndex","n","StoriesIndex","Routes","Route","Navigate"],"ignoreList":[],"sources":["../../src/modules/stories/components/stories-cms/mst/stores/Stories.store.ts","../../src/modules/stories/components/stories-cms/mst/provider.tsx","../../src/modules/stories/components/story-editor-dialog/mst/stores/StoryEditorDialog.store.ts","../../src/modules/stories/components/story-editor-dialog/mst/provider.tsx","../../src/modules/stories/components/story-editor-dialog/StoryEditorDialog.tsx","../../src/modules/stories/components/stories-cms/components/stories-header/AddStory.tsx","../../src/modules/stories/components/stories-cms/components/stories-header/SearchStoriesInput.tsx","../../src/modules/stories/components/stories-cms/hooks/useGetStoriesParamsFilter.ts","../../src/modules/stories/components/stories-cms/components/stories-header/ActiveFilterIcon.tsx","../../src/modules/stories/components/stories-cms/components/stories-header/FiltersSelectButton.tsx","../../src/modules/stories/components/stories-cms/components/stories-header/StoriesFilterSelect.tsx","../../src/modules/stories/components/stories-cms/components/stories-header/StoriesHeader.tsx","../../src/modules/stories/services/types.ts","../../src/modules/stories/components/stories-cms/components/story/components/StoryStatus.tsx","../../src/modules/stories/services/storiesService.ts","../../src/modules/stories/components/story-maker/service/storyMakerService.ts","../../src/modules/stories/components/story-editor-dialog/hooks/useInvalidateStories.ts","../../src/modules/stories/services/fragments/storyResponseFr.ts","../../src/modules/stories/services/insert-story/mutation_updateStoryIsArchived.ts","../../src/modules/stories/components/stories-cms/components/story/components/story-is-archived/useUpdateStoryIsArchived.ts","../../src/modules/stories/components/stories-cms/components/story/components/story-is-archived/StoryIsArchived.tsx","../../src/modules/stories/services/insert-story/mutation_updateStoryIsFavorite.ts","../../src/modules/stories/components/stories-cms/components/story/components/story-is-favorite/useUpdateStoryIsFavorite.ts","../../src/modules/stories/components/stories-cms/components/story/components/story-is-favorite/StoryIsFavorite.tsx","../../src/modules/stories/services/insert-story/mutation_updateStoryDeletedAt.ts","../../src/modules/stories/components/stories-cms/components/story/components/story-is-deleted/useUpdateStoryDeletedAt.ts","../../src/modules/stories/components/stories-cms/components/story/components/story-is-deleted/StoryIsDeleted.tsx","../../src/modules/stories/components/stories-cms/components/story/components/edit-story/useEditStory.ts","../../src/modules/stories/components/stories-cms/components/story/components/edit-story/EditStory.tsx","../../src/modules/stories/components/stories-cms/components/story/StoryContextMenu.tsx","../../src/components/NoImage.tsx","../../src/modules/stories/components/stories-cms/components/story/Story.tsx","../../src/modules/stories/services/fetch-stories/query_activeStories.ts","../../src/modules/stories/services/fetch-stories/query_allStories.ts","../../src/modules/stories/services/fetch-stories/query_favoriteStories.ts","../../src/modules/stories/services/fetch-stories/query_archivedStories.ts","../../src/modules/stories/services/fetch-stories/query_deletedStories.ts","../../src/modules/stories/services/fetch-stories/useFetchStories.ts","../../src/modules/stories/helpers/filteredStoriesFabric.ts","../../src/modules/stories/components/stories-cms/components/StoriesList.tsx","../../src/modules/stories/components/stories-cms/StoriesByFilterIndex.tsx","../../src/modules/stories/StoriesIndex.tsx"],"sourcesContent":["import { artifactStatusSchema } from '@/services/types'\nimport { type Instance, types } from 'mobx-state-tree'\n\nexport const Stories$ = types\n    .model('Stories$', {\n        searchInput: '',\n        serverSearchInput: '',\n        status: types.optional(types.enumeration('ArtifactStatus', artifactStatusSchema.options), 'active'),\n    })\n    .actions((self) => ({\n        onChangeField<Key extends keyof typeof self>(field: Key, value: (typeof self)[Key]) {\n            self[field] = value\n        },\n        onChangeSSI({ value }: { value: string }): void {\n            self.searchInput = value\n            self.serverSearchInput = value\n        },\n        onChangeInput({ value }: { value: string }): void {\n            self.searchInput = value\n        },\n    }))\n\nexport interface IStories$ extends Instance<typeof Stories$> {}\n","import { type ReactNode, createContext, useContext } from 'react'\nimport { type IStories$, Stories$ } from './stores/Stories.store'\nconst storeContext = createContext<IStories$ | null>(null)\n\nexport const stories$ = Stories$.create({})\n\nexport const useStories$ = (): IStories$ => {\n    const store = useContext(storeContext)\n    if (!store) {\n        throw new Error('useStories$ shall be used within StoreProvider')\n    }\n\n    return store\n}\n\nexport const Stories$Provider = ({ children, store }: { children: ReactNode; store: IStories$ }) => {\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n","import { type Instance, types } from 'mobx-state-tree'\n\nexport const StoryEditorDialog$ = types\n    .model('StoryEditorDialog$', {\n        open: false,\n        /* storyId === edit mode */\n        storyId: types.maybe(types.string),\n    })\n    .actions((self) => ({\n        onChangeField<Key extends keyof typeof self>(field: Key, value: (typeof self)[Key]) {\n            self[field] = value\n        },\n        onClose() {\n            self.open = false\n            self.storyId = undefined\n        },\n        onOpen(props?: { storyId?: string }) {\n            self.open = true\n            self.storyId = props?.storyId\n        },\n    }))\n\nexport interface IStoryEditorDialog$ extends Instance<typeof StoryEditorDialog$> {}\n","import { type ReactNode, createContext, useContext } from 'react'\nimport { type IStoryEditorDialog$, StoryEditorDialog$ } from './stores/StoryEditorDialog.store'\nconst storeContext = createContext<IStoryEditorDialog$ | null>(null)\n\nexport const storyEditorDialog$ = StoryEditorDialog$.create({})\n\nexport const useStoryEditorDialog$ = (): IStoryEditorDialog$ => {\n    const store = useContext(storeContext)\n    if (!store) {\n        throw new Error('useStoryEditorDialog$ shall be used within StoreProvider')\n    }\n\n    return store\n}\n\nexport const StoryEditorDialog$Provider = ({\n    children,\n    store,\n}: {\n    children: ReactNode\n    store: IStoryEditorDialog$\n}) => {\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n","import { XModal } from '@/components-x/x-modal/XModal'\nimport { Suspense, lazy } from 'react'\nimport { useStoryEditorDialog$ } from './mst/provider'\nimport { observer } from 'mobx-react-lite'\nconst StoryEditor = lazy(() => import('./components/StoryEditor'))\nconst StoryEditorTitle = lazy(() => import('./components/StoryEditorTitle'))\n\nconst StoryEditorDialog = observer(() => {\n    const { open, onClose } = useStoryEditorDialog$()\n\n    return (\n        <XModal\n            open={open}\n            fullHeight\n            onCancel={() => {\n                onClose()\n            }}\n            title={\n                <Suspense fallback={null}>\n                    <StoryEditorTitle />\n                </Suspense>\n            }\n        >\n            {open && (\n                <Suspense fallback={null}>\n                    <StoryEditor />\n                </Suspense>\n            )}\n        </XModal>\n    )\n})\nexport default StoryEditorDialog\n","import { IconNew } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useStoryEditorDialog$ } from '../../../story-editor-dialog/mst/provider'\n\nexport const AddStory: React.FC = () => {\n    const { onChangeField } = useStoryEditorDialog$()\n\n    return (\n        <div className='opacity-70'>\n            <StyledButton\n                startIcon={<IconNew width={24} height={24} />}\n                onClick={() => onChangeField('open', true)}\n                variant='text'\n            >\n                Add story\n            </StyledButton>\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { IconSearch } from '@/assets/icons/IconSearch'\nimport { useEffect, useMemo } from 'react'\nimport { debounce } from 'lodash-es'\nimport { observer } from 'mobx-react-lite'\nimport { useStories$ } from '../../mst/provider'\n\nexport const SearchStoriesInput = observer(() => {\n    const { onChangeSSI, searchInput, onChangeInput } = useStories$()\n\n    const onChangeServerSearchInput = useMemo(() => {\n        return debounce((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            onChangeSSI({ value: e.target.value })\n        }, 1000)\n    }, [])\n\n    useEffect(() => {\n        return () => {\n            onChangeServerSearchInput.cancel()\n        }\n    }, [])\n\n    return (\n        <XInput\n            type='text'\n            autoFocus={false}\n            value={searchInput}\n            onChange={(e) => {\n                onChangeInput({ value: e.target.value })\n                onChangeServerSearchInput(e)\n            }}\n            startIcon={<IconSearch className='text-slate-500/50' width={20} height={20} />}\n            placeholder='Search'\n            width='!max-w-[600px] !w-full'\n        />\n    )\n})\n","import { useLocation } from 'react-router-dom'\n\nimport { isStatusActive, isStatusAll, isStatusArchived, isStatusDeleted, isStatusFavorite } from '@/services/guards'\nimport { type IArtifactStatus } from '@/services/types'\n\nexport const useGetStoriesParamsFilter = () => {\n    const location = useLocation()\n    const paramFilter: IArtifactStatus = location.state?.filter\n\n    const isActive = isStatusActive(paramFilter)\n    const isFavorite = isStatusFavorite(paramFilter)\n    const isDeleted = isStatusDeleted(paramFilter)\n    const isArchived = isStatusArchived(paramFilter)\n    const isAll = isStatusAll(paramFilter)\n\n    return { paramFilter, isArchived, isActive, isFavorite, isDeleted, isAll }\n}\n","import { IconDeleteTemp, IconFavorite } from '@/assets/icons'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { IconAll } from '@/assets/icons/IconAll'\nimport { useGetStoriesParamsFilter } from '../../hooks/useGetStoriesParamsFilter'\n\nexport const ActiveFilterIcon: React.FC = () => {\n    const { isArchived, isFavorite, isDeleted, isAll } = useGetStoriesParamsFilter()\n\n    let icon = <IconFocus width={24} height={24} className='min-h-[24px] min-w-[24px]' />\n\n    if (isAll) icon = <IconAll width={24} height={24} className='min-h-[24px] min-w-[24px] text-sky-400' />\n    if (isFavorite) icon = <IconFavorite width={24} height={24} className='min-h-[24px] min-w-[24px] text-rose-600' />\n    if (isArchived) icon = <IconArchive width={24} height={24} className='min-h-[24px] min-w-[24px] text-violet-600' />\n    if (isDeleted) icon = <IconDeleteTemp width={24} height={24} className='min-h-[24px] min-w-[24px] text-slate-600' />\n    return icon\n}\n","import { observer } from 'mobx-react-lite'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { ActiveFilterIcon } from './ActiveFilterIcon'\nimport { cn } from '@/helpers/cn'\nimport { useGetStoriesParamsFilter } from '../../hooks/useGetStoriesParamsFilter'\n\nexport const FiltersSelectButton: React.FC = observer(() => {\n    const { isFavorite, isDeleted, isArchived, isAll } = useGetStoriesParamsFilter()\n    return (\n        <StyledButton\n            startIcon={<ActiveFilterIcon />}\n            // onClick={ }\n            className={cn(\n                '!border-blue-600 hover:!bg-blue-600/20',\n                isAll && '!border-sky-400/20 hover:!bg-sky-400/20',\n                isFavorite && '!border-rose-500/20 hover:!bg-rose-500/20',\n                isArchived && '!border-violet-500/20 hover:!bg-violet-500/20',\n                isDeleted && '!border-slate-500/20 hover:!bg-slate-500/20',\n            )}\n            variant='outlined'\n        />\n    )\n})\n","import { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { useState } from 'react'\nimport { IconDeleteTemp, IconFavorite } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { type INoteStatus } from '@/modules/notes/shared-services/types'\n\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { artifactStatus, type IArtifactStatus } from '@/services/types'\nimport { IconAll } from '@/assets/icons/IconAll'\nimport { FiltersSelectButton } from './FiltersSelectButton'\n\nexport const StoriesFilterSelect = () => {\n    const [open, setOpen] = useState(false)\n    const navigate = useNavigate()\n    const location = useLocation()\n\n    const onClose = (filter: IArtifactStatus) => {\n        const searchParams = new URLSearchParams(location.search)\n        searchParams.set('filter', filter)\n        navigate(\n            { pathname: '/stories/filtered-stories', search: searchParams.toString() },\n            { state: { ...location.state, filter } },\n        )\n    }\n\n    return (\n        <XDropdown\n            onOpenChange={(x) => {\n                setOpen(x)\n            }}\n            trigger={['hover']}\n            open={open}\n            dropdownRender={() => <DropdownRender onClose={onClose} />}\n            placement='bottomRight'\n            overlayClassName='!z-[55]'\n        >\n            <div>\n                <FiltersSelectButton />\n            </div>\n        </XDropdown>\n    )\n}\n\nconst DropdownRender: React.FC<{ onClose: (filter: INoteStatus) => void }> = ({ onClose }) => {\n    return (\n        <XMenuDropdown>\n            <XMenuItem\n                onClick={() => {\n                    onClose('active')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFocus className='text-blue-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-blue-500'>Active</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('favorite')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFavorite className='text-rose-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-rose-500'>Favorite</span>\n                </StyledButton>\n            </XMenuItem>\n\n            <XMenuItem\n                onClick={() => {\n                    onClose('archived')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconArchive className='text-violet-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-violet-500'>Archived</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('deleted')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconDeleteTemp className='text-slate-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-slate-500'>Deleted</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose(artifactStatus.all)\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconAll className='text-sky-400' width={26} height={26} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-sky-400'>All</span>\n                </StyledButton>\n            </XMenuItem>\n        </XMenuDropdown>\n    )\n}\n","import { AddStory } from './AddStory'\nimport { SearchStoriesInput } from './SearchStoriesInput'\nimport { StoriesFilterSelect } from './StoriesFilterSelect'\n\nexport const StoriesHeader: React.FC = () => {\n    return (\n        <div className='flex w-full mx-auto gap-8'>\n            <div className='flex flex-col w-full gap-4'>\n                <div className='flex justify-between items-center'>\n                    <AddStory />\n                </div>\n                <div className='flex w-full items-center justify-end gap-2'>\n                    <SearchStoriesInput />\n                    <StoriesFilterSelect />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import type { ResultOf } from 'gql.tada'\nimport { z } from 'zod'\nimport type { storyResponseFr } from './fragments/storyResponseFr'\nimport type { storyMessageResponseFr } from './fragments/storyMessageResponseFr'\n\nexport const newStorySchema = z.object({\n    id: z.string().uuid(),\n    title: z.string(),\n    img_path: z.string().optional().nullable(),\n    /*  */\n    img_src: z.string().optional(),\n    img_src_buffer: z.string().optional(),\n    img_path_delete: z.string().optional(),\n})\n\nexport type INewStorySchema = z.infer<typeof newStorySchema>\n\nexport const storySchema = z.object({\n    id: z.string().uuid(),\n    title: z.string(),\n    img_path: z.string().nullable(),\n    created_at: z.string(),\n    updated_at: z.string(),\n    deleted_at: z.string().nullable(),\n    archived: z.boolean(),\n    is_favorite: z.boolean(),\n})\n\nexport type IStoryMessage = ResultOf<typeof storyMessageResponseFr>\nexport type IStory = ResultOf<typeof storyResponseFr>\n","import { IconDeleteTemp, IconHeart } from '@/assets/icons'\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { type IStory } from '@/modules/stories/services/types'\n\nexport const StoryStatus: React.FC<{ story: IStory }> = ({ story }) => {\n    return (\n        <div className='flex gap items-center self-end justify-end w-full'>\n            {story.is_favorite && (\n                <StyledButton\n                    className='!pointer-events-none'\n                    size='small'\n                    variant='text'\n                    startIcon={<IconHeart width={24} height={24} className='text-rose-500' />}\n                />\n            )}\n            {story.archived && (\n                <StyledButton\n                    className='!pointer-events-none'\n                    size='small'\n                    variant='text'\n                    startIcon={<IconArchive width={24} height={24} className='text-violet-600' />}\n                />\n            )}\n            {story.deleted_at && (\n                <StyledButton\n                    className='!pointer-events-none'\n                    size='small'\n                    variant='text'\n                    startIcon={<IconDeleteTemp width={24} height={24} className='text-gray-700 ' />}\n                />\n            )}\n        </div>\n    )\n}\n","export const storiesService = {\n    instance: 'storiesService',\n    /*queries*/\n    // fetchAchsKey: (key: string) => [achService.instance, 'fetchAchsKey', key],\n    fetchStories: (params: unknown) => ['storiesService', params],\n    fetchStory: (params: unknown) => ['storiesService', params],\n}\n","export const storyMakerService = {\n    instance: 'storyMakerService',\n    useFetchStoryInfo: (params: unknown) => [storyMakerService.instance, 'useFetchStoryInfo', params?.toString()],\n    useFetchStoryMessages: (params: unknown) => [\n        storyMakerService.instance,\n        'useFetchStoryMessages',\n        params?.toString(),\n    ],\n}\n","import { useQueryClient } from '@tanstack/react-query'\nimport { storiesService } from '@/modules/stories/services/storiesService'\nimport { storyMakerService } from '../../story-maker/service/storyMakerService'\n\nexport const useInvalidateStories = () => {\n    const queryClient = useQueryClient()\n\n    const onSuccess = () => {\n        queryClient.invalidateQueries({\n            predicate: (query) => {\n                const queryKey = query.queryKey\n                return queryKey[0] === storiesService.instance\n            },\n        })\n\n        queryClient.invalidateQueries({\n            predicate: (query) => {\n                const queryKey = query.queryKey\n                return queryKey[0] === storyMakerService.instance && queryKey[1] === 'useFetchStoryInfo'\n            },\n        })\n    }\n\n    return { onSuccess }\n}\n","import { graphql } from '@/api/tada'\n\nexport const storyResponseFr = graphql(`\n    fragment StoryResponseFr on stories @_unmask {\n        id\n        title\n        img_path\n        created_at\n        updated_at\n        updated_by_user {\n            name\n        }\n        deleted_at\n        archived\n        is_favorite\n    }\n`)\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { storyResponseFr } from '../fragments/storyResponseFr'\nimport { storySchema } from '../types'\n\nexport const mutation_updateStoryIsArchived = async ({ id, isArchived }: { id: string; isArchived: boolean }) => {\n    try {\n        const mutation = graphql(\n            `\n                mutation update_story_archived($id: uuid!, $archived: Boolean!) {\n                    update_stories_by_pk(pk_columns: { id: $id }, _set: { archived: $archived }) {\n                        id\n                        ...StoryResponseFr\n                    }\n                }\n            `,\n            [storyResponseFr],\n        )\n\n        const client = await generateClient()\n\n        return await client\n            .request(mutation, { id, archived: isArchived })\n            .then((res) => storySchema.parse(res?.update_stories_by_pk))\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { useInvalidateStories } from '@/modules/stories/components/story-editor-dialog/hooks/useInvalidateStories'\nimport { mutation_updateStoryIsArchived } from '@/modules/stories/services/insert-story/mutation_updateStoryIsArchived'\n\nexport const useUpdateStoryIsArchived = () => {\n    const { onSuccess } = useInvalidateStories()\n\n    const mutation = useMutation({\n        mutationFn: ({ id, isArchived }: { id: string; isArchived: boolean }) =>\n            mutation_updateStoryIsArchived({ id, isArchived }),\n        onSuccess: () => {\n            onSuccess()\n        },\n    })\n\n    const toggleArchived = ({ id, isArchived }: { id: string; isArchived: boolean }) => {\n        mutation.mutate({ id, isArchived })\n    }\n\n    return { toggleArchived }\n}\n","import { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { type ReactNode } from 'react'\nimport { useUpdateStoryIsArchived } from './useUpdateStoryIsArchived'\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { cn } from '@/helpers/cn'\n\nexport const StoryIsArchived: React.FC<{ id: string; isArchived: boolean; label?: ReactNode; onClose: () => void }> = ({\n    id,\n    isArchived,\n    label,\n    onClose,\n}) => {\n    const { toggleArchived } = useUpdateStoryIsArchived()\n\n    return (\n        <>\n            <StyledButton\n                id='toggleArchiveStory'\n                variant={isArchived ? 'contained' : 'text'}\n                size={'small'}\n                onClick={() => {\n                    toggleArchived({ id, isArchived: !isArchived })\n                    onClose()\n                }}\n                className={cn(isArchived && '!bg-violet-600')}\n                startIcon={<IconArchive className='mb-0.5 h-6 w-6 opacity-70 hover:opacity-100' />}\n            >\n                {label}\n            </StyledButton>\n            {!label && <XTooltip anchorSelect='#toggleArchiveStory'>{isArchived ? 'Unarchive' : 'Archive'}</XTooltip>}\n        </>\n    )\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { storyResponseFr } from '../fragments/storyResponseFr'\n\nexport const mutation_updateStoryIsFavorite = async ({ id, isFavorite }: { id: string; isFavorite: boolean }) => {\n    try {\n        const client = await generateClient()\n\n        const mutation = graphql(\n            `\n                mutation update_story_archived($id: uuid!, $isFavorite: Boolean!) {\n                    update_stories_by_pk(pk_columns: { id: $id }, _set: { is_favorite: $isFavorite }) {\n                        id\n                        ...StoryResponseFr\n                    }\n                }\n            `,\n            [storyResponseFr],\n        )\n\n        return await client.request(mutation, { id, isFavorite }).then((res) => res.update_stories_by_pk)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { useInvalidateStories } from '@/modules/stories/components/story-editor-dialog/hooks/useInvalidateStories'\nimport { mutation_updateStoryIsFavorite } from '@/modules/stories/services/insert-story/mutation_updateStoryIsFavorite'\n\nexport const useUpdateStoryIsFavorite = () => {\n    const { onSuccess } = useInvalidateStories()\n\n    const mutation = useMutation({\n        mutationFn: ({ id, isFavorite }: { id: string; isFavorite: boolean }) =>\n            mutation_updateStoryIsFavorite({ id, isFavorite }),\n        onSuccess: () => {\n            onSuccess()\n        },\n    })\n\n    const toggleFavorite = ({ id, isFavorite }: { id: string; isFavorite: boolean }) => {\n        mutation.mutate({ id, isFavorite })\n    }\n\n    return { toggleFavorite }\n}\n","import { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconHeart } from '@/assets/icons/IconHeart'\nimport { type ReactNode } from 'react'\nimport { useUpdateStoryIsFavorite } from './useUpdateStoryIsFavorite'\n\nexport const StoryIsFavorite: React.FC<{ id: string; isFavorite: boolean; label?: ReactNode; onClose: () => void }> = ({\n    id,\n    isFavorite,\n    label,\n    onClose,\n}) => {\n    const { toggleFavorite } = useUpdateStoryIsFavorite()\n\n    return (\n        <>\n            <StyledButton\n                id='toggleFavorite'\n                error={!!isFavorite}\n                variant={isFavorite ? 'contained' : 'text'}\n                size={'small'}\n                onClick={() => {\n                    toggleFavorite({ id, isFavorite: !isFavorite })\n                    onClose()\n                }}\n                startIcon={<IconHeart className='mb-0.5 h-6 w-6 opacity-70 hover:opacity-100' />}\n            >\n                {label}\n            </StyledButton>\n            {!label && <XTooltip anchorSelect='#toggleFavorite'>{isFavorite ? 'Unfavorite' : 'Favorite'}</XTooltip>}\n        </>\n    )\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { storyResponseFr } from '../fragments/storyResponseFr'\nimport { storySchema } from '../types'\n\nexport const mutation_updateStoryDeletedAt = async ({ id, deletedAt }: { id: string; deletedAt: string | null }) => {\n    const mutation = graphql(\n        `\n            mutation update_story_archived($id: uuid!, $deletedAt: timestamptz) {\n                update_stories_by_pk(pk_columns: { id: $id }, _set: { deleted_at: $deletedAt }) {\n                    id\n                    ...StoryResponseFr\n                }\n            }\n        `,\n        [storyResponseFr],\n    )\n\n    const client = await generateClient()\n\n    try {\n        return await client\n            .request(mutation, { id, deletedAt })\n            .then((res) => storySchema.parse(res?.update_stories_by_pk))\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useInvalidateStories } from '@/modules/stories/components/story-editor-dialog/hooks/useInvalidateStories'\nimport { mutation_updateStoryDeletedAt } from '@/modules/stories/services/insert-story/mutation_updateStoryDeletedAt'\nimport { useMutation } from '@tanstack/react-query'\n\nexport const useUpdateStoryDeletedAt = () => {\n    const { onSuccess } = useInvalidateStories()\n\n    const mutation = useMutation({\n        mutationFn: ({ id, deletedAt }: { id: string; deletedAt: null | string }) =>\n            mutation_updateStoryDeletedAt({ id, deletedAt }),\n        onSuccess: () => {\n            onSuccess()\n        },\n    })\n\n    const updateStoryDeletedAt = ({ id, deletedAt }: { id: string; deletedAt: null | string }) => {\n        mutation.mutate({ id, deletedAt })\n    }\n\n    return { updateStoryDeletedAt }\n}\n","import { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconDeleteTemp } from '@/assets/icons/IconDeleteTemp'\nimport { type ReactNode } from 'react'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { useUpdateStoryDeletedAt } from './useUpdateStoryDeletedAt'\n\nexport const StoryIsDeleted: React.FC<{ id: string; deletedAt: boolean; label?: ReactNode; onClose: () => void }> = ({\n    id,\n    deletedAt,\n    label,\n    onClose,\n}) => {\n    const { updateStoryDeletedAt } = useUpdateStoryDeletedAt()\n\n    return (\n        <>\n            <StyledButton\n                id='toggleMoveStoryToBin'\n                size={'small'}\n                error={!!deletedAt}\n                variant={'text'}\n                onClick={() => {\n                    updateStoryDeletedAt({ id, deletedAt: !!deletedAt ? null : formatDateWithTimezone() })\n                    onClose()\n                }}\n                startIcon={<IconDeleteTemp width={24} height={24} className='h-6 w-6 opacity-70 hover:opacity-100' />}\n            >\n                {label}\n            </StyledButton>\n            {!label && (\n                <XTooltip anchorSelect='#toggleMoveStoryToBin'>{deletedAt ? 'Restore' : 'Move to bin'}</XTooltip>\n            )}\n        </>\n    )\n}\n","import { useStoryEditorDialog$ } from '@/modules/stories/components/story-editor-dialog/mst/provider'\n\nexport const useEditStory = () => {\n    const { onChangeField } = useStoryEditorDialog$()\n\n    const editStory = ({ id }: { id: string }) => {\n        onChangeField('storyId', id)\n        onChangeField('open', true)\n    }\n\n    return { editStory }\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { type ReactNode } from 'react'\nimport { useEditStory } from './useEditStory'\nimport { IconEdit } from '@/assets/icons'\n\nexport const EditStory: React.FC<{ id: string; label?: ReactNode; onClose: () => void }> = ({ id, label, onClose }) => {\n    const { editStory } = useEditStory()\n\n    return (\n        <StyledButton\n            id='editStory'\n            variant={'text'}\n            size={'small'}\n            onClick={() => {\n                editStory({ id })\n                onClose()\n            }}\n            startIcon={<IconEdit className='h-6 w-6 opacity-70 hover:opacity-100' />}\n        >\n            {label}\n        </StyledButton>\n    )\n}\n","import { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { type IStory } from '@/modules/stories/services/types'\nimport { StoryIsArchived } from './components/story-is-archived/StoryIsArchived'\nimport { StoryIsFavorite } from './components/story-is-favorite/StoryIsFavorite'\nimport { StoryIsDeleted } from './components/story-is-deleted/StoryIsDeleted'\nimport { EditStory } from './components/edit-story/EditStory'\n\nexport const StoryContextMenu: React.FC<{ onClose: () => void; story: IStory }> = ({ onClose, story }) => {\n    return (\n        <XMenuDropdown>\n            <XMenuItem>\n                <StoryIsFavorite\n                    onClose={onClose}\n                    id={story.id}\n                    isFavorite={!!story.is_favorite}\n                    label={\n                        <span className='flex w-[110px] justify-start capitalize'>\n                            {story.is_favorite ? 'Unfavorite' : 'Favorite'}\n                        </span>\n                    }\n                />\n            </XMenuItem>\n            <XMenuItem>\n                <EditStory\n                    onClose={onClose}\n                    id={story.id}\n                    label={<span className='flex w-[110px] justify-start capitalize'>Edit</span>}\n                />\n            </XMenuItem>\n            <XMenuItem>\n                <StoryIsArchived\n                    onClose={onClose}\n                    id={story.id}\n                    isArchived={!!story.archived}\n                    label={\n                        <span className='flex w-[110px] justify-start capitalize'>\n                            {story.archived ? 'Unarchive' : 'Archive'}\n                        </span>\n                    }\n                />\n            </XMenuItem>\n            <XMenuItem>\n                <StoryIsDeleted\n                    onClose={onClose}\n                    id={story.id}\n                    deletedAt={!!story.deleted_at}\n                    label={\n                        <span className='flex w-[110px] justify-start capitalize'>\n                            {story.deleted_at ? 'Restore' : 'Move to bin'}\n                        </span>\n                    }\n                />\n            </XMenuItem>\n        </XMenuDropdown>\n    )\n}\n","import { IconLandscape } from '@/assets/icons/IconLandscape'\nimport { cn } from '@/helpers/cn'\n\nexport const NoImage: React.FC<{ className?: string; iconClassName?: string }> = ({\n    className = '',\n    iconClassName = '',\n}) => {\n    return (\n        <div\n            className={cn(\n                'h-32 w-32 items-center justify-center flex border-solid rounded-md border-[0.5px] border-global-bg-regal bg-global-bg-plasma',\n                className,\n            )}\n        >\n            <IconLandscape className={cn('text-cText opacity-50 w-20 h-20', iconClassName)} />\n        </div>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport { format } from 'date-fns'\nimport { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { useTogglePopoverState } from '@/hooks/useTogglePopoverState.hook'\nimport { cn } from '@/helpers/cn'\nimport { MEDIA_QUERY_VALUES_ENUM } from '@/hooks/useMatchMedia.hook'\nimport { StoryStatus } from './components/StoryStatus'\nimport { StoryContextMenu } from './StoryContextMenu'\nimport type { IStory } from '@/modules/stories/services/types'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { NoImage } from '@/components/NoImage'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\n\nexport const Story: React.FC<{ story: IStory; isMobile: MEDIA_QUERY_VALUES_ENUM }> = observer(({ story, isMobile }) => {\n    const { popoverState, setPopoverState } = useTogglePopoverState()\n    const navigate = useNavigate()\n    const location = useLocation()\n\n    return (\n        <div className='relative'>\n            <XDropdown\n                open={popoverState}\n                onOpenChange={() => {\n                    setPopoverState(!popoverState)\n                }}\n                trigger={['contextMenu', isMobile && 'click']}\n                dropdownRender={() => <StoryContextMenu onClose={() => setPopoverState(false)} story={story} />}\n            >\n                <div\n                    className={cn(\n                        `bg-global-2-bg flex w-[calc(100%-40px)] max-w-[600px] flex-col \n                    overflow-auto rounded-lg p-5 hover:scale-105 duration-300 shadow-[rgba(0,_0,_0,_0.24)_0px_3px_8px]\n                    relative border-solid border-transparent hover:border-blue-500 cursor-pointer`,\n                    )}\n                    onContextMenu={() => {\n                        setPopoverState(!popoverState)\n                    }}\n                    onClick={() => {\n                        navigate(`${location.pathname}/${story.id}`, { state: { id: story.id } })\n                    }}\n                    key={story.id}\n                >\n                    <div className='flex gap-2 h-full relative items-center justify-between min-h-[120px] '>\n                        <div className='h-full flex min-w-[120px]'>\n                            {story.img_path ? (\n                                <img\n                                    src={`${import.meta.env['VITE_FIRE_BUNNY_STORAGE']}stories/${story.img_path}`}\n                                    width={120}\n                                    height={120}\n                                    className='animate-opacity-3 rounded-lg'\n                                    // title={ach.title}\n                                />\n                            ) : (\n                                <NoImage className='opacity-20' />\n                            )}\n                        </div>\n                        <div className='flex justify-between flex-col min-h-[120px] h-full w-full'>\n                            <div className='flex flex-auto h-full text-lg font-atkinson'>{story.title}</div>\n                        </div>\n                    </div>\n                    <div className='flex justify-between mt-2 items-center h-[32px]'>\n                        <div className='text-xs m2-4 opacity-80 font-semibold font-kzen cursor-default text-cText'>\n                            {format(formatDateWithTimezone(new Date(story.updated_at)), 'dd MMMM yyyy HH:mm')} by{' '}\n                            {story.updated_by_user?.name}\n                        </div>\n                        <div className='flex'>\n                            <StoryStatus story={story} />\n                        </div>\n                    </div>\n                </div>\n            </XDropdown>\n        </div>\n    )\n})\n","import { type IStory } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\nimport { storyResponseFr } from '../fragments/storyResponseFr'\n\nexport const query_activeStories = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<IStory[] | undefined> => {\n    const { limit, userId, serverSearchInput, offset } = props\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_stories($limit: Int, $offset: Int, $title: String, $userId: uuid!) {\n                    stories(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { updated_at: desc }\n                        where: {\n                            _and: [\n                                { deleted_at: { _is_null: true }, archived: { _eq: false }, title: { _ilike: $title } }\n                                { _or: [{ created_by: { _eq: $userId } }, { users: { _contains: [$userId] } }] }\n                            ]\n                        }\n                    ) {\n                        ...StoryResponseFr\n                    }\n                }\n            `,\n            [storyResponseFr],\n        )\n\n        const result = await client\n            .request(query, { limit, userId, offset, title: '%' + serverSearchInput + '%' })\n            .then((res) => res?.stories)\n\n        return result\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { storyResponseFr } from '../fragments/storyResponseFr'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\nimport type { IStory } from '../types'\n\nexport const query_allStories = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<IStory[] | undefined> => {\n    const { limit, userId, serverSearchInput, offset } = props\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_stories($limit: Int, $offset: Int, $title: String, $userId: uuid!) {\n                    stories(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { updated_at: desc }\n                        where: {\n                            _and: [\n                                { title: { _ilike: $title } }\n                                { _or: [{ created_by: { _eq: $userId } }, { users: { _contains: [$userId] } }] }\n                            ]\n                        }\n                    ) {\n                        id\n                        ...StoryResponseFr\n                    }\n                }\n            `,\n            [storyResponseFr],\n        )\n\n        return await client\n            .request(query, { limit, userId, offset, title: '%' + serverSearchInput + '%' })\n            .then((res) => res?.stories)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { storyResponseFr } from '../fragments/storyResponseFr'\nimport { type IStory } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\n\nexport const query_favoriteStories = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<IStory[] | undefined> => {\n    const { limit, userId, serverSearchInput, offset } = props\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_stories($limit: Int, $offset: Int, $title: String, $userId: uuid!) {\n                    stories(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { updated_at: desc }\n                        where: {\n                            _and: [\n                                { is_favorite: { _eq: true }, title: { _ilike: $title } }\n                                { _or: [{ created_by: { _eq: $userId } }, { users: { _contains: [$userId] } }] }\n                            ]\n                        }\n                    ) {\n                        id\n                        ...StoryResponseFr\n                    }\n                }\n            `,\n            [storyResponseFr],\n        )\n\n        return await client\n            .request(query, { limit, userId, offset, title: '%' + serverSearchInput + '%' })\n            .then((res) => res?.stories)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { storyResponseFr } from '../fragments/storyResponseFr'\nimport { type IStory } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\n\nexport const query_archivedStories = async ({\n    limit,\n    userId,\n    serverSearchInput,\n    offset,\n}: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<IStory[] | undefined> => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_stories($limit: Int, $offset: Int, $title: String, $userId: uuid!) {\n                    stories(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { updated_at: desc }\n                        where: {\n                            _and: [\n                                { deleted_at: { _is_null: true }, archived: { _eq: true }, title: { _ilike: $title } }\n                                { _or: [{ created_by: { _eq: $userId } }, { users: { _contains: [$userId] } }] }\n                            ]\n                        }\n                    ) {\n                        id\n                        ...StoryResponseFr\n                    }\n                }\n            `,\n            [storyResponseFr],\n        )\n\n        return await client\n            .request(query, { limit, userId, offset, title: '%' + serverSearchInput + '%' })\n            .then((res) => res?.stories)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { storyResponseFr } from '../fragments/storyResponseFr'\nimport { type IStory } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\n\nexport const query_deletedStories = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<IStory[] | undefined> => {\n    const { limit, userId, serverSearchInput, offset } = props\n\n    const client = await generateClient()\n\n    const query = graphql(\n        `\n            query query_stories($limit: Int, $offset: Int, $title: String, $userId: uuid!) {\n                stories(\n                    limit: $limit\n                    offset: $offset\n                    order_by: { updated_at: desc }\n                    where: {\n                        _and: [\n                            { deleted_at: { _is_null: false }, title: { _ilike: $title } }\n                            { _or: [{ created_by: { _eq: $userId } }, { users: { _contains: [$userId] } }] }\n                        ]\n                    }\n                ) {\n                    id\n                    ...StoryResponseFr\n                }\n            }\n        `,\n        [storyResponseFr],\n    )\n\n    try {\n        return await client\n            .request(query, { limit, userId, offset, title: '%' + serverSearchInput + '%' })\n            .then((res) => res?.stories)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useInfiniteQuery } from '@tanstack/react-query'\nimport { compact, flatten, last, uniqWith } from 'lodash-es'\nimport { useUser$ } from '@/modules/app/mst/StoreProvider'\nimport { query_activeStories } from './query_activeStories'\nimport { artifactStatus, type IArtifactStatus } from '@/services/types'\nimport { type IStory } from '../types'\nimport { storiesService } from '../storiesService'\nimport { query_allStories } from './query_allStories'\nimport { query_favoriteStories } from './query_favoriteStories'\nimport { query_archivedStories } from './query_archivedStories'\nimport { query_deletedStories } from './query_deletedStories'\n\nexport const useFetchStories = (props: { queryFilter: IArtifactStatus; limit: number; serverSearchInput: string }) => {\n    const { queryFilter = artifactStatus.active, limit = 20, serverSearchInput = '' } = props\n    const { id: userId } = useUser$()\n\n    const { data, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage, isLoading } = useInfiniteQuery({\n        queryKey: storiesService.fetchStories(`${limit}${queryFilter}${serverSearchInput}${userId}`),\n        queryFn: async (props) => {\n            const offset = props.pageParam\n            const nextCursor = props.pageParam + 5\n            let data: IStory[] | undefined = []\n\n            if (queryFilter === artifactStatus.all) {\n                data = await query_allStories({ userId, limit, offset, serverSearchInput })\n            }\n\n            if (queryFilter === artifactStatus.favorite) {\n                data = await query_favoriteStories({ userId, limit, offset, serverSearchInput })\n            }\n            if (queryFilter === artifactStatus.active) {\n                data = await query_activeStories({ userId, limit, offset, serverSearchInput })\n            }\n\n            if (queryFilter === artifactStatus.archived) {\n                data = await query_archivedStories({ userId, limit, offset, serverSearchInput })\n            }\n            if (queryFilter === artifactStatus.deleted) {\n                data = await query_deletedStories({ userId, limit, offset, serverSearchInput })\n            }\n            return { data, nextCursor }\n        },\n        initialPageParam: 0,\n        getNextPageParam: (lastPage, pages) => {\n            return last(pages)?.data?.length ? lastPage?.nextCursor : undefined\n        },\n\n        staleTime: 1000,\n        refetchOnWindowFocus: false,\n        refetchOnMount: true,\n        enabled: !!userId,\n    })\n\n    const stories = uniqWith(compact(flatten(data?.pages.map((page) => page.data))), (a, b) => a.id === b.id)\n    return {\n        isFetching,\n        fetchNextPage,\n        isFetchingNextPage,\n        hasNextPage,\n        isLoading,\n        stories: stories || [],\n    }\n}\n","import { compact, uniq } from 'lodash-es'\nimport { format } from 'date-fns'\nimport { convertStringDate } from '@/helpers/date.helpers'\nimport { type IStory } from '../services/types'\n\nexport const filteredStoriesFabric = (\n    stories: IStory[] = [],\n): {\n    timeFrame: string[]\n    filtered: (tp: string) => IStory[]\n} => {\n    const timeFrame = compact(\n        uniq(stories.map((story) => story.created_at && format(convertStringDate(story.created_at), 'yyyy'))),\n    )\n\n    const filtered = (timeFrame: string) => {\n        return stories.filter(\n            (story) => story.created_at && format(convertStringDate(story.created_at), 'yyyy') === timeFrame,\n        )\n    }\n\n    return {\n        timeFrame,\n        filtered,\n    }\n}\n","import React, { useEffect } from 'react'\nimport { useInView } from 'react-intersection-observer'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { Story } from './story/Story'\nimport { useWindowMatchMedia } from '@/hooks/useMatchMedia.hook'\nimport { XSkeleton } from '@/components-x/x-skeleton/XSkeleton'\nimport { useStories$ } from '../mst/provider'\nimport { observer } from 'mobx-react-lite'\nimport { type IArtifactStatus } from '@/services/types'\nimport { useFetchStories } from '@/modules/stories/services/fetch-stories/useFetchStories'\nimport { filteredStoriesFabric } from '@/modules/stories/helpers/filteredStoriesFabric'\n\nexport const StoriesList: React.FC<{ queryFilter: IArtifactStatus }> = observer(({ queryFilter }) => {\n    const { serverSearchInput } = useStories$()\n    const { isMobile } = useWindowMatchMedia(['isMobile'])\n    const { isLoading, stories, fetchNextPage, hasNextPage, isFetching } = useFetchStories({\n        queryFilter,\n        // very important to set this limit also for invalidation\n        limit: 5,\n        serverSearchInput,\n    })\n\n    const { ref, inView } = useInView()\n\n    useEffect(() => {\n        !isLoading && inView && hasNextPage && fetchNextPage()\n    }, [inView, hasNextPage])\n\n    const { filtered, timeFrame } = filteredStoriesFabric(stories)\n\n    return (\n        <div className='animate-opacity-3 mx-auto flex w-full flex-col gap-5'>\n            {isLoading ? (\n                <XSkeleton length={20} />\n            ) : (\n                timeFrame.map((tp) => {\n                    const renderArtifacts = filtered(tp)\n                    return renderArtifacts.length ? (\n                        <React.Fragment key={tp}>\n                            <div>\n                                {tp && (\n                                    <div className='flex gap-1'>\n                                        <FormLabel title={tp} />\n                                    </div>\n                                )}\n                            </div>\n\n                            <div className='flex flex-col gap-10'>\n                                {renderArtifacts.map((art) => {\n                                    return <Story key={art.id} story={art} isMobile={isMobile} />\n                                })}\n                            </div>\n                        </React.Fragment>\n                    ) : null\n                })\n            )}\n\n            <div ref={ref} className='flex relative w-full flex-col gap-5 justify-center'>\n                {isFetching && <XSkeleton length={2} />}\n            </div>\n        </div>\n    )\n})\n","import { ModuleWrapper } from '@/components/ModuleWrapper'\nimport { Suspense } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { stories$, Stories$Provider } from './mst/provider'\nimport StoryEditorDialog from '../story-editor-dialog/StoryEditorDialog'\nimport { storyEditorDialog$, StoryEditorDialog$Provider } from '../story-editor-dialog/mst/provider'\nimport { StoriesHeader } from './components/stories-header/StoriesHeader'\nimport { StoriesList } from './components/StoriesList'\nimport { type IArtifactStatus } from '@/services/types'\n\nexport const StoriesByFilterIndex = () => {\n    const location = useLocation()\n    const queryFilter: IArtifactStatus = location.state?.filter\n\n    return (\n        <ModuleWrapper>\n            <StoryEditorDialog$Provider store={storyEditorDialog$}>\n                <Suspense fallback={null}>\n                    <StoryEditorDialog />\n                </Suspense>\n                <Stories$Provider store={stories$}>\n                    <div className='flex flex-col gap-10 w-full max-w-[600px] mx-auto relative'>\n                        <StoriesHeader />\n                        <StoriesList key={queryFilter} queryFilter={queryFilter} />\n                    </div>\n                </Stories$Provider>\n            </StoryEditorDialog$Provider>\n        </ModuleWrapper>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport { StoriesByFilterIndex } from './components/stories-cms/StoriesByFilterIndex'\nimport { lazy, Suspense } from 'react'\nconst StoryMakerIndex = lazy(() => import('./components/story-maker/StoryMakerIndex'))\n\nconst StoriesIndex: React.FC = observer(function StoriesIndex() {\n    return (\n        <Routes>\n            <Route\n                path={'/'}\n                element={<Navigate to={`/stories/filtered-stories?filter=active`} state={{ filter: 'active' }} />}\n            />\n            <Route path='filtered-stories' element={<StoriesByFilterIndex />} />\n            <Route\n                path={'filtered-stories/:dynamicSegment'}\n                element={\n                    <Suspense fallback={null}>\n                        <StoryMakerIndex />\n                    </Suspense>\n                }\n            />\n        </Routes>\n    )\n})\n\nexport default StoriesIndex\n"],"file":"assets/StoriesIndex-Dkg1SUFS.js"}