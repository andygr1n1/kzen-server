{"version":3,"file":"Register-qQMKkevW.js","sources":["../../src/modules/auth/register/services/types.ts","../../src/modules/auth/shared-components/AuthNameInput.tsx","../../src/modules/auth/register/services/server_registerUser.ts","../../src/modules/auth/register/hooks/useRegisterOnSubmit.ts","../../src/modules/auth/register/hooks/useRegisterOnValidate.ts","../../src/modules/auth/register/hooks/useRegisterInitialValues.ts","../../src/modules/auth/register/Register.tsx"],"sourcesContent":["import { z } from 'zod'\n\nexport const userRegisterSchema = z.object({\n    name: z.string().trim().min(1, 'Required field'),\n    email: z.string().trim().min(1, 'Required field').email('Invalid email format'),\n    password: z.string().trim().min(1, 'Required field'),\n    passwordRepeat: z.string().trim().min(1, 'Required field'),\n})\n\nexport type IUserRegisterSchema = z.infer<typeof userRegisterSchema>\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { useFormikContext } from 'formik'\nimport { type IBaseAuthSchema } from '../shared-services/types'\n\nexport const AuthNameInput = () => {\n    const formikContext = useFormikContext<IBaseAuthSchema>()\n    return (\n        <XInput\n            className='w-[220px]'\n            placeholder='Name'\n            name='name'\n            value={formikContext.values.name}\n            onChange={formikContext.handleChange}\n            error={formikContext.touched.name && Boolean(formikContext.errors.name)}\n            errorMessage={formikContext.errors.name}\n        />\n    )\n}\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport ky from 'ky'\nimport { type IUserRegisterSchema } from './types'\n\nexport const server_registerUser = async (props: { formData: IUserRegisterSchema }) => {\n    const endpoint = import.meta.env['VITE_NODE_HEROKU_ORIGIN']\n    const xapikey = import.meta.env['VITE_X_API_KEY']\n\n    try {\n        return await ky\n            .post(`${endpoint}register`, {\n                credentials: 'include', //\n                json: props.formData,\n                method: 'POST',\n                headers: {\n                    'x-api-key': xapikey,\n                    'Content-Type': 'application/json',\n                },\n            })\n            .json<Promise<{ message: string } | undefined>>()\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { type FormikHelpers } from 'formik'\nimport { server_registerUser } from '../services/server_registerUser'\nimport { type IUserRegisterSchema } from '../services/types'\nimport { useNavigate } from 'react-router-dom'\nimport { useMutation } from '@tanstack/react-query'\nimport { APP_ROUTES_ENUM } from '@/services/enums'\n\nexport const useRegisterOnSubmit = () => {\n    const navigate = useNavigate()\n\n    const mutation = useMutation({\n        mutationFn: ({ formData }: { formData: IUserRegisterSchema }) => server_registerUser({ formData }),\n    })\n\n    const onSubmit = (values: IUserRegisterSchema, formikHelpers: FormikHelpers<IUserRegisterSchema>) => {\n        mutation.mutate(\n            { formData: values },\n            {\n                onError: (/* error */) => {\n                    // processError(error.message)\n                },\n                onSuccess: () => {\n                    formikHelpers.resetForm()\n                    navigate(`/${APP_ROUTES_ENUM.ACTIVATE_PENDING_REGISTERED_USER}?email=${values.email}`)\n                },\n                onSettled: () => {\n                    formikHelpers.setSubmitting(false)\n                },\n            },\n        )\n    }\n\n    return { onSubmit }\n}\n","import { type IUserRegisterSchema, userRegisterSchema } from '../services/types'\n\nexport const useRegisterOnValidate = () => {\n    const validate = (values: IUserRegisterSchema) => {\n        const result = userRegisterSchema.safeParse(values)\n        const errors: Partial<IUserRegisterSchema> = {}\n        if (!result.success) {\n            for (const issue of result.error.issues) {\n                errors[issue.path[0] as keyof IUserRegisterSchema] = issue.message\n            }\n        }\n\n        if (!values.email.length) {\n            errors.email = 'Required field'\n        }\n\n        if (values.password !== values.passwordRepeat) {\n            errors.password = 'Passwords do not match'\n            errors.passwordRepeat = 'Passwords do not match'\n        }\n        return errors\n    }\n\n    return { validate }\n}\n","import { type IUserRegisterSchema } from '../services/types'\n\nexport const useRegisterInitialValues = (): { initialValues: IUserRegisterSchema } => {\n    return { initialValues: { email: '', password: '', passwordRepeat: '', name: '' } }\n}\n","import { AlreadyHaveAccount } from '../shared-components/AlreadyHaveAccount'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { Formik, Form } from 'formik'\nimport { type IUserRegisterSchema } from './services/types'\nimport { AuthNameInput } from '../shared-components/AuthNameInput'\nimport { AuthEmailInput } from '../shared-components/AuthEmailInput'\nimport { AuthPasswordInput } from '../shared-components/AuthPasswordInput'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useRegisterOnSubmit } from './hooks/useRegisterOnSubmit'\nimport { useRegisterOnValidate } from './hooks/useRegisterOnValidate'\nimport { useRegisterInitialValues } from './hooks/useRegisterInitialValues'\n\nconst Register: React.FC = () => {\n    const { onSubmit } = useRegisterOnSubmit()\n    const { validate } = useRegisterOnValidate()\n    const { initialValues } = useRegisterInitialValues()\n\n    return (\n        <div className='flex flex-col gap-10 mt-10 items-center'>\n            <Formik<IUserRegisterSchema> initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n                {({ isSubmitting }) => (\n                    <Form className='flex flex-col gap-5'>\n                        <AuthNameInput />\n                        <AuthEmailInput />\n                        <AuthPasswordInput />\n                        <AuthPasswordInput repeatType />\n                        <StyledButton\n                            className='w-full'\n                            type='submit'\n                            disabled={isSubmitting}\n                            startIcon={isSubmitting && <IconInfiniteLoading className='text-slate-500 w-5 h-5' />}\n                        >\n                            {isSubmitting ? 'Registering...' : 'Register'}\n                        </StyledButton>\n                        <AlreadyHaveAccount />\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n\nexport default Register\n"],"names":["userRegisterSchema","z","object","name","string","trim","min","email","password","passwordRepeat","AuthNameInput","formikContext","useFormikContext","jsx","XInput","values","handleChange","touched","Boolean","errors","server_registerUser","props","endpoint","import","xapikey","ky","post","credentials","json","formData","method","headers","e","resolveError","useRegisterOnSubmit","navigate","useNavigate","mutation","useMutation","mutationFn","onSubmit","formikHelpers","mutate","onError","onSuccess","resetForm","APP_ROUTES_ENUM","ACTIVATE_PENDING_REGISTERED_USER","onSettled","setSubmitting","useRegisterOnValidate","validate","result","safeParse","success","issue","error","issues","path","message","length","useRegisterInitialValues","initialValues","Register","Formik","isSubmitting","jsxs","Form","AuthEmailInput","AuthPasswordInput","StyledButton","IconInfiniteLoading","AlreadyHaveAccount"],"mappings":"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"}