{"version":3,"mappings":"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","names":["IconFolder","props","jsx","AddNote","setStore","useNoteEditor$","addNote","editorMode","new","id","open","StyledButton","IconNew","LabelFiltersSelectButton","observer","cn","LabelDialog$","types","model","selectedLabel","maybeNull","string","actions","self","onChangeField","field","value","onCancel","onOpen","toggleEdit","storeContext","createContext","labelDialog$","create","useLabelDialog$","store","useContext","Error","LabelDialog$Provider","children","NotesLabelsTabs","lazy","__vitePreload","CreateLabelDialog","XModal","Suspense","IconPencilCode","NotesLabelsDialogTrigger","onCLick","createLabelFormSchema","z","object","uuid","name","duplicateName","boolean","optional","default","rating","number","nullable","notesLabelsResponseSchema","array","query_fetchNotesLabels","client","generateClient","query","graphql","request","then","result","parse","notes_labels","undefined","e","resolveError","noteLabelsService","KEY_fetchNotesLabels","userId","useFetchNotesLabels","filter","setFilter","useState","useUser$","isLoading","data","useQuery","queryKey","queryFn","staleTime","refetchOnWindowFocus","refetchOnMount","enabled","notesLabels","label","toLocaleLowerCase","includes","trim","onChange","LabelFilterSelect","setOpen","onClose","jsxs","XDropdown","x","DropdownRender","location","useLocation","navigate","useNavigate","labelParam","state","onSelect","labelId","isSelected","searchParams","URLSearchParams","search","delete","set","pathname","toString","sortedData","sortBy","noteLabel","XMenuDropdown","XMenuItem","XInput","target","XSkeleton","map","IconCheck","isActiveNoteStatus","status","noteStatus","active","isArchivedNoteStatus","archived","isDeletedNoteStatus","deleted","isFavoriteNoteStatus","favorite","useGetNotesParamsFilter","paramFilter","isActive","isFavorite","isDeleted","isArchived","isAll","isStatusAll","ActiveFilterIcon","icon","IconFocus","IconAll","IconFavorite","IconArchive","IconDeleteTemp","NotesFiltersSelectButton","NotesFilterSelect","artifactStatus","all","Notes$","searchInput","serverSearchInput","enumeration","noteStatusSchema","options","onChangeSSI","onChangeInput","notes$","useNotes$","Notes$Provider","SearchNotesInput","onChangeServerSearchInput","useMemo","debounce","useEffect","cancel","IconSearch","SelectedLabel","selectedNoteLabel","find","l","NotesHeader","getNoteTags","tag","noteTags","compact","split","length","NoteTagsList","note","deleteAction","capitalize","IconClose","noteResponseFr","mutation_updateNoteIsFavorite","noteSchema","update_notes_by_pk","useInvalidateNotes","queryClient","useQueryClient","onSuccess","queryFilter","invalidateQueries","predicate","useUpdateNoteIsFavorite","editMode","mutation","useMutation","mutationFn","res","edit","toggleFavorite","mutate","NoteIsFavorite","Fragment","IconHeart","XTooltip","mutation_updateNoteIsArchived","useUpdateNoteIsArchived","toggleArchived","NoteIsArchived","mutation_updateNoteDeletedAt","deletedAt","useUpdateNoteDeletedAt","setState","goalEditorMode","updateNoteDeletedAt","NoteIsDeleted","formatDateWithTimezone","NoteContextMenu","is_favorite","IconEdit","deleted_at","NoteLabel","NoteStatus","Note","isMobile","popoverState","setPopoverState","useTogglePopoverState","created_at","XTiptap","description","format","filteredNotesFabric","notes","timeFrame","uniq","convertStringDate","filteredNotes","query_favoriteNotes","limit","offset","label_id","_eq","notesResponseSchema","query_activeNotes","query_archivedNotes","query_deletedNotes","query_allNotes","useFetchNotes","fetchNextPage","hasNextPage","isFetching","isFetchingNextPage","useInfiniteQuery","notesKeys","pageParam","nextCursor","initialPageParam","getNextPageParam","lastPage","pages","last","uniqWith","flatten","page","a","b","NotesList","useWindowMatchMedia","ref","inView","useInView","tp","renderNotes","React","FormLabel","NotesByFilterIndex","ModuleWrapper","NoteEditorDialog$Provider","noteEditorDialog$","NoteEditorDialog","useRestoreNoteModuleParams","setData","params","currentPath","localStorage","getItem","regex","matches","match","NotesCmsIndex","setItem","Routes","Route","Navigate"],"ignoreList":[],"sources":["../../src/assets/icons/IconFolder.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/AddNote.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/LabelFiltersSelectButton.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/mst/stores/LabelDialog.store.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/mst/provider.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/CreateLabelDialog.tsx","../../src/assets/icons/IconPencilCode.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/NotesLabelsDialogTrigger.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/types.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/query_fetchNotesLabels.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/noteLabelsService.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/useFetchNotesLabels.ts","../../src/modules/notes/components/notes-cms/components/notes-header/LabelFilterSelect.tsx","../../src/modules/notes/helpers/guards.ts","../../src/modules/notes/components/notes-cms/hooks/useGetNotesParamsFilter.ts","../../src/modules/notes/components/notes-cms/components/notes-header/ActiveFilterIcon.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/NotesFiltersSelectButton.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/NotesFilterSelect.tsx","../../src/modules/notes/components/notes-cms/mst/stores/Notes.store.ts","../../src/modules/notes/components/notes-cms/mst/provider.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/SearchNotesInput.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/SelectedLabel.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/NotesHeader.tsx","../../src/modules/notes/helpers/getNoteTags.ts","../../src/modules/notes/shared-components/NoteTagsList.tsx","../../src/modules/notes/shared-services/fragments/noteResponseFr.ts","../../src/modules/notes/shared-services/mutation_updateNoteIsFavorite.ts","../../src/modules/notes/shared-hooks/useInvalidateNotes.ts","../../src/modules/notes/shared-components/note-is-favorite/useUpdateNoteIsFavorite.ts","../../src/modules/notes/shared-components/note-is-favorite/NoteIsFavorite.tsx","../../src/modules/notes/shared-services/mutation_updateNoteIsArchived.ts","../../src/modules/notes/shared-components/note-is-archived/useUpdateNoteIsArchived.ts","../../src/modules/notes/shared-components/note-is-archived/NoteIsArchived.tsx","../../src/modules/notes/shared-services/mutation_updateNoteDeletedAt.ts","../../src/modules/notes/shared-components/note-is-deleted/useUpdateNoteDeletedAt.ts","../../src/modules/notes/shared-components/note-is-deleted/NoteIsDeleted.tsx","../../src/modules/notes/components/notes-cms/components/note/NoteContextMenu.tsx","../../src/modules/notes/components/notes-cms/components/note/components/NoteLabel.tsx","../../src/modules/notes/components/notes-cms/components/note/components/NoteStatus.tsx","../../src/modules/notes/components/notes-cms/components/note/Note.tsx","../../src/modules/notes/helpers/filteredNotesFabric.ts","../../src/modules/notes/shared-services/fetch-notes/query_favoriteNotes.ts","../../src/modules/notes/shared-services/fetch-notes/query_activeNotes.ts","../../src/modules/notes/shared-services/fetch-notes/query_archivedNotes.ts","../../src/modules/notes/shared-services/fetch-notes/query_deletedNotes.ts","../../src/modules/notes/shared-services/fetch-notes/query_allNotes.ts","../../src/modules/notes/shared-services/fetch-notes/useFetchNotes.ts","../../src/modules/notes/components/notes-cms/components/NotesCards.tsx","../../src/modules/notes/components/notes-cms/NotesByFilterIndex.tsx","../../src/modules/notes/components/notes-cms/hooks/useRestoreNoteModuleParams.ts","../../src/modules/notes/components/notes-cms/NotesCmsIndex.tsx"],"sourcesContent":["import type { SVGProps } from 'react'\n\nexport function IconFolder(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 16 16' {...props}>\n            <path\n                fill='currentColor'\n                d='M1 4.5A2.5 2.5 0 0 1 3.5 2h2.086a1.5 1.5 0 0 1 1.06.44L8 3.792l-2.06 2.06A.5.5 0 0 1 5.585 6H1zM1 7v4.5A2.5 2.5 0 0 0 3.5 14h9a2.5 2.5 0 0 0 2.5-2.5v-5A2.5 2.5 0 0 0 12.5 4H9.207l-2.56 2.56A1.5 1.5 0 0 1 5.585 7z'\n            ></path>\n        </svg>\n    )\n}\n","import { IconNew } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useNoteEditor$ } from '../../../note-editor-dialog/stores/note-editor-store/useNoteEditor.store'\nimport { editorMode } from '../../../note-editor-dialog/stores/note-editor-store/types'\n\nexport const AddNote: React.FC = () => {\n    const { setStore } = useNoteEditor$()\n\n    const addNote = () => {\n        setStore({ editorMode: editorMode.new, id: null, open: true })\n    }\n\n    return (\n        <div className='opacity-70'>\n            <StyledButton startIcon={<IconNew width={24} height={24} />} onClick={addNote} variant='text'>\n                Add note\n            </StyledButton>\n        </div>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { cn } from '@/helpers/cn'\nimport { IconFolder } from '@/assets/icons'\n\nexport const LabelFiltersSelectButton: React.FC = observer(() => {\n    return (\n        <StyledButton\n            startIcon={<IconFolder className='w-5 h-5' />}\n            className={cn('!border-blue-600 hover:!bg-blue-600/20')}\n            variant='outlined'\n        />\n    )\n})\n","import { type Instance, types } from 'mobx-state-tree'\n\nexport const LabelDialog$ = types\n    .model('LabelDialog$', {\n        open: false,\n        selectedLabel: types.maybeNull(types.string),\n    })\n    .actions((self) => ({\n        onChangeField<Key extends keyof typeof self>(field: Key, value: (typeof self)[Key]) {\n            self[field] = value\n        },\n        onCancel(): void {\n            self.open = false\n            self.selectedLabel = null\n        },\n        onOpen(): void {\n            self.open = true\n        },\n        toggleEdit({ id }: { id: string }): void {\n            if (self.selectedLabel === id) {\n                self.selectedLabel = null\n            } else if (self.selectedLabel !== id) {\n                self.selectedLabel = id\n            }\n        },\n    }))\n\nexport interface ILabelDialog$ extends Instance<typeof LabelDialog$> {}\n","import { type ReactNode, createContext, useContext } from 'react'\nimport { type ILabelDialog$, LabelDialog$ } from './stores/LabelDialog.store'\nconst storeContext = createContext<ILabelDialog$ | null>(null)\n\nexport const labelDialog$ = LabelDialog$.create({})\n\nexport const useLabelDialog$ = (): ILabelDialog$ => {\n    const store = useContext(storeContext)\n    if (!store) {\n        throw new Error('useLabel$ shall be used within StoreProvider')\n    }\n\n    return store\n}\n\nexport const LabelDialog$Provider = ({ children, store }: { children: ReactNode; store: ILabelDialog$ }) => {\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n","import { XModal } from '@/components-x/x-modal/XModal'\nimport { useLabelDialog$ } from '../mst/provider'\nimport { observer } from 'mobx-react-lite'\nimport { Suspense, lazy } from 'react'\nconst NotesLabelsTabs = lazy(() => import('./NotesLabelsTabs'))\n\nexport const CreateLabelDialog: React.FC = observer(() => {\n    const { open, onCancel } = useLabelDialog$()\n\n    return (\n        <XModal fullHeight title={'Labels'} open={open} onCancel={onCancel}>\n            {open && (\n                <div className='text-cText flex h-full w-full flex-col'>\n                    <Suspense fallback={null}>\n                        <NotesLabelsTabs />\n                    </Suspense>\n                </div>\n            )}\n        </XModal>\n    )\n})\n","import type { SVGProps } from 'react'\n\nexport function IconPencilCode(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' {...props}>\n            <path\n                fill='none'\n                stroke='currentColor'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth={2}\n                d='M4 20h4L18.5 9.5a2.828 2.828 0 1 0-4-4L4 16zm9.5-13.5l4 4M20 21l2-2l-2-2m-3 0l-2 2l2 2'\n            ></path>\n        </svg>\n    )\n}\n","import { IconPencilCode } from '@/assets/icons/IconPencilCode'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { observer } from 'mobx-react-lite'\nimport { useLabelDialog$ } from '../mst/provider'\nimport { cn } from '@/helpers/cn'\n\nexport const NotesLabelsDialogTrigger: React.FC = observer(() => {\n    const { onOpen: onCLick } = useLabelDialog$()\n    return (\n        <StyledButton\n            className={cn('!border-blue-600 hover:!bg-blue-600/20')}\n            variant='outlined'\n            onClick={onCLick}\n            startIcon={<IconPencilCode />}\n        />\n    )\n})\n","import { z } from 'zod'\n\nexport const createLabelFormSchema = z.object({\n    id: z.string().uuid(),\n    name: z.string(),\n    duplicateName: z.boolean().optional().default(false),\n    rating: z.number().nullable().optional(),\n})\n\nexport type ICreateLabelForm = z.infer<typeof createLabelFormSchema>\n\nexport const notesLabelsResponseSchema = z.array(createLabelFormSchema)\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { notesLabelsResponseSchema } from './types'\nimport { graphql } from '@/api/tada'\n\nexport const query_fetchNotesLabels = async () => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(`\n            query query_notes_labels {\n                notes_labels(order_by: { created_at: desc, name: asc, rating: desc }, where: {}) {\n                    id\n                    name\n                    rating\n                }\n            }\n        `)\n\n        return await client\n            .request(query)\n            .then((result) => (result ? notesLabelsResponseSchema.parse(result.notes_labels) : undefined))\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","export const noteLabelsService = {\n    KEY_fetchNotesLabels: ({ userId }: { userId: string }) => [['useFetchNotesLabels', userId]],\n}\n","import { useQuery } from '@tanstack/react-query'\nimport { query_fetchNotesLabels } from './query_fetchNotesLabels'\nimport { useUser$ } from '@/modules/app/mst/StoreProvider'\nimport { noteLabelsService } from './noteLabelsService'\nimport { useState } from 'react'\n\nexport const useFetchNotesLabels = () => {\n    const [filter, setFilter] = useState('')\n    const { id: userId } = useUser$()\n    const { isLoading, data } = useQuery({\n        queryKey: noteLabelsService.KEY_fetchNotesLabels({ userId }),\n        queryFn: () => query_fetchNotesLabels(),\n        staleTime: 1000,\n        refetchOnWindowFocus: true,\n        refetchOnMount: false,\n        enabled: !!userId,\n    })\n\n    return {\n        notesLabels: data || [],\n        isLoading,\n        filter,\n        data:\n            data?.filter((label) => label.name?.toLocaleLowerCase().includes(filter.trim().toLocaleLowerCase())) || [],\n        onChange: (value: string) => setFilter(value),\n    }\n}\n","import { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { LabelFiltersSelectButton } from './LabelFiltersSelectButton'\nimport { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { type INoteStatus } from '@/modules/notes/shared-services/types'\nimport { useState } from 'react'\nimport { XInput } from '@/components-x/x-input/XInput'\nimport { CreateLabelDialog } from './components/note-label/notes-labels-dialog/components/CreateLabelDialog'\nimport { LabelDialog$Provider, labelDialog$ } from './components/note-label/notes-labels-dialog/mst/provider'\nimport { NotesLabelsDialogTrigger } from './components/note-label/notes-labels-dialog/components/NotesLabelsDialogTrigger'\nimport { useFetchNotesLabels } from './components/note-label/notes-labels-dialog/service/useFetchNotesLabels'\nimport { IconCheck } from '@/assets/icons/IconCheck'\nimport { XSkeleton } from '@/components-x/x-skeleton/XSkeleton'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { cn } from '@/helpers/cn'\nimport { sortBy } from 'lodash-es'\n\nexport const LabelFilterSelect: React.FC = () => {\n    const [open, setOpen] = useState(false)\n\n    const onClose = () => {\n        setOpen(false)\n    }\n\n    return (\n        <LabelDialog$Provider store={labelDialog$}>\n            <XDropdown\n                onOpenChange={(x) => {\n                    setOpen(x)\n                }}\n                trigger={['hover']}\n                open={open}\n                dropdownRender={() => <DropdownRender onClose={onClose} />}\n                placement='bottomRight'\n                overlayClassName='!z-[55]'\n            >\n                <div>\n                    <LabelFiltersSelectButton />\n                </div>\n            </XDropdown>\n            <CreateLabelDialog />\n        </LabelDialog$Provider>\n    )\n}\n\nconst DropdownRender: React.FC<{ onClose: (filter: INoteStatus) => void }> = () => {\n    const { isLoading, data, onChange, filter } = useFetchNotesLabels()\n    const location = useLocation()\n    const navigate = useNavigate()\n    const labelParam: string = location.state?.label\n\n    const onSelect = (labelId: string) => {\n        const isSelected = labelParam === labelId\n        const searchParams = new URLSearchParams(location.search)\n        isSelected ? searchParams.delete('label') : searchParams.set('label', labelId)\n\n        navigate(\n            { pathname: '/notes/filtered-notes', search: searchParams.toString() },\n            { state: { ...location.state, label: isSelected ? null : labelId } },\n        )\n    }\n\n    const sortedData = sortBy(data, (noteLabel) => (labelParam === noteLabel.id ? 0 : 1))\n\n    return (\n        <XMenuDropdown className='max-h-[400px] min-h-[160px] overflow-auto scrollbar-thumb-blue-500/50/50 scrollbar-track-global-bg scrollbar-thin'>\n            <XMenuItem className='mb-4'>\n                <XInput value={filter} onChange={(e) => onChange(e.target.value)} />\n                <NotesLabelsDialogTrigger />\n            </XMenuItem>\n            {isLoading ? (\n                <XSkeleton length={2} />\n            ) : (\n                sortedData.map((noteLabel) => {\n                    const isSelected = labelParam === noteLabel.id\n                    return (\n                        <XMenuItem\n                            key={noteLabel.id}\n                            onClick={() => {\n                                onSelect(noteLabel.id)\n                            }}\n                        >\n                            <StyledButton\n                                startIcon={\n                                    <div className='w-8 h-6'>\n                                        {isSelected && (\n                                            <IconCheck className='w-6 h-6 absolute left-[-3px] animate-opacity-3 text-blue-500' />\n                                        )}\n                                    </div>\n                                }\n                                className={cn('!w-full', isSelected && '!text-blue-500')}\n                                variant='text'\n                                size='small'\n                            >\n                                <span className='flex w-full capitalize'>{noteLabel.name}</span>\n                            </StyledButton>\n                        </XMenuItem>\n                    )\n                })\n            )}\n        </XMenuDropdown>\n    )\n}\n","/* */\n\nimport { type INoteStatus, noteStatus } from '@/modules/notes/shared-services/types'\n\nexport const isActiveNoteStatus = (status: INoteStatus) => {\n    return status === noteStatus.active\n}\n\nexport const isArchivedNoteStatus = (status: INoteStatus) => {\n    return status === noteStatus.archived\n}\n\nexport const isDeletedNoteStatus = (status: INoteStatus) => {\n    return status === noteStatus.deleted\n}\n\nexport const isFavoriteNoteStatus = (status: INoteStatus) => {\n    return status === noteStatus.favorite\n}\n","import { useLocation } from 'react-router-dom'\n\nimport {\n    isActiveNoteStatus,\n    isArchivedNoteStatus,\n    isDeletedNoteStatus,\n    isFavoriteNoteStatus,\n} from '../../../helpers/guards'\nimport { type INoteStatus } from '@/modules/notes/shared-services/types'\nimport { isStatusAll } from '@/services/guards'\n\nexport const useGetNotesParamsFilter = () => {\n    const location = useLocation()\n    const paramFilter: INoteStatus = location.state?.filter\n\n    const isActive = isActiveNoteStatus(paramFilter)\n    const isFavorite = isFavoriteNoteStatus(paramFilter)\n    const isDeleted = isDeletedNoteStatus(paramFilter)\n    const isArchived = isArchivedNoteStatus(paramFilter)\n    const isAll = isStatusAll(paramFilter)\n\n    return { paramFilter, isArchived, isActive, isFavorite, isDeleted, isAll }\n}\n","import { IconDeleteTemp, IconFavorite } from '@/assets/icons'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { useGetNotesParamsFilter } from '../../hooks/useGetNotesParamsFilter'\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { IconAll } from '@/assets/icons/IconAll'\n\nexport const ActiveFilterIcon: React.FC = () => {\n    const { isArchived, isFavorite, isDeleted, isAll } = useGetNotesParamsFilter()\n\n    let icon = <IconFocus width={24} height={24} className='min-h-[24px] min-w-[24px]' />\n\n     if (isAll) icon = <IconAll width={24} height={24} className='min-h-[24px] min-w-[24px] text-sky-400' />\n    if (isFavorite) icon = <IconFavorite width={24} height={24} className='min-h-[24px] min-w-[24px] text-rose-600' />\n    if (isArchived) icon = <IconArchive width={24} height={24} className='min-h-[24px] min-w-[24px] text-violet-600' />\n    if (isDeleted) icon = <IconDeleteTemp width={24} height={24} className='min-h-[24px] min-w-[24px] text-slate-600' />\n    return icon\n}\n","import { observer } from 'mobx-react-lite'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { ActiveFilterIcon } from './ActiveFilterIcon'\nimport { cn } from '@/helpers/cn'\nimport { useGetNotesParamsFilter } from '../../hooks/useGetNotesParamsFilter'\n\nexport const NotesFiltersSelectButton: React.FC = observer(() => {\n    const { isFavorite, isDeleted, isArchived, isAll } = useGetNotesParamsFilter()\n    return (\n        <StyledButton\n            startIcon={<ActiveFilterIcon />}\n            // onClick={ }\n            className={cn(\n                '!border-blue-600 hover:!bg-blue-600/20',\n                isAll && '!border-sky-400/20 hover:!bg-sky-400/20',\n                isFavorite && '!border-rose-500/20 hover:!bg-rose-500/20',\n                isArchived && '!border-violet-500/20 hover:!bg-violet-500/20',\n                isDeleted && '!border-slate-500/20 hover:!bg-slate-500/20',\n            )}\n            variant='outlined'\n        />\n    )\n})\n","import { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { useState } from 'react'\nimport { IconDeleteTemp, IconFavorite } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { type INoteStatus } from '@/modules/notes/shared-services/types'\nimport { NotesFiltersSelectButton } from './NotesFiltersSelectButton'\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { artifactStatus } from '@/services/types'\nimport { IconAll } from '@/assets/icons/IconAll'\n\nexport const NotesFilterSelect = () => {\n    const [open, setOpen] = useState(false)\n    const navigate = useNavigate()\n    const location = useLocation()\n\n    // const onSelect = (labelId: string) => {\n    //     const isSelected = labelParam === labelId\n    //     const searchParams = new URLSearchParams(location.search)\n    //     isSelected ? searchParams.delete('label') : searchParams.set('label', labelId)\n\n    //     navigate(\n    //         { pathname: '/notes/filtered-notes', search: searchParams.toString() },\n    //         { state: { ...location.state, label: isSelected ? null : labelId } },\n    //     )\n    // }\n\n    const onClose = (filter: INoteStatus) => {\n        const searchParams = new URLSearchParams(location.search)\n        searchParams.set('filter', filter)\n        navigate(\n            { pathname: '/notes/filtered-notes', search: searchParams.toString() },\n            { state: { ...location.state, filter } },\n        )\n        // setOpen(false)\n    }\n\n    return (\n        <XDropdown\n            onOpenChange={(x) => {\n                setOpen(x)\n            }}\n            trigger={['hover']}\n            open={open}\n            dropdownRender={() => <DropdownRender onClose={onClose} />}\n            placement='bottomRight'\n            overlayClassName='!z-[55]'\n        >\n            <div>\n                <NotesFiltersSelectButton />\n            </div>\n        </XDropdown>\n    )\n}\n\nconst DropdownRender: React.FC<{ onClose: (filter: INoteStatus) => void }> = ({ onClose }) => {\n    return (\n        <XMenuDropdown>\n            <XMenuItem\n                onClick={() => {\n                    onClose('active')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFocus className='text-blue-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-blue-500'>Active</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('favorite')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFavorite className='text-rose-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-rose-500'>Favorite</span>\n                </StyledButton>\n            </XMenuItem>\n\n            <XMenuItem\n                onClick={() => {\n                    onClose('archived')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconArchive className='text-violet-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-violet-500'>Archived</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('deleted')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconDeleteTemp className='text-slate-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-slate-500'>Deleted</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose(artifactStatus.all)\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconAll className='text-sky-400' width={26} height={26} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-sky-400'>All</span>\n                </StyledButton>\n            </XMenuItem>\n        </XMenuDropdown>\n    )\n}\n","import { noteStatusSchema } from '@/modules/notes/shared-services/types'\nimport { type Instance, types } from 'mobx-state-tree'\n\nexport const Notes$ = types\n    .model('Notes$', {\n        searchInput: '',\n        serverSearchInput: '',\n        status: types.optional(types.enumeration('NoteStatus', noteStatusSchema.options), 'active'),\n    })\n    .actions((self) => ({\n        onChangeField<Key extends keyof typeof self>(field: Key, value: (typeof self)[Key]) {\n            self[field] = value\n        },\n        onChangeSSI({ value }: { value: string }): void {\n            self.searchInput = value\n            self.serverSearchInput = value\n        },\n        onChangeInput({ value }: { value: string }): void {\n            self.searchInput = value\n        },\n    }))\n\nexport interface INotes$ extends Instance<typeof Notes$> {}\n","import { type ReactNode, createContext, useContext } from 'react'\nimport { type INotes$, Notes$ } from './stores/Notes.store'\nconst storeContext = createContext<INotes$ | null>(null)\n\nexport const notes$ = Notes$.create({})\n\nexport const useNotes$ = (): INotes$ => {\n    const store = useContext(storeContext)\n    if (!store) {\n        throw new Error('useLabel$ shall be used within StoreProvider')\n    }\n\n    return store\n}\n\nexport const Notes$Provider = ({ children, store }: { children: ReactNode; store: INotes$ }) => {\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { IconSearch } from '@/assets/icons/IconSearch'\nimport { useEffect, useMemo } from 'react'\nimport { debounce } from 'lodash-es'\nimport { useNotes$ } from '../../mst/provider'\nimport { observer } from 'mobx-react-lite'\n\nexport const SearchNotesInput = observer(() => {\n    const { onChangeSSI, searchInput, onChangeInput } = useNotes$()\n\n    const onChangeServerSearchInput = useMemo(() => {\n        return debounce((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            onChangeSSI({ value: e.target.value })\n        }, 1000)\n    }, [])\n\n    useEffect(() => {\n        return () => {\n            onChangeServerSearchInput.cancel()\n        }\n    }, [])\n\n    return (\n        <XInput\n            type='text'\n            autoFocus={false}\n            value={searchInput}\n            onChange={(e) => {\n                onChangeInput({ value: e.target.value })\n                onChangeServerSearchInput(e)\n            }}\n            startIcon={<IconSearch className='text-slate-500/50' width={20} height={20} />}\n            placeholder='Search'\n            width='!max-w-[600px] !w-full'\n        />\n    )\n})\n","import { IconFolder } from '@/assets/icons'\nimport { useLocation } from 'react-router-dom'\nimport { useFetchNotesLabels } from './components/note-label/notes-labels-dialog/service/useFetchNotesLabels'\n\nexport const SelectedLabel: React.FC = () => {\n    const { data } = useFetchNotesLabels()\n    const location = useLocation()\n    const labelParam: string = location.state?.label\n    const selectedNoteLabel = data.find((l) => l.id === labelParam)?.name\n    return selectedNoteLabel ? (\n        <div className='flex capitalize opacity-70 text-base items-center font-bold'>\n            {selectedNoteLabel}\n            <IconFolder className='w-5 h-5 px-3' />\n        </div>\n    ) : null\n}\n","import { AddNote } from './AddNote'\nimport { LabelFilterSelect } from './LabelFilterSelect'\nimport { NotesFilterSelect } from './NotesFilterSelect'\nimport { SearchNotesInput } from './SearchNotesInput'\nimport { SelectedLabel } from './SelectedLabel'\n\nexport const NotesHeader: React.FC = () => {\n    return (\n        <div className='flex w-full mx-auto gap-8'>\n            <div className='flex flex-col w-full gap-4'>\n                <div className='flex justify-between items-center'>\n                    <AddNote />\n                    <SelectedLabel />\n                </div>\n                <div className='flex w-full items-center justify-end gap-2'>\n                    <SearchNotesInput />\n                    <div className='flex gap-2 w-[108px]'>\n                        <NotesFilterSelect />\n                        <LabelFilterSelect />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import { compact } from 'lodash-es'\n\nexport const getNoteTags = (tag: string | null) => {\n    const noteTags = compact(tag?.split(','))\n\n    return { noteTags: !tag?.length ? [] : noteTags }\n}\n\n//   toggleSelectTag(tag: string): void {\n//             if (self.selected_tags.includes(tag)) {\n//                 const indexOfActiveFilter = self.selected_tags.indexOf(tag)\n//                 self.selected_tags.splice(indexOfActiveFilter, 1)\n//             } else {\n//                 self.selected_tags.push(tag)\n//             }\n//         },\n","import { observer } from 'mobx-react-lite'\nimport { capitalize } from 'lodash-es'\nimport { IconClose } from '@/assets/icons'\nimport { type INoteSchema } from '../shared-services/types'\nimport { getNoteTags } from '../helpers/getNoteTags'\n\nexport const NoteTagsList: React.FC<{ note: INoteSchema; deleteAction?: (goal: string) => void }> = observer(\n    ({ note, deleteAction }) => {\n        const { noteTags } = getNoteTags(note.tag)\n\n        return (\n            <div className='scrollbar-thumb-blue-500/50 scrollbar-track-global-bg scrollbar-thin flex  min-h-[34px] flex-wrap gap-2 overflow-auto'>\n                {noteTags.map((tag) => (\n                    <div\n                        key={tag}\n                        className='animate-opacity-5 relative flex w-fit cursor-default rounded-md font-bold  text-cText opacity-70'\n                    >\n                        <span className='p-1'> #{capitalize(tag.trim())}</span>\n                        {deleteAction && (\n                            <IconClose\n                                className={`flex h-full cursor-pointer items-center justify-center rounded-r-md text-red-500`}\n                                onClick={() => deleteAction?.(tag)}\n                            />\n                        )}\n                    </div>\n                ))}\n            </div>\n        )\n    },\n)\n","import { graphql } from '@/api/tada'\n\nexport const noteResponseFr = graphql(`\n    fragment NoteResponseFr on notes @_unmask {\n        id\n        description\n        tag\n        created_at\n        deleted_at\n        is_favorite\n        archived\n        label_id\n        label {\n            name\n        }\n    }\n`)\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { type INoteSchema, noteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from './fragments/noteResponseFr'\n\nexport const mutation_updateNoteIsFavorite = async ({\n    id,\n    isFavorite,\n}: {\n    id: string\n    isFavorite: boolean\n}): Promise<INoteSchema | undefined> => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                mutation mutation_updateNoteIsFavorite($id: uuid!, $isFavorite: Boolean!) {\n                    update_notes_by_pk(pk_columns: { id: $id }, _set: { is_favorite: $isFavorite }) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, { id, isFavorite })\n\n        return noteSchema.parse(data.update_notes_by_pk)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useQueryClient } from '@tanstack/react-query'\nimport { useLocation } from 'react-router-dom'\nimport { type INoteStatus } from '../shared-services/types'\n\nexport const useInvalidateNotes = () => {\n    const queryClient = useQueryClient()\n    const location = useLocation()\n\n    const onSuccess = () => {\n        const queryFilter: INoteStatus = location.state?.filter\n\n        queryClient.invalidateQueries({\n            predicate: (query) => {\n                const queryKey = query.queryKey\n                return (\n                    (queryKey[1] === 'useFetchNotes' && queryKey[2] === 5 && queryKey[3] === queryFilter) ||\n                    queryKey[1] === 'useFetchNote'\n                )\n            },\n        })\n\n        /* dashboard counter */\n        queryClient.invalidateQueries({\n            predicate: (query) => {\n                const queryKey = query.queryKey\n                return queryKey[1] === 'useFetchArtifactsCount'\n            },\n        })\n    }\n\n    return { onSuccess }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { mutation_updateNoteIsFavorite } from '../../shared-services/mutation_updateNoteIsFavorite'\nimport { useInvalidateNotes } from '@/modules/notes/shared-hooks/useInvalidateNotes'\nimport { useNoteEditor$ } from '@/modules/notes/components/note-editor-dialog/stores/note-editor-store/useNoteEditor.store'\nimport { editorMode } from '@/modules/notes/components/note-editor-dialog/stores/note-editor-store/types'\n\nexport const useUpdateNoteIsFavorite = () => {\n    const { onSuccess } = useInvalidateNotes()\n    const { store, editMode, setStore } = useNoteEditor$()\n\n    const mutation = useMutation({\n        mutationFn: ({ id, isFavorite }: { id: string; isFavorite: boolean }) =>\n            mutation_updateNoteIsFavorite({ id, isFavorite }),\n        onSuccess: (res) => {\n            if (store.open && editMode && res) {\n                setStore({ id: res.id, open: true, editorMode: editorMode.edit })\n            }\n\n            onSuccess()\n        },\n    })\n\n    const toggleFavorite = ({ id, isFavorite }: { id: string; isFavorite: boolean }) => {\n        mutation.mutate({ id, isFavorite })\n    }\n\n    return { toggleFavorite }\n}\n","import { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconHeart } from '@/assets/icons/IconHeart'\nimport { type ReactNode } from 'react'\nimport { useUpdateNoteIsFavorite } from './useUpdateNoteIsFavorite'\n\nexport const NoteIsFavorite: React.FC<{ id: string; isFavorite: boolean; label?: ReactNode }> = ({\n    id,\n    isFavorite,\n    label,\n}) => {\n    const { toggleFavorite } = useUpdateNoteIsFavorite()\n\n    return (\n        <>\n            <StyledButton\n                id='toggleFavoriteNote'\n                error={!!isFavorite}\n                variant={isFavorite ? 'contained' : 'text'}\n                size={'small'}\n                onClick={() => toggleFavorite({ id, isFavorite: !isFavorite })}\n                startIcon={<IconHeart className='mb-0.5 h-6 w-6 opacity-70 hover:opacity-100' />}\n            >\n                {label}\n            </StyledButton>\n            {!label && <XTooltip anchorSelect='#toggleFavoriteNote'>{isFavorite ? 'Unfavorite' : 'Favorite'}</XTooltip>}\n        </>\n    )\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { type INoteSchema, noteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from './fragments/noteResponseFr'\n\nexport const mutation_updateNoteIsArchived = async ({\n    id,\n    isArchived,\n}: {\n    id: string\n    isArchived: boolean\n}): Promise<INoteSchema | undefined> => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                mutation mutation_updateNoteIsArchived($id: uuid!, $isArchived: Boolean!) {\n                    update_notes_by_pk(pk_columns: { id: $id }, _set: { archived: $isArchived }) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, { id, isArchived })\n\n        return noteSchema.parse(data.update_notes_by_pk)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { useInvalidateNotes } from '@/modules/notes/shared-hooks/useInvalidateNotes'\nimport { useNoteEditor$ } from '@/modules/notes/components/note-editor-dialog/stores/note-editor-store/useNoteEditor.store'\nimport { editorMode } from '@/modules/notes/components/note-editor-dialog/stores/note-editor-store/types'\nimport { mutation_updateNoteIsArchived } from '../../shared-services/mutation_updateNoteIsArchived'\n\nexport const useUpdateNoteIsArchived = () => {\n    const { onSuccess } = useInvalidateNotes()\n    const { store, editMode, setStore } = useNoteEditor$()\n\n    const mutation = useMutation({\n        mutationFn: ({ id, isArchived }: { id: string; isArchived: boolean }) =>\n            mutation_updateNoteIsArchived({ id, isArchived }),\n        onSuccess: (res) => {\n            if (store.open && editMode && res) {\n                setStore({ id: res.id, open: true, editorMode: editorMode.edit })\n            }\n\n            onSuccess()\n        },\n    })\n\n    const toggleArchived = ({ id, isArchived }: { id: string; isArchived: boolean }) => {\n        mutation.mutate({ id, isArchived })\n    }\n\n    return { toggleArchived }\n}\n","import { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { type ReactNode } from 'react'\nimport { useUpdateNoteIsArchived } from './useUpdateNoteIsArchived'\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { cn } from '@/helpers/cn'\n\nexport const NoteIsArchived: React.FC<{ id: string; isArchived: boolean; label?: ReactNode }> = ({\n    id,\n    isArchived,\n    label,\n}) => {\n    const { toggleArchived } = useUpdateNoteIsArchived()\n\n    return (\n        <>\n            <StyledButton\n                id='toggleArchiveNote'\n                variant={isArchived ? 'contained' : 'text'}\n                size={'small'}\n                onClick={() => toggleArchived({ id, isArchived: !isArchived })}\n                className={cn(isArchived && '!bg-violet-600')}\n                startIcon={<IconArchive className='mb-0.5 h-6 w-6 opacity-70 hover:opacity-100' />}\n            >\n                {label}\n            </StyledButton>\n            {!label && <XTooltip anchorSelect='#toggleArchiveNote'>{isArchived ? 'Unarchive' : 'Archive'}</XTooltip>}\n        </>\n    )\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { type INoteSchema, noteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from './fragments/noteResponseFr'\n\nexport const mutation_updateNoteDeletedAt = async ({\n    id,\n    deletedAt,\n}: {\n    id: string\n    deletedAt: string | null\n}): Promise<INoteSchema | undefined> => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                mutation mutation_updateNoteDeletedAt($id: uuid!, $deletedAt: timestamptz) {\n                    update_notes_by_pk(pk_columns: { id: $id }, _set: { deleted_at: $deletedAt }) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, { id, deletedAt })\n\n        return noteSchema.parse(data.update_notes_by_pk)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { mutation_updateNoteDeletedAt } from '../../shared-services/mutation_updateNoteDeletedAt'\nimport { goalEditorMode } from '@/modules/goals/components/goal-editor-dialog/stores/goal-editor-store/types'\nimport { useNoteEditor$ } from '../../components/note-editor-dialog/stores/note-editor-store/useNoteEditor.store'\nimport { useInvalidateNotes } from '../../shared-hooks/useInvalidateNotes'\n\nexport const useUpdateNoteDeletedAt = () => {\n    const { onSuccess } = useInvalidateNotes()\n    const { store, editMode, setStore: setState } = useNoteEditor$()\n\n    const mutation = useMutation({\n        mutationFn: ({ id, deletedAt }: { id: string; deletedAt: null | string }) =>\n            mutation_updateNoteDeletedAt({ id, deletedAt }),\n        onSuccess: (res) => {\n            if (store.open && editMode && res) {\n                setState({ id: res.id, open: true, editorMode: goalEditorMode.edit })\n            }\n\n            onSuccess()\n        },\n    })\n\n    const updateNoteDeletedAt = ({ id, deletedAt }: { id: string; deletedAt: null | string }) => {\n        mutation.mutate({ id, deletedAt })\n    }\n\n    return { updateNoteDeletedAt }\n}\n","import { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconDeleteTemp } from '@/assets/icons/IconDeleteTemp'\nimport { type ReactNode } from 'react'\nimport { useUpdateNoteDeletedAt } from './useUpdateNoteDeletedAt'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\n\nexport const NoteIsDeleted: React.FC<{ id: string; deletedAt: boolean; label?: ReactNode }> = ({\n    id,\n    deletedAt,\n    label,\n}) => {\n    const { updateNoteDeletedAt } = useUpdateNoteDeletedAt()\n\n    return (\n        <>\n            <StyledButton\n                id='toggleMoveNoteToBin'\n                size={'small'}\n                error={!!deletedAt}\n                variant={'text'}\n                onClick={() => updateNoteDeletedAt({ id, deletedAt: !!deletedAt ? null : formatDateWithTimezone() })}\n                startIcon={<IconDeleteTemp width={24} height={24} className='h-6 w-6 opacity-70 hover:opacity-100' />}\n            >\n                {label}\n            </StyledButton>\n            {!label && <XTooltip anchorSelect='#toggleMoveNoteToBin'>{deletedAt ? 'Restore' : 'Move to bin'}</XTooltip>}\n        </>\n    )\n}\n","import { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { IconEdit } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { useNoteEditor$ } from '../../../note-editor-dialog/stores/note-editor-store/useNoteEditor.store'\nimport { editorMode } from '../../../note-editor-dialog/stores/note-editor-store/types'\nimport { NoteIsFavorite } from '@/modules/notes/shared-components/note-is-favorite/NoteIsFavorite'\nimport { NoteIsArchived } from '@/modules/notes/shared-components/note-is-archived/NoteIsArchived'\nimport { NoteIsDeleted } from '@/modules/notes/shared-components/note-is-deleted/NoteIsDeleted'\n\nexport const NoteContextMenu: React.FC<{ onClose: () => void; note: INoteSchema }> = ({ onClose, note }) => {\n    const { setStore } = useNoteEditor$()\n\n    return (\n        <XMenuDropdown>\n            <XMenuItem>\n                <NoteIsFavorite\n                    id={note.id}\n                    isFavorite={!!note.is_favorite}\n                    label={\n                        <span className='flex w-[110px] justify-start capitalize'>\n                            {note.is_favorite ? 'Unfavorite' : 'Favorite'}\n                        </span>\n                    }\n                />\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    setStore({ editorMode: editorMode.edit, id: note.id, open: true })\n                    onClose()\n                }}\n            >\n                <StyledButton variant='text' size='small' startIcon={<IconEdit width={24} height={24} />}>\n                    <span className='flex w-[110px] justify-start capitalize'>Edit</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem>\n                <NoteIsArchived\n                    id={note.id}\n                    isArchived={!!note.archived}\n                    label={\n                        <span className='flex w-[110px] justify-start capitalize'>\n                            {note.archived ? 'Unarchive' : 'Archive'}\n                        </span>\n                    }\n                />\n            </XMenuItem>\n            <XMenuItem>\n                <NoteIsDeleted\n                    id={note.id}\n                    deletedAt={!!note.deleted_at}\n                    label={\n                        <span className='flex w-[110px] justify-start capitalize'>\n                            {note.deleted_at ? 'Restore' : 'Move to bin'}\n                        </span>\n                    }\n                />\n            </XMenuItem>\n        </XMenuDropdown>\n    )\n}\n","import { IconFolder } from '@/assets/icons'\nimport { cn } from '@/helpers/cn'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\n\nexport const NoteLabel: React.FC<{ note: INoteSchema }> = ({ note }) => {\n    if (!note?.label?.name) return null\n    return (\n        <div className='flex w-full items-center gap-2 opacity-70 '>\n            <IconFolder className={cn('w-5 h-5', !note?.label?.name && 'opacity-0')} />\n            <span className='capitalize font-bold'>{note?.label?.name}</span>\n        </div>\n    )\n}\n","import { IconDeleteTemp, IconHeart } from '@/assets/icons'\nimport { IconArchive } from '@/assets/icons/IconArchive'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\n\nexport const NoteStatus: React.FC<{ note: INoteSchema }> = ({ note }) => {\n    return (\n        <div className='flex gap items-center self-end justify-end w-full'>\n            {note.is_favorite && (\n                <StyledButton\n                    className='!pointer-events-none'\n                    size='small'\n                    variant='text'\n                    startIcon={<IconHeart width={24} height={24} className='text-rose-500' />}\n                />\n            )}\n            {note.archived && (\n                <StyledButton\n                    className='!pointer-events-none'\n                    size='small'\n                    variant='text'\n                    startIcon={<IconArchive width={24} height={24} className='text-violet-600' />}\n                />\n            )}\n            {note.deleted_at && (\n                <StyledButton\n                    className='!pointer-events-none'\n                    size='small'\n                    variant='text'\n                    startIcon={<IconDeleteTemp width={24} height={24} className='text-gray-700 ' />}\n                />\n            )}\n        </div>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport { format } from 'date-fns'\nimport { NoteTagsList } from '../../../../shared-components/NoteTagsList'\nimport { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { useTogglePopoverState } from '@/hooks/useTogglePopoverState.hook'\nimport { NoteContextMenu } from './NoteContextMenu'\nimport { cn } from '@/helpers/cn'\nimport { MEDIA_QUERY_VALUES_ENUM } from '@/hooks/useMatchMedia.hook'\nimport { type INoteSchema } from '../../../../shared-services/types'\nimport { XTiptap } from '@/components-x/x-tiptap/XTiptap'\nimport { NoteLabel } from './components/NoteLabel'\nimport { NoteStatus } from './components/NoteStatus'\n\nexport const Note: React.FC<{ note: INoteSchema; isMobile: MEDIA_QUERY_VALUES_ENUM }> = observer(\n    ({ note, isMobile }) => {\n        const { popoverState, setPopoverState } = useTogglePopoverState()\n\n        return (\n            <div className='relative'>\n                <XDropdown\n                    open={popoverState}\n                    onOpenChange={() => {\n                        setPopoverState(!popoverState)\n                    }}\n                    trigger={['contextMenu', isMobile && 'click']}\n                    dropdownRender={() => <NoteContextMenu onClose={() => setPopoverState(false)} note={note} />}\n                >\n                    <div\n                        className={cn(\n                            `bg-global-2-bg flex w-[calc(100%-40px)] max-w-[600px] flex-col gap-5\n                    overflow-auto rounded-lg p-5 hover:scale-105 duration-300 shadow-[rgba(0,_0,_0,_0.24)_0px_3px_8px]`,\n                        )}\n                        onContextMenu={() => {\n                            setPopoverState(!popoverState)\n                        }}\n                        key={note.id}\n                    >\n                        <div className='flex justify-between items-center'>\n                            <NoteLabel note={note} />\n                            <NoteStatus note={note} />\n                        </div>\n                        {note.created_at && (\n                            <div className='flex justify-between items-center min-h-10'>\n                                {!!note.tag && <NoteTagsList note={note} />}\n                            </div>\n                        )}\n\n                        <XTiptap key={note.description} isLoading={false} content={note.description} readonly={true} />\n\n                        {note.created_at && (\n                            <div className='text-xs opacity-80 font-semibold cursor-default text-cText'>\n                                {format(note.created_at, 'dd MMMM yyyy')}\n                            </div>\n                        )}\n                    </div>\n                </XDropdown>\n            </div>\n        )\n    },\n)\n","import { compact, uniq } from 'lodash-es'\nimport { type INoteSchema } from '../shared-services/types'\nimport { format } from 'date-fns'\nimport { convertStringDate } from '@/helpers/date.helpers'\n\nexport const filteredNotesFabric = (\n    notes: INoteSchema[] = [],\n): {\n    timeFrame: string[]\n    filteredNotes: (tp: string) => INoteSchema[]\n} => {\n    const timeFrame = compact(\n        uniq(notes.map((note) => note.created_at && format(convertStringDate(note.created_at), 'yyyy'))),\n    )\n\n    const filteredNotes = (timeFrame: string) => {\n        return notes.filter(\n            (note) => note.created_at && format(convertStringDate(note.created_at), 'yyyy') === timeFrame,\n        )\n    }\n\n    return {\n        timeFrame,\n        filteredNotes,\n    }\n}\n","import { notesResponseSchema } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from '../fragments/noteResponseFr'\n\nexport const query_favoriteNotes = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<INoteSchema[] | undefined> => {\n    const { limit, serverSearchInput, offset, label } = props\n\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_favoriteNotes(\n                    $serverSearchInput: String!\n                    $limit: Int!\n                    $offset: Int\n                    $label_id: uuid_comparison_exp\n                ) {\n                    notes(\n                        limit: $limit\n                        offset: $offset\n                        order_by: [{ created_at: desc }, { description: asc }]\n                        where: {\n                            _and: [\n                                { is_favorite: { _eq: true } }\n                                { deleted_at: { _is_null: true } }\n                                { label_id: $label_id }\n                                {\n                                    _or: [\n                                        { description: { _ilike: $serverSearchInput } }\n                                        { tag: { _ilike: $serverSearchInput } }\n                                    ]\n                                }\n                            ]\n                        }\n                    ) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const res = await client.request(query, {\n            limit,\n            serverSearchInput: `%${serverSearchInput}%`,\n            offset,\n            label_id: label ? { _eq: label } : {},\n        })\n        return notesResponseSchema.parse(res).notes\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { notesResponseSchema } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from '../fragments/noteResponseFr'\n\nexport const query_activeNotes = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<INoteSchema[] | undefined> => {\n    try {\n        const { limit, serverSearchInput, offset, label } = props\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_activeNotes(\n                    $serverSearchInput: String!\n                    $limit: Int!\n                    $offset: Int\n                    $label_id: uuid_comparison_exp\n                ) {\n                    notes(\n                        limit: $limit\n                        offset: $offset\n                        order_by: [{ created_at: desc }, { description: asc }]\n                        where: {\n                            _and: [\n                                { deleted_at: { _is_null: true } }\n                                { archived: { _eq: false } }\n                                { label_id: $label_id }\n                                {\n                                    _or: [\n                                        { description: { _ilike: $serverSearchInput } }\n                                        { tag: { _ilike: $serverSearchInput } }\n                                    ]\n                                }\n                            ]\n                        }\n                    ) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, {\n            serverSearchInput: `%${serverSearchInput}%`,\n            limit,\n            offset,\n            label_id: label ? { _eq: label } : {},\n        })\n\n        return notesResponseSchema.parse(data).notes\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { notesResponseSchema } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from '../fragments/noteResponseFr'\n\nexport const query_archivedNotes = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<INoteSchema[] | undefined> => {\n    try {\n        const { limit, serverSearchInput, offset, label } = props\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_archivedNotes(\n                    $serverSearchInput: String!\n                    $limit: Int!\n                    $offset: Int\n                    $label_id: uuid_comparison_exp\n                ) {\n                    notes(\n                        limit: $limit\n                        offset: $offset\n                        order_by: [{ created_at: desc }, { description: asc }]\n                        where: {\n                            _and: [\n                                { deleted_at: { _is_null: true } }\n                                { archived: { _eq: true } }\n                                { label_id: $label_id }\n                                {\n                                    _or: [\n                                        { description: { _ilike: $serverSearchInput } }\n                                        { tag: { _ilike: $serverSearchInput } }\n                                    ]\n                                }\n                            ]\n                        }\n                    ) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, {\n            serverSearchInput: `%${serverSearchInput}%`,\n            limit,\n            offset,\n            label_id: label ? { _eq: label } : {},\n        })\n\n        return notesResponseSchema.parse(data).notes\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { notesResponseSchema } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from '../fragments/noteResponseFr'\n\nexport const query_deletedNotes = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<INoteSchema[] | undefined> => {\n    try {\n        const { limit, serverSearchInput, offset, label } = props\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_deletedNotes(\n                    $serverSearchInput: String!\n                    $limit: Int!\n                    $offset: Int\n                    $label_id: uuid_comparison_exp\n                ) {\n                    notes(\n                        limit: $limit\n                        offset: $offset\n                        order_by: [{ created_at: desc }, { description: asc }]\n                        where: {\n                            _and: [\n                                { deleted_at: { _is_null: false } }\n                                { label_id: $label_id }\n                                {\n                                    _or: [\n                                        { description: { _ilike: $serverSearchInput } }\n                                        { tag: { _ilike: $serverSearchInput } }\n                                    ]\n                                }\n                            ]\n                        }\n                    ) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, {\n            serverSearchInput: `%${serverSearchInput}%`,\n            limit,\n            offset,\n            label_id: label ? { _eq: label } : {},\n        })\n\n        return notesResponseSchema.parse(data).notes\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { notesResponseSchema } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from '../fragments/noteResponseFr'\n\nexport const query_allNotes = async (props: {\n    userId: string\n    serverSearchInput: string\n    limit: number\n    offset?: number\n    label?: string\n}): Promise<INoteSchema[] | undefined> => {\n    try {\n        const { limit, serverSearchInput, offset, label } = props\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_allNotes(\n                    $serverSearchInput: String!\n                    $limit: Int!\n                    $offset: Int\n                    $label_id: uuid_comparison_exp\n                ) {\n                    notes(\n                        limit: $limit\n                        offset: $offset\n                        order_by: [{ created_at: desc }, { description: asc }]\n                        where: {\n                            _and: [\n                                { label_id: $label_id }\n                                {\n                                    _or: [\n                                        { description: { _ilike: $serverSearchInput } }\n                                        { tag: { _ilike: $serverSearchInput } }\n                                    ]\n                                }\n                            ]\n                        }\n                    ) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, {\n            serverSearchInput: `%${serverSearchInput}%`,\n            limit,\n            offset,\n            label_id: label ? { _eq: label } : {},\n        })\n\n        return notesResponseSchema.parse(data).notes\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useInfiniteQuery } from '@tanstack/react-query'\nimport { compact, flatten, last, uniqWith } from 'lodash-es'\nimport { useUser$ } from '@/modules/app/mst/StoreProvider'\nimport { type INoteSchema, type INoteStatus, noteStatus } from '@/modules/notes/shared-services/types'\nimport { notesKeys } from '../keys'\nimport { query_favoriteNotes } from './query_favoriteNotes'\nimport { query_activeNotes } from './query_activeNotes'\nimport { query_archivedNotes } from './query_archivedNotes'\nimport { query_deletedNotes } from './query_deletedNotes'\nimport { query_allNotes } from './query_allNotes'\n\nexport const useFetchNotes = (props: {\n    queryFilter: INoteStatus\n    limit: number\n    serverSearchInput: string\n    label?: string\n}) => {\n    const { queryFilter = noteStatus.active, limit = 20, serverSearchInput = '', label } = props\n    const { id: userId } = useUser$()\n\n    const { data, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage, isLoading } = useInfiniteQuery({\n        queryKey: notesKeys.useFetchNotes(limit, queryFilter, serverSearchInput, userId, label),\n        queryFn: async (props) => {\n            const offset = props.pageParam\n            const nextCursor = props.pageParam + 5\n            let data: INoteSchema[] | undefined = []\n\n            if (queryFilter === noteStatus.all) {\n                data = await query_allNotes({ userId, limit, offset, serverSearchInput, label })\n            }\n\n            if (queryFilter === noteStatus.favorite) {\n                data = await query_favoriteNotes({ userId, limit, offset, serverSearchInput, label })\n            }\n            if (queryFilter === noteStatus.active) {\n                data = await query_activeNotes({ userId, limit, offset, serverSearchInput, label })\n            }\n\n            if (queryFilter === noteStatus.archived) {\n                data = await query_archivedNotes({ userId, limit, offset, serverSearchInput, label })\n            }\n            if (queryFilter === noteStatus.deleted) {\n                data = await query_deletedNotes({ userId, limit, offset, serverSearchInput, label })\n            }\n            return { data, nextCursor }\n        },\n        initialPageParam: 0,\n        getNextPageParam: (lastPage, pages) => {\n            return last(pages)?.data?.length ? lastPage?.nextCursor : undefined\n        },\n\n        staleTime: 1000,\n        refetchOnWindowFocus: false,\n        refetchOnMount: true,\n        enabled: !!userId,\n    })\n\n    const notes = uniqWith(compact(flatten(data?.pages.map((page) => page.data))), (a, b) => a.id === b.id)\n    return {\n        isFetching,\n        fetchNextPage,\n        isFetchingNextPage,\n        hasNextPage,\n        isLoading,\n        notes: notes || [],\n    }\n}\n","import React, { useEffect } from 'react'\nimport { useInView } from 'react-intersection-observer'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { Note } from './note/Note'\nimport { useWindowMatchMedia } from '@/hooks/useMatchMedia.hook'\nimport { filteredNotesFabric } from '@/modules/notes/helpers/filteredNotesFabric'\nimport { useFetchNotes } from '../../../shared-services/fetch-notes/useFetchNotes'\nimport { type INoteStatus } from '@/modules/notes/shared-services/types'\nimport { XSkeleton } from '@/components-x/x-skeleton/XSkeleton'\nimport { useNotes$ } from '../mst/provider'\nimport { observer } from 'mobx-react-lite'\nimport { useLocation } from 'react-router-dom'\n\nexport const NotesList: React.FC<{ queryFilter: INoteStatus }> = observer(({ queryFilter }) => {\n    const location = useLocation()\n    const label: string = location.state?.label\n    const { serverSearchInput } = useNotes$()\n    const { isMobile } = useWindowMatchMedia(['isMobile'])\n    const { isLoading, notes, fetchNextPage, hasNextPage, isFetching } = useFetchNotes({\n        queryFilter,\n        // very important to set this limit also for invalidation\n        limit: 5,\n        serverSearchInput,\n        label,\n    })\n\n    const { ref, inView } = useInView()\n\n    useEffect(() => {\n        !isLoading && inView && hasNextPage && fetchNextPage()\n    }, [inView, hasNextPage])\n\n    const { filteredNotes, timeFrame } = filteredNotesFabric(notes)\n\n    return (\n        <div className='animate-opacity-3 mx-auto flex w-full flex-col gap-5'>\n            {isLoading ? (\n                <XSkeleton length={20} />\n            ) : (\n                timeFrame.map((tp) => {\n                    const renderNotes = filteredNotes(tp)\n                    return renderNotes.length ? (\n                        <React.Fragment key={tp}>\n                            <div>\n                                {tp && (\n                                    <div className='flex gap-1'>\n                                        <FormLabel title={tp} />\n                                    </div>\n                                )}\n                            </div>\n\n                            <div className='flex flex-col gap-10'>\n                                {renderNotes.map((note) => {\n                                    return <Note key={note.id} note={note} isMobile={isMobile} />\n                                })}\n                            </div>\n                        </React.Fragment>\n                    ) : null\n                })\n            )}\n\n            <div ref={ref} className='flex relative w-full flex-col gap-5 justify-center'>\n                {isFetching && <XSkeleton length={2} />}\n            </div>\n        </div>\n    )\n})\n","import { ModuleWrapper } from '@/components/ModuleWrapper'\nimport { useLocation } from 'react-router-dom'\nimport { NotesHeader } from './components/notes-header/NotesHeader'\nimport { Suspense } from 'react'\nimport NoteEditorDialog from '../note-editor-dialog/NoteEditorDialog'\nimport { NotesList } from './components/NotesCards'\nimport { type INoteStatus } from '../../shared-services/types'\nimport { Notes$Provider, notes$ } from './mst/provider'\nimport { NoteEditorDialog$Provider, noteEditorDialog$ } from '../note-editor-dialog/mst/provider'\n\nexport const NotesByFilterIndex: React.FC = () => {\n    const location = useLocation()\n    const queryFilter: INoteStatus = location.state?.filter\n\n    return (\n        <ModuleWrapper>\n            <Suspense fallback={null}>\n                <NoteEditorDialog$Provider store={noteEditorDialog$}>\n                    <NoteEditorDialog />\n                </NoteEditorDialog$Provider>\n            </Suspense>\n            <Notes$Provider store={notes$}>\n                <div className='flex flex-col gap-10 w-full max-w-[600px] mx-auto relative'>\n                    <NotesHeader />\n                    <NotesList key={queryFilter} queryFilter={queryFilter} />\n                </div>\n            </Notes$Provider>\n        </ModuleWrapper>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport const useRestoreNoteModuleParams = () => {\n    const location = useLocation()\n    const [data, setData] = useState<{ params: string; filter: string; label: string }>({\n        params: '',\n        filter: '',\n        label: '',\n    })\n\n    useEffect(() => {\n        // Save the current URL to localStorage every time it changes\n        const currentPath = localStorage.getItem('notes-module-restore-url')\n\n        const params = currentPath?.split('?')?.[1] || 'filter=active'\n        const regex = /filter=([^&]+)(?:.*label=([^&]+))?/\n        const matches = params.match(regex)\n        const filter = matches?.[1] || ''\n        const label = matches?.[2] || ''\n        setData({ params, filter, label })\n    }, [])\n\n    return { location, ...data }\n}\n","import { observer } from 'mobx-react-lite'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport { NotesByFilterIndex } from './NotesByFilterIndex'\nimport { useEffect } from 'react'\nimport { useRestoreNoteModuleParams } from './hooks/useRestoreNoteModuleParams'\n\nconst NotesCmsIndex: React.FC = observer(function NotesIndex() {\n    const { location, params, filter, label } = useRestoreNoteModuleParams()\n\n    useEffect(() => {\n        if (params && location.pathname.includes('notes/filtered-notes')) {\n            localStorage.setItem('notes-module-restore-url', location.pathname + location.search)\n        }\n    }, [location])\n\n    return params ? (\n        <Routes>\n            <Route path={'/'} element={<Navigate to={`/notes/filtered-notes?${params}`} state={{ filter, label }} />} />\n            <Route path='filtered-notes' element={<NotesByFilterIndex />} />\n        </Routes>\n    ) : null\n})\n\nexport default NotesCmsIndex\n"],"file":"assets/NotesCmsIndex-DAZ2lV8l.js"}