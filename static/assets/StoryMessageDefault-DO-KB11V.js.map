{"version":3,"file":"StoryMessageDefault-DO-KB11V.js","sources":["../../src/modules/stories/components/story-maker/components/story-message/story-message-default/components/StoryMessageAvatar.tsx","../../src/modules/stories/components/story-maker/components/story-message/story-message-default/components/StoryMessageDropdownRender.tsx","../../src/modules/stories/components/story-maker/components/story-message/story-message-default/StoryMessageDefault.tsx"],"sourcesContent":["import { IconAvatar } from '@/assets/icons/IconAvatar'\nimport { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport type { IStoryMessage } from '@/modules/stories/services/types'\n\nexport const StoryMessageAvatar: React.FC<{ message: IStoryMessage }> = ({ message }) => {\n    if (!message.story?.users?.length) return null\n\n    return (\n        <>\n            <div\n                id={`storyMessageAvatar-${message.id}`}\n                className='w-10 opacity-50 duration-300 group-hover:opacity-100 flex absolute -left-14 top-2 h-10 rounded-full shadow-xl items-center justify-center text-base'\n            >\n                {message.updated_by_user?.avatar ? (\n                    <img\n                        data-testid='image-avatar'\n                        alt={'avatar'}\n                        src={`${import.meta.env['VITE_FIRE_BUNNY_STORAGE']}/avatars/${message.updated_by_user?.avatar}`}\n                        className='w-full h-full rounded-full '\n                    />\n                ) : (\n                    <IconAvatar\n                        data-testid='icon-avatar'\n                        width={20}\n                        height={20}\n                        className='text-cText opacity-70 duration-300 '\n                    />\n                )}\n            </div>\n            <XTooltip anchorSelect={`#storyMessageAvatar-${message.id}`}>\n                {message.updated_by_user?.name || ''}\n            </XTooltip>\n        </>\n    )\n}\n","import { IconDeleteForever, IconEdit } from '@/assets/icons'\nimport { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { observer } from 'mobx-react-lite'\nimport type { IStoryMessage } from '@/modules/stories/services/types'\nimport { useStoryMaker$ } from '../../../../mst/provider'\nimport { useDeleteStoryMessage } from '../../../../service/useDeleteStoryMessage'\n\nexport const StoryMessageDropdownRender: React.FC<{ message: IStoryMessage; onClose: () => void }> = observer(\n    ({ message, onClose }) => {\n        const { onChangeField, editSelectedMessageId } = useStoryMaker$()\n        const { deleteStoryMessage } = useDeleteStoryMessage()\n        const isSelected = message.id === editSelectedMessageId\n\n        return (\n            <XMenuDropdown>\n                <XMenuItem\n                    onClick={() => {\n                        onChangeField('editSelectedMessageId', isSelected ? undefined : message.id)\n                        onClose()\n                    }}\n                >\n                    <StyledButton variant='text' size='small' startIcon={<IconEdit width={24} height={24} />}>\n                        <span className='flex w-[110px] justify-start capitalize'>{isSelected ? 'Save' : 'Edit'}</span>\n                    </StyledButton>\n                </XMenuItem>\n                <XMenuItem\n                    onClick={() => {\n                        deleteStoryMessage({ id: message.id })\n                        onClose()\n                    }}\n                >\n                    <StyledButton variant='text' size='small' startIcon={<IconDeleteForever width={24} height={24} />}>\n                        <span className='flex w-[110px] justify-start capitalize'>Delete</span>\n                    </StyledButton>\n                </XMenuItem>\n            </XMenuDropdown>\n        )\n    },\n)\n","import { XTiptap } from '@/components-x/x-tiptap/XTiptap'\nimport type { IStoryMessage } from '@/modules/stories/services/types'\nimport { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { observer } from 'mobx-react-lite'\nimport { useUuidFromPath } from '@/hooks/useUuidFromPath'\nimport { cast } from '@/helpers'\nimport { useQueryClient } from '@tanstack/react-query'\nimport { useTogglePopoverState } from '@/hooks/useTogglePopoverState.hook'\nimport { extractTextFromHtml } from '@/helpers/extractTextFromHtml'\nimport { notify } from '@/helpers/processMessage'\nimport { format } from 'date-fns'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { useStoryMaker$ } from '../../../mst/provider'\nimport { useSaveStoryMessage } from '../../../service/useSaveStoryMessage'\nimport { StoryMessageAvatar } from './components/StoryMessageAvatar'\nimport { storyMakerService } from '../../../service/storyMakerService'\nimport { StoryMessageDropdownRender } from './components/StoryMessageDropdownRender'\n\nconst StoryMessageDefault: React.FC<{ message: IStoryMessage }> = observer(({ message }) => {\n    const queryClient = useQueryClient()\n    const { popoverState, setPopoverState } = useTogglePopoverState()\n    const { onChangeField, editSelectedMessageId } = useStoryMaker$()\n    const { updateStoryMessage } = useSaveStoryMessage()\n    const { id } = useUuidFromPath()\n\n    if (!message.description) return null\n\n    const onClose = () => {\n        setPopoverState(false)\n    }\n\n    return (\n        <XDropdown\n            open={popoverState}\n            onOpenChange={() => {\n                setPopoverState(!popoverState)\n            }}\n            trigger={['contextMenu']}\n            dropdownRender={() => <StoryMessageDropdownRender message={message} onClose={onClose} />}\n        >\n            <div className='relative group px-2 py-4 duration-300 border-b-solid border-transparent hover:border-blue-500/10'>\n                {<StoryMessageAvatar message={message} />}\n                <div className='text-xs opacity-0 duration-300 group-hover:opacity-80 top-0 absolute  font-semibold font-kzen cursor-default text-cText'>\n                    {format(formatDateWithTimezone(new Date(message.updated_at)), 'dd MMMM yyyy HH:mm')}\n                </div>\n                <XTiptap\n                    onSave={({ html }) => {\n                        if (!extractTextFromHtml(html).trim().length) {\n                            notify('Type something')\n                            return\n                        }\n                        updateStoryMessage({\n                            description: html,\n                            id: cast(message.id),\n                            onSuccess: () => {\n                                onChangeField('editSelectedMessageId', undefined)\n                                queryClient.invalidateQueries({\n                                    queryKey: storyMakerService.useFetchStoryMessages(id),\n                                })\n                            },\n                        })\n                    }}\n                    readonly={message.id !== editSelectedMessageId}\n                    content={message.description}\n                    customToolbar={message.id === editSelectedMessageId}\n                />\n            </div>\n        </XDropdown>\n    )\n})\n\nexport default StoryMessageDefault\n"],"names":["StoryMessageAvatar","message","story","users","length","jsxs","Fragment","jsx","id","updated_by_user","avatar","IconAvatar","XTooltip","name","StoryMessageDropdownRender","observer","onClose","onChangeField","editSelectedMessageId","useStoryMaker$","deleteStoryMessage","useDeleteStoryMessage","isSelected","XMenuDropdown","XMenuItem","undefined","StyledButton","IconEdit","IconDeleteForever","StoryMessageDefault","queryClient","useQueryClient","popoverState","setPopoverState","useTogglePopoverState","updateStoryMessage","useSaveStoryMessage","useUuidFromPath","description","XDropdown","format","formatDateWithTimezone","Date","updated_at","XTiptap","html","extractTextFromHtml","trim","notify","cast","onSuccess","invalidateQueries","queryKey","storyMakerService","useFetchStoryMessages"],"mappings":"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"}