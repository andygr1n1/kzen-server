{"version":3,"file":"GoalEditor-C6Swp01r.js","sources":["../../src/assets/icons/IconSelect.tsx","../../src/modules/goals/components/goal-editor-dialog/service/query_fetchGoal.ts","../../src/modules/goals/components/goal-editor-dialog/service/useFetchGoal.ts","../../src/modules/goals/components/goal-editor-dialog/hooks/useGoalData.ts","../../src/modules/goals/components/goal-editor-dialog/hooks/useGoalEditorFormInitialValues.ts","../../src/modules/goals/components/goal-editor-dialog/service/upsert-goal/mutation_upsertGoal.ts","../../src/helpers/setGoalDifficulty.ts","../../src/modules/goals/components/goal-editor-dialog/service/upsert-goal/goalSnapshotOut.helper.ts","../../src/modules/goals/components/goal-editor-dialog/service/upsert-goal/useUpsertGoal.ts","../../src/modules/goals/components/goal-editor-dialog/hooks/on-submit/useViewModeSubmit.ts","../../src/modules/goals/components/goal-editor-dialog/hooks/on-submit/useGoalEditorFormOnSubmit.ts","../../src/modules/goals/components/goal-editor-dialog/hooks/useGoalEditorFormOnValidate.ts","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-toolbar/components/ToggleFavoriteNewGoal.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-toolbar/GoalEditorToolbar.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-details/GoalEditorDetails.tsx","../../src/modules/goals/components/goal-editor-dialog/stores/goal-ritual-store/types.ts","../../src/modules/goals/components/goal-editor-dialog/hooks/useInitGoalEditorForm.ts","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-submit/useGoalEditorFormSubmit.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-submit/GoalEditorFormSubmit.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/ActiveGoalCreatedAt.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/GoalCreatedAt.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/GoalDescriptionRichInput.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/GoalFinishCalendarInput.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/GoalSloganInput.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/goal-title-input/GoalTitleInput.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/goal-title-input/GoalTitleInputIndex.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-info/GoalInfo.tsx","../../src/components-x/x-select/useSelectDropdownClickOutside.hook.ts","../../src/components-x/x-select/XSelect.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-ritual/components/GoalRitualViewMode.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-ritual/components/goal-ritual-edit-mode/SelectDayOfWeek.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-ritual/components/goal-ritual-edit-mode/SelectDays.tsx","../../src/components-x/x-switch/XSwitch.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-ritual/components/goal-ritual-edit-mode/RitualTypeSwitch.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-ritual/components/goal-ritual-edit-mode/GoalRitualEditMode.tsx","../../src/modules/goals/components/goal-editor-dialog/stores/goal-ritual-store/useGoalRitual.store.ts","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-ritual/components/GoalRitualNewMode.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-ritual/GoalRitual.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-relation/GoalRelation.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-attachments/GoalAttachments.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/goal-story/GoalStory.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/hooks/useGoalEditorTabs.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/components/CompleteRitualGoal.tsx","../../src/modules/goals/components/goal-editor-dialog/components/goal-editor-tabs/GoalEditorTabs.tsx","../../src/modules/goals/components/goal-editor-dialog/components/GoalEditorForm.tsx","../../src/modules/goals/components/goal-editor-dialog/components/GoalEditor.tsx"],"sourcesContent":["import type { SVGProps } from 'react'\n\nexport function IconSelect(props: SVGProps<SVGSVGElement>) {\n    return (\n        <svg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' {...props}>\n            <path\n                fill='currentColor'\n                d='M12 4a1 1 0 0 1 .707.293l4 4a1 1 0 0 1-1.414 1.414L12 6.414L8.707 9.707a1 1 0 0 1-1.414-1.414l4-4A1 1 0 0 1 12 4M7.293 14.293a1 1 0 0 1 1.414 0L12 17.586l3.293-3.293a1 1 0 0 1 1.414 1.414l-4 4a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 0-1.414'\n            ></path>\n        </svg>\n    )\n}\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type IGoalSchema, goalSchema } from '@/modules/goals/shared-service'\nimport { goalResponseFr } from '@/modules/goals/shared-service/fragments/goalResponseFr'\nimport { graphql } from '@/api/tada'\n\nexport const query_fetchGoal = async (props: { goalId: string | null }): Promise<IGoalSchema | undefined> => {\n    try {\n        const { goalId } = props\n\n        if (!goalId) return\n\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_fetchGoal($goalId: uuid!) {\n                    goals_by_pk(id: $goalId) {\n                        ...GoalResponseFr\n                    }\n                }\n            `,\n            [goalResponseFr],\n        )\n\n        const res = await client.request(query, { goalId })\n\n        return goalSchema.parse(res.goals_by_pk)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useQuery } from '@tanstack/react-query'\nimport { KEY_FetchGoal } from './types'\nimport { query_fetchGoal } from './query_fetchGoal'\n\nexport const useFetchGoal = (props: { goalId: string | null }) => {\n    const { goalId } = props\n    const { isLoading, data } = useQuery({\n        queryKey: KEY_FetchGoal(goalId),\n        queryFn: async () => await query_fetchGoal({ goalId }),\n        staleTime: 1000,\n        refetchOnWindowFocus: true,\n        refetchOnMount: true,\n        enabled: !!goalId,\n    })\n\n    return {\n        isLoading,\n        data,\n    }\n}\n","import { useFetchGoal } from '../service/useFetchGoal'\nimport { useGoalEditor$ } from '../stores/goal-editor-store/useGoalEditor.store'\n\nexport const useGoalData = () => {\n    const { store: state } = useGoalEditor$()\n    const { isLoading, data } = useFetchGoal({ goalId: state.goalId })\n    return {\n        isLoading,\n        data,\n    }\n}\n","import { type IGoalSchema, goalStatusEnum } from '@/modules/goals/shared-service'\nimport { useGoalEditor$ } from '../stores/goal-editor-store/useGoalEditor.store.ts'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { useGoalData } from './useGoalData.ts'\n\nexport const useGoalEditorFormInitialValues = () => {\n    const { store } = useGoalEditor$()\n    const { isLoading, data } = useGoalData()\n    const initialValues: IGoalSchema = initialGoal({ parentGoalId: store.metadata?.parentGoalId })\n\n    return { store, initialValues: data || initialValues, isLoading, goalEditorMode: store.goalEditorMode }\n}\n\nconst initialGoal = (props: { parentGoalId?: string | null }) => ({\n    id: crypto.randomUUID(),\n    created_at: formatDateWithTimezone(),\n    deleted_at: null,\n    finished_at: formatDateWithTimezone(),\n    is_favorite: false,\n    title: '',\n    slogan: '',\n    description: '',\n    status: goalStatusEnum.active,\n    difficulty: '',\n    goal_ritual: null,\n    parent_goal_id: props.parentGoalId || null,\n})\n","import { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { type IGoalSchema, goalSchema } from '@/modules/goals/shared-service'\nimport { goalResponseFr } from '@/modules/goals/shared-service/fragments/goalResponseFr'\n\nexport const mutation_upsertGoal = async (props: { goal: IGoalSchema }) => {\n    try {\n        const client = await generateClient()\n        const { goal } = props\n\n        const { goal_ritual, ...rest } = goal\n\n        const goalRitualMutation = graphql(\n            `\n                mutation insert_goals_rituals_one($goal_ritual: goals_rituals_insert_input!) {\n                    insert_goals_rituals_one(\n                        object: $goal_ritual\n                        on_conflict: {\n                            constraint: goals_rituals_pkey\n                            update_columns: [ritual_interval, ritual_power, ritual_type]\n                        }\n                    ) {\n                        ritual_id\n                        goal_id\n                        ritual_power\n                        ritual_interval\n                        ritual_type\n                    }\n                }\n            `,\n            [goalResponseFr],\n        )\n\n        const goalMutation = graphql(\n            `\n                mutation mutation_upsertGoal($goal: goals_insert_input!) {\n                    insert_goals_one(\n                        object: $goal\n                        on_conflict: {\n                            constraint: goals_pkey\n                            update_columns: [title, description, slogan, finished_at, is_favorite]\n                        }\n                    ) {\n                        ...GoalResponseFr\n                    }\n                }\n            `,\n            [goalResponseFr],\n        )\n\n        goal.goal_ritual &&\n            (await client.request(goalRitualMutation, {\n                goal_ritual: { ...goal_ritual, goal_id: goal.id },\n            }))\n\n        const res = await client.request(goalMutation, {\n            goal: rest,\n        })\n\n        return goalSchema.parse(res.insert_goals_one)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { formatDistanceStrict } from 'date-fns'\nimport { DIFFICULTY_ENUM } from '../services/enums'\n\nexport const setGoalDifficulty = (finished_at: Date): DIFFICULTY_ENUM => {\n    const timeInMonths = Number(\n        formatDistanceStrict(finished_at, Date.now(), {\n            unit: 'month',\n            roundingMethod: 'ceil',\n        }).split(' ')[0],\n    )\n\n    if (timeInMonths <= 3) {\n        return DIFFICULTY_ENUM.LIGHT\n    } else if (timeInMonths <= 12) {\n        return DIFFICULTY_ENUM.MEDIUM\n    } else if (timeInMonths <= 36) {\n        return DIFFICULTY_ENUM.LEGEND\n    } else if (timeInMonths <= 60) {\n        return DIFFICULTY_ENUM.EPIC\n    } else if (timeInMonths <= 120) {\n        return DIFFICULTY_ENUM.STAR\n    } else if (timeInMonths <= 240) {\n        return DIFFICULTY_ENUM.FRIEND_OF_DEATH\n    } else if (timeInMonths <= 3600) {\n        return DIFFICULTY_ENUM.IMMORTAL\n    }\n\n    return DIFFICULTY_ENUM.IMMORTAL\n}\n","import { convertStringDate, formatDateWithTimezone, prepareFinishedAtForInsert } from '@/helpers/date.helpers'\nimport { setGoalDifficulty } from '@/helpers/setGoalDifficulty'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\n\nexport const goalSnapshotOut = (props: { goal: IGoalSchema }) => {\n    const { goal } = props\n    if (!goal.finished_at) goal.finished_at = formatDateWithTimezone()\n    goal.finished_at = prepareFinishedAtForInsert(goal.finished_at)\n    goal.difficulty = setGoalDifficulty(convertStringDate(goal.finished_at))\n    return props.goal\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { type IGoalSchema } from '../../../../shared-service/types'\nimport { mutation_upsertGoal } from './mutation_upsertGoal'\nimport { useInvalidateGoals } from '@/modules/goals/shared-hooks/useInvalidateGoals'\nimport { goalSnapshotOut } from './goalSnapshotOut.helper'\n\nexport const useUpsertGoal = () => {\n    const { onSuccess: onGoalMutationSuccess } = useInvalidateGoals()\n\n    const mutation = useMutation({\n        mutationFn: ({ goal }: { goal: IGoalSchema }) => {\n            return mutation_upsertGoal({ goal: goalSnapshotOut({ goal }) })\n        },\n        onSuccess: (res) => {\n            onGoalMutationSuccess(res)\n        },\n    })\n\n    const upsertGoal = (props: { goal: IGoalSchema; onSuccess?: () => void; onSettled?: () => void }) => {\n        mutation.mutate({ goal: props.goal }, { onSuccess: props.onSuccess, onSettled: props.onSettled })\n    }\n\n    return { upsertGoal }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type IGoalSchema, goalStatusEnum } from '@/modules/goals/shared-service'\nimport { isActiveGoalStatus, isActiveRitualStatus, isCompletedGoalStatus } from '@/modules/goals/helpers/goalsGuards'\nimport { useUpdateGoalStatus } from '../../service/update-goal-status/useUpdateGoalStatus.service'\nimport { useGoalEditor$ } from '../../stores/goal-editor-store/useGoalEditor.store'\nimport { useRitualizeGoal } from '../../service/ritualize-goal/useRitualizeGoal'\n\nexport const useViewModeSubmit = () => {\n    const { onCancel } = useGoalEditor$()\n    const { updateGoalStatus } = useUpdateGoalStatus()\n    const { ritualizeGoal } = useRitualizeGoal()\n\n    const onViewModeSubmit = (values: IGoalSchema, formikHelpers: FormikHelpers<IGoalSchema>) => {\n        const { setSubmitting } = formikHelpers\n        setSubmitting(false)\n        const isActiveRitual = isActiveRitualStatus(values)\n        const isActiveGoal = isActiveGoalStatus(values.status)\n        const isCompletedGoal = isCompletedGoalStatus(values.status)\n\n        if (isCompletedGoal) {\n            updateGoalStatus({\n                goal: values,\n                status: goalStatusEnum.active,\n                onSettled: () => {\n                    setSubmitting(false)\n                    onCancel()\n                },\n            })\n        } else if (isActiveRitual) {\n            ritualizeGoal({\n                goal: values,\n                onSettled: () => {\n                    setSubmitting(false)\n                    onCancel()\n                },\n            })\n        } else if (isActiveGoal)\n            updateGoalStatus({\n                goal: values,\n                status: goalStatusEnum.completed,\n                onSettled: () => {\n                    setSubmitting(false)\n                    onCancel()\n                },\n            })\n    }\n\n    return { onViewModeSubmit }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useGoalEditor$ } from '../../stores/goal-editor-store/useGoalEditor.store'\nimport { goalEditorMode } from '../../stores/goal-editor-store/types'\nimport { useUpsertGoal } from '../../service/upsert-goal/useUpsertGoal'\nimport { useViewModeSubmit } from './useViewModeSubmit'\n\nexport const useGoalEditorFormOnSubmit = () => {\n    const { viewMode, onCancel, store: state, setStore: setState } = useGoalEditor$()\n    const { onViewModeSubmit } = useViewModeSubmit()\n    const { upsertGoal } = useUpsertGoal()\n\n    const onSubmit = (values: IGoalSchema, formikHelpers: FormikHelpers<IGoalSchema>) => {\n        const { setSubmitting } = formikHelpers\n\n        if (viewMode) {\n            onViewModeSubmit(values, formikHelpers)\n        } else {\n            upsertGoal({\n                goal: values,\n                onSettled: () => {\n                    setSubmitting(false)\n                    if (state.metadata?.parentGoalId) {\n                        setState({\n                            goalId: state.metadata?.parentGoalId,\n                            goalEditorMode: state.metadata?.parentGoalEditorMode || goalEditorMode.view,\n                            open: true,\n                        })\n                    } else if (state.metadata?.viewModeRedirect) {\n                        setState({\n                            goalId: values.id,\n                            goalEditorMode: goalEditorMode.view,\n                            open: true,\n                        })\n                    } else {\n                        onCancel()\n                    }\n                },\n            })\n        }\n    }\n\n    return { onSubmit }\n}\n","import { type IGoalSchema, goalSchema } from '@/modules/goals/shared-service'\n\nexport const useGoalEditorFormOnValidate = () => {\n    const validate = (values: IGoalSchema) => {\n        const result = goalSchema.safeParse(values)\n        const errors: Partial<Record<keyof IGoalSchema, string>> = {}\n        if (!result.success) {\n            for (const issue of result.error.issues) {\n                const key = issue.path[0] as keyof IGoalSchema\n                errors[key] = issue.message\n            }\n        }\n\n        if (!values.title.length) {\n            errors.title = 'Required field'\n        }\n\n        return errors\n    }\n\n    return { validate }\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconHeart } from '@/assets/icons/IconHeart'\nimport { useFormikContext } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\n\nexport const ToggleFavoriteNewGoal = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const isFavorite = formikContext.values.is_favorite\n    return (\n        <>\n            <StyledButton\n                id='toggleFavoriteGoal'\n                error={!!isFavorite}\n                variant={isFavorite ? 'contained' : 'text'}\n                size={'small'}\n                onClick={() => {\n                    formikContext.setFieldValue('is_favorite', !isFavorite)\n                }}\n                startIcon={<IconHeart className='mb-0.5 h-6 w-6 opacity-70 hover:opacity-100' />}\n            />\n        </>\n    )\n}\n","import { ToggleEditGoal } from '../../../../shared-components/ToggleEditGoal'\nimport { GoalIsFavorite } from '../../../../shared-components/goal-is-favorite/GoalIsFavorite'\nimport { GoalDeletedAt } from '../../../../shared-components/goal-deleted-at/GoalDeletedAt'\nimport { CreateChildGoal } from '../../../../shared-components/CreateChildGoal'\nimport { ToggleFavoriteNewGoal } from './components/ToggleFavoriteNewGoal'\nimport { useGoalEditor$ } from '../../stores/goal-editor-store/useGoalEditor.store'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\n\nexport const GoalEditorToolbar = () => {\n    const { store: state, newMode, viewMode } = useGoalEditor$()\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    return (\n        <div className='relative flex w-full min-h-[32px] flex-wrap items-center justify-center gap-5'>\n            {state.goalId && <ToggleEditGoal goalId={state.goalId} />}\n            {!state.goalId || !viewMode ? (\n                <ToggleFavoriteNewGoal />\n            ) : (\n                <GoalIsFavorite goalId={state.goalId} isFavorite={!!formikContext.values.is_favorite} />\n            )}\n            {!newMode && <CreateChildGoal parentGoalId={state.goalId} />}\n            {state.goalId && <GoalDeletedAt goalId={state.goalId} deletedAt={!!formikContext.values.deleted_at} />}\n        </div>\n    )\n}\n","import { isCompletedGoalStatus } from '@/modules/goals/helpers/goalsGuards'\nimport {\n    calculateIsExpired,\n    calculateIsRitual,\n    calculateTotalRemainingDays,\n} from '@/modules/goals/helpers/optimizeActiveGoalsData'\nimport { IconExpired } from '@/assets/icons/IconExpired'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { IconInfinity } from '@/assets/icons/IconInfinity'\nimport { IconCompleted } from '@/assets/icons/IconCompleted'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\n\nexport const GoalEditorDetails = () => {\n    return (\n        <div className='animate-opacity-5 my-10 flex w-full items-center justify-center  gap-5 rounded-md'>\n            <GoalDaysUntilDeadline />\n            <GoalRitualCount />\n            <ImageByGoalType />\n        </div>\n    )\n}\n\nconst ImageByGoalType = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const isRitual = calculateIsRitual(formikContext.values)\n    const isExpired = calculateIsExpired(formikContext.values)\n    const _isCompleted = isCompletedGoalStatus(formikContext.values.status)\n\n    let goalIcon = <IconFocus className='h-[60px] w-[60px] text-blue-600' />\n    if (isExpired) {\n        goalIcon = <IconExpired className='h-[60px] w-[60px] text-amber-600' />\n    }\n    if (isRitual) {\n        goalIcon = <IconInfinity className='h-[60px] w-[60px] text-teal-700' />\n    }\n\n    if (_isCompleted) {\n        goalIcon = <IconCompleted className='h-[60px] w-[60px] text-rose-700' />\n    }\n\n    return <div className='flex items-center justify-center gap-5'>{goalIcon}</div>\n}\n\nconst GoalRitualCount = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const isRitual = calculateIsRitual(formikContext.values)\n\n    if (!isRitual) return null\n    const { goal_ritual } = formikContext.values\n\n    return (\n        <div className='flex flex-col items-center justify-center gap-2 '>\n            <div className='pl-2 font-extralight'>Power</div>\n            <div className='flex gap-5 text-3xl text-teal-600'>{goal_ritual?.ritual_power}</div>\n        </div>\n    )\n}\n\nconst GoalDaysUntilDeadline = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { status } = formikContext.values\n\n    const _totalRemainingDays = calculateTotalRemainingDays(formikContext.values)\n\n    if (isCompletedGoalStatus(status)) return null\n\n    return (\n        <div className='flex flex-col items-center justify-center gap-2 min-w-[100px] '>\n            <div className='pl-2 font-extralight'>Deadline</div>\n            <div className='flex gap-5 text-3xl text-blue-500'>\n                {_totalRemainingDays ? `${_totalRemainingDays} d` : 'Today'}\n            </div>\n        </div>\n    )\n}\n","import { z } from 'zod'\n\nexport const KEY_GoalRitualStore = () => ['KEY_GoalRitualStore']\n\nconst goalRitualStoreSchema = z.object({\n    ritualize: z.boolean().default(false),\n})\n\nexport type IGoalRitualSchema = z.infer<typeof goalRitualStoreSchema>\n","import { useFormikContext } from 'formik'\nimport { useGoalEditorFormInitialValues } from './useGoalEditorFormInitialValues'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useEffect } from 'react'\nimport { KEY_GoalRitualStore } from '../stores/goal-ritual-store/types'\nimport { useQueryClient } from '@tanstack/react-query'\n\nexport const useInitGoalEditorForm = () => {\n    const { initialValues, goalEditorMode, store } = useGoalEditorFormInitialValues()\n    const formikContext = useFormikContext<IGoalSchema>()\n    const queryClient = useQueryClient()\n\n    useEffect(() => {\n        if (!store.metadata?.preventRerender) {\n            queryClient.resetQueries({ queryKey: KEY_GoalRitualStore() })\n            formikContext.setFormikState((prevState) => ({\n                ...prevState,\n                values: initialValues,\n            }))\n        }\n    }, [goalEditorMode])\n}\n","import { isCompletedGoalStatus } from '@/modules/goals/helpers/goalsGuards'\nimport { calculateIsFromFuture } from '@/modules/goals/helpers/optimizeActiveGoalsData'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\nimport { useGoalEditor$ } from '../../stores/goal-editor-store/useGoalEditor.store'\n\nexport const useGoalEditorFormSubmit = () => {\n    const { viewMode } = useGoalEditor$()\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    if (!viewMode) return { OkText: 'Save', tooltipText: '', disabled: false, isSubmitting: formikContext.isSubmitting }\n\n    const isFromFuture = calculateIsFromFuture(formikContext.values)\n    const isCompleted = isCompletedGoalStatus(formikContext.values.status)\n\n    const deletedAt = !!formikContext.values.deleted_at\n\n    const isRitual = !!formikContext.values.goal_ritual\n    const futureRitual = !!isRitual && isFromFuture\n\n    const disabled = deletedAt || (!isCompleted && futureRitual)\n\n    let tooltipText = ''\n    let OkText = <>Complete</>\n\n    if (isRitual) {\n        OkText = <>Ritualize</>\n        tooltipText = 'Wait for estimation day'\n    }\n\n    if (deletedAt) {\n        tooltipText = 'Goal is deleted'\n    }\n\n    if (isCompleted) {\n        OkText = <>Reactivate</>\n    }\n\n    const OkComponent = <div className='flex items-center justify-center gap-2'>{OkText}</div>\n\n    return { OkText: OkComponent, tooltipText, disabled, isSubmitting: formikContext.isSubmitting }\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { useGoalEditorFormSubmit } from './useGoalEditorFormSubmit'\n\nexport const GoalEditorFormSubmit: React.FC = () => {\n    const { disabled, OkText, tooltipText, isSubmitting } = useGoalEditorFormSubmit()\n\n    return (\n        <div className='relative'>\n            <StyledButton\n                data-testid='submit-goal-editor-form'\n                variant='outlined'\n                type='submit'\n                disabled={disabled || isSubmitting}\n                size='small'\n                className='z-10'\n            >\n                {!isSubmitting ? OkText : <IconInfiniteLoading className='w-6 h-6' />}\n            </StyledButton>\n            {disabled && tooltipText && (\n                <div\n                    id='disabledTooltip'\n                    className='pointer-events-auto absolute left-0 top-0\n                    z-20 h-full w-full rounded-lg bg-transparent'\n                />\n            )}\n            {disabled && tooltipText && <XTooltip anchorSelect='#disabledTooltip'>{tooltipText}</XTooltip>}\n        </div>\n    )\n}\n","import { calculateCreatedDaysAgo } from '@/modules/goals/helpers/optimizeActiveGoalsData'\nimport { type IGoalSchema } from '@/modules/goals/shared-service/types'\nimport { useFormikContext } from 'formik'\n\nexport const ActiveGoalCreatedAt = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    const { created_at } = formikContext.values\n    const createdDaysAgo = calculateCreatedDaysAgo(formikContext.values)\n\n    const createString = !!createdDaysAgo ? `${createdDaysAgo} ${createdDaysAgo === 1 ? 'day' : 'days'} ago` : 'today'\n\n    return (\n        <>\n            {created_at && (\n                <div className='flex items-center gap-2 font-extralight text-xs min-w-fit'>\n                    {/* <span>created </span> */}\n                    {createString}\n                </div>\n            )}\n        </>\n    )\n}\n","import { ActiveGoalCreatedAt } from '@/modules/goals/components/goal-editor-dialog/components/goal-editor-form-items/ActiveGoalCreatedAt'\nimport { format } from 'date-fns'\nimport { convertStringDate } from '@/helpers/date.helpers'\nimport { useFormikContext } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\n\nexport const GoalCreatedAt = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    const created = formikContext.values?.goal_ritual?.created_at\n        ? formikContext.values?.goal_ritual?.created_at\n        : formikContext.values.created_at\n\n    return created ? (\n        <div className='flex items-center gap-2 mb-5 opacity-80 flex-wrap'>\n            <div className='font-extralight text-xs min-w-fit'>created</div>\n            <ActiveGoalCreatedAt />\n            <div className='font-extralight text-xs min-w-fit'>\n                on {format(convertStringDate(created), 'do MMMM yyyy, EEEE')}\n            </div>\n        </div>\n    ) : null\n}\n","import { FormLabel } from '@/components/form/FormLabel'\nimport { useGoalEditor$ } from '../../stores/goal-editor-store/useGoalEditor.store'\nimport { useFormikContext } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useGoalData } from '../../hooks/useGoalData'\nimport { XTiptap } from '@/components-x/x-tiptap/XTiptap'\n\nexport const GoalDescriptionRichInput = () => {\n    const { viewMode } = useGoalEditor$()\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { isLoading, data } = useGoalData()\n    if (viewMode && !formikContext.values.description.length) return null\n\n    return (\n        <div>\n            <FormLabel title='Description' />\n            <XTiptap\n                // showToolbar={!viewMode}\n                isLoading={isLoading}\n                content={data?.description || ''}\n                onChange={(content) => formikContext.setFieldValue('description', content)}\n                readonly={viewMode}\n            />\n        </div>\n    )\n}\n","import { XDatePicker } from '@/components-x/x-date-picker/XDatePicker'\nimport { getYear } from 'date-fns'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { prepareFinishedAtForInsert } from '@/helpers/date.helpers'\nimport { useGoalEditor$ } from '../../stores/goal-editor-store/useGoalEditor.store'\nimport { useFormikContext } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { cn } from '@/helpers/cn'\n\nexport const GoalFinishCalendarInput = () => {\n    const { viewMode } = useGoalEditor$()\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    function onDatePickerChange(day: Date | undefined) {\n        day && formikContext.setFieldValue('finished_at', prepareFinishedAtForInsert(new Date(day)))\n    }\n    function onClear() {\n        formikContext.setFieldValue('finished_at', null)\n    }\n\n    return (\n        <div>\n            <FormLabel title={cn('Finish Estimation', !viewMode && ' *')} />\n\n            <XDatePicker\n                numberOfMonths={1}\n                mode='single'\n                /* picker is converting date automatically by UTC */\n                selected={formikContext.values.finished_at ? new Date(formikContext.values.finished_at) : undefined}\n                onSelect={onDatePickerChange}\n                dateFormat={'do MMMM yyyy'}\n                captionLayout='dropdown-buttons'\n                fromYear={getYear(new Date(Date.now())) - 25}\n                toYear={getYear(new Date(Date.now())) + 100}\n                fixedWeeks\n                showOutsideDays\n                showWeekNumber\n                // ISOWeek\n                onClear={onClear}\n                readOnly={viewMode}\n                showToday\n            />\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useGoalEditor$ } from '../../stores/goal-editor-store/useGoalEditor.store'\nimport { useFormikContext } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\n\nexport const GoalSloganInput = () => {\n    const { viewMode } = useGoalEditor$()\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    if (viewMode && !formikContext.values.slogan.length) return null\n\n    return (\n        <div>\n            <FormLabel title='Slogan' />\n            <XInput\n                data-testid='goal-slogan-input'\n                disabled={viewMode}\n                readOnly={viewMode}\n                value={formikContext.values.slogan}\n                name='slogan'\n                onChange={formikContext.handleChange}\n                error={formikContext.touched.slogan && Boolean(formikContext.errors.slogan)}\n                errorMessage={formikContext.errors.slogan}\n            />\n        </div>\n    )\n}\n","import { XInput, type XInputProps } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { cn } from '@/helpers/cn'\n\nexport const GoalTitleInput: React.FC<XInputProps> = ({ readOnly, value, onChange, error, errorMessage }) => {\n    return (\n        <div>\n            <FormLabel title={cn('Title', !readOnly && ' *')} />\n            <XInput\n                data-testid='goal-title-input'\n                disabled={readOnly}\n                readOnly={readOnly}\n                autoFocus={true}\n                value={value}\n                name='title'\n                onChange={onChange}\n                error={error}\n                errorMessage={errorMessage}\n            />\n        </div>\n    )\n}\n","import { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useFormikContext, type FormikContextType } from 'formik'\nimport { useGoalEditor$ } from '../../../stores/goal-editor-store/useGoalEditor.store'\nimport { GoalTitleInput } from './GoalTitleInput'\n\nexport const GoalTitleInputIndex = () => {\n    const { viewMode } = useGoalEditor$()\n    const formikContext: FormikContextType<IGoalSchema> = useFormikContext<IGoalSchema>()\n\n    return (\n        <GoalTitleInput\n            disabled={viewMode}\n            readOnly={viewMode}\n            value={formikContext.values.title}\n            onChange={formikContext.handleChange}\n            error={formikContext.touched.title && Boolean(formikContext.errors.title)}\n            errorMessage={formikContext.errors.title}\n        />\n    )\n}\n","import { GoalCreatedAt } from '../../../goal-editor-form-items/GoalCreatedAt'\nimport { GoalDescriptionRichInput } from '../../../goal-editor-form-items/GoalDescriptionRichInput'\nimport { GoalFinishCalendarInput } from '../../../goal-editor-form-items/GoalFinishCalendarInput'\nimport { GoalSloganInput } from '../../../goal-editor-form-items/GoalSloganInput'\nimport { GoalTitleInputIndex } from '../../../goal-editor-form-items/goal-title-input/GoalTitleInputIndex'\n\nexport const GoalInfo: React.FC = () => {\n    return (\n        <>\n            <GoalCreatedAt />\n            <div className='flex flex-col gap-5'>\n                <GoalTitleInputIndex />\n                <GoalSloganInput />\n                <GoalDescriptionRichInput />\n                <GoalFinishCalendarInput />\n            </div>\n        </>\n    )\n}\n","import { type MutableRefObject, useEffect } from 'react'\n\nexport const useSelectDropdownClickOutside = (options: {\n    childRef: MutableRefObject<HTMLDivElement | null>\n    childAction: () => void\n    inputAction: () => void\n}) => {\n    const { childRef, childAction, inputAction } = options\n\n    useEffect(() => {\n        function handleClickOutside(event: { target: EventTarget | null }) {\n            const classNames = ['input-select', 'input-icon', 'xinput', 'x-select-icon']\n            if (classNames.some((className) => (event.target as Element).classList.contains(className))) {\n                inputAction()\n            } else if (childRef?.current && !childRef?.current.contains(event.target as Node)) {\n                childAction()\n            }\n        }\n        document.addEventListener('mousedown', handleClickOutside)\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside)\n        }\n    }, [childRef])\n}\n","import { type ReactNode, useLayoutEffect, useRef, useState } from 'react'\nimport { XInput } from '../x-input/XInput'\nimport clsx from 'clsx'\nimport { useSelectDropdownClickOutside } from './useSelectDropdownClickOutside.hook'\nimport { IconSelect } from '@/assets/icons'\n\ntype XSelectOption = {\n    label: string\n    value: string\n}\ntype TXSelect = Omit<React.SelectHTMLAttributes<HTMLSelectElement>, 'onChange'> & {\n    label?: string\n    error?: boolean\n    errorMessage?: string\n    startIcon?: ReactNode\n    endIcon?: ReactNode\n    readOnly?: boolean\n    options: XSelectOption[]\n    onChange: (value: string) => void\n}\n\nexport const XSelect: React.FC<TXSelect> = ({ value, options, readOnly, onChange }) => {\n    const [open, setOpen] = useState(false)\n    //\n    const inputLabel = options.find((opt) => opt.value.toString() === value?.toString())?.label\n    //\n    const [inputClicked, setInputClicked] = useState(false)\n\n    const onClick = () => {\n        if (readOnly) return\n        if (inputClicked) {\n            setOpen(!inputClicked)\n        } else {\n            setOpen(true)\n        }\n        setInputClicked(false)\n    }\n    //\n\n    return (\n        <div className='relative'>\n            <XInput\n                variant='select'\n                value={isNaN(Number(value)) ? '' : inputLabel}\n                endIcon={<IconSelect className='x-select-icon cursor-pointer' onClick={onClick} />}\n                onChange={() => undefined}\n                onClick={onClick}\n                readOnly={readOnly}\n            />\n            {open && (\n                <SelectOptions\n                    value={value}\n                    options={options}\n                    action={(value) => {\n                        onChange(value)\n                        setOpen(false)\n                    }}\n                    onClose={() => {\n                        setOpen(false)\n                    }}\n                    inputAction={() => {\n                        setOpen(false)\n                        setInputClicked(true)\n                    }}\n                />\n            )}\n        </div>\n    )\n}\n\nconst SelectOptions: React.FC<{\n    value?: string | number | readonly string[]\n    options: XSelectOption[]\n    action: (value: string) => void\n    inputAction: () => void\n    onClose: () => void\n}> = ({ options, action, value, onClose, inputAction }) => {\n    const childRef = useRef<null | HTMLDivElement>(null)\n    useSelectDropdownClickOutside({\n        childRef,\n        childAction: () => onClose(),\n        inputAction: () => inputAction(),\n    })\n\n    useLayoutEffect(() => {\n        const element = childRef?.current\n        const rect = childRef?.current?.getBoundingClientRect()\n        const offsetHeight = childRef?.current?.offsetHeight\n        if (!rect || !offsetHeight) return\n        const rectTop = rect.y + window.scrollY\n        const heightPosition = offsetHeight + rectTop + offsetHeight\n        const windowHeight = window.screen.height\n\n        if (heightPosition > windowHeight) {\n            element?.classList.add('bottom-11')\n        }\n    }, [])\n    return (\n        <div\n            ref={childRef}\n            className={clsx(\n                'bg-global-2-bg-plasma absolute z-30 w-full rounded-md px-[2px] shadow-xl shadow-black/30 backdrop-blur-md  transition-all',\n            )}\n        >\n            {options.map((opt) => (\n                <div\n                    key={opt.value}\n                    className={clsx(\n                        'cursor-pointer px-1 py-2 text-lg transition-all hover:text-blue-500',\n                        opt.value.toString() === value?.toString() && '!text-blue-500',\n                    )}\n                    onClick={() => {\n                        action(opt.value)\n                    }}\n                >\n                    {opt.label}\n                </div>\n            ))}\n        </div>\n    )\n}\n","import { FormLabel } from '@/components/form/FormLabel'\nimport { XSelect } from '@/components-x/x-select/XSelect'\nimport { XInput } from '@/components-x/x-input/XInput'\nimport { DaysOfTheWeek } from '@/helpers/date.helpers'\nimport { useFormikContext } from 'formik'\nimport { type IGoalSchema, goalRitualType } from '@/modules/goals/shared-service'\nimport { useGoalEditor$ } from '../../../../../stores/goal-editor-store/useGoalEditor.store'\n\nexport const GoalRitualViewMode = () => {\n    const { viewMode } = useGoalEditor$()\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { goal_ritual } = formikContext.values\n\n    if (!goal_ritual) return null\n\n    const { ritual_type, ritual_interval, ritual_power } = goal_ritual\n\n    const isIntervalDayOfWeek = ritual_type === goalRitualType.days_of_week\n\n    return (\n        <>\n            <div>\n                <FormLabel title='Ritual power' />\n                <XInput readOnly={true} type='number' value={ritual_power} onChange={() => {}} />\n            </div>\n            <div>\n                <FormLabel title='Ritual interval' />\n                <div className='flex flex-col gap-2'>\n                    <div className='relative flex items-center justify-start gap-2'>\n                        <div className='font-extralight'>\n                            {isIntervalDayOfWeek ? 'Day of week' : 'Interval between days'}\n                        </div>\n                    </div>\n                    {isIntervalDayOfWeek ? (\n                        <XSelect\n                            readOnly={viewMode}\n                            value={ritual_interval}\n                            onChange={() => {}}\n                            options={DaysOfTheWeek}\n                        />\n                    ) : (\n                        <XInput readOnly={true} type='number' value={ritual_interval} onChange={() => {}} />\n                    )}\n                </div>\n            </div>\n        </>\n    )\n}\n","import { XSelect } from '@/components-x/x-select/XSelect'\nimport { DaysOfTheWeek, formatDateWithTimezone, convertStringDate, setMidnightTime } from '@/helpers/date.helpers'\nimport { generateNewRitualCircle } from '@/helpers/generateNewRitualCircle'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\nimport { useEffect } from 'react'\n\nexport const SelectDayOfWeek = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { goal_ritual } = formikContext.values\n\n    useEffect(() => {\n        if (goal_ritual && (goal_ritual?.ritual_interval || 0) > 6) {\n            formikContext.setFieldValue('goal_ritual', {\n                ...formikContext.values.goal_ritual,\n                ritual_interval: 1,\n            })\n        }\n    }, [])\n\n    if (!goal_ritual) return null\n\n    const handleChange = (value: string) => {\n        if (!goal_ritual) return\n        const new_ritual_interval = +value\n        const ritual_type = goal_ritual.ritual_type\n\n        const immutableFinishedAt = formikContext.values.finished_at\n        const goal_finished_at = setMidnightTime(\n            immutableFinishedAt ? convertStringDate(immutableFinishedAt) : new Date(),\n        )\n\n        const { ritual_goal_finished_at } = generateNewRitualCircle({\n            ritual_type,\n            new_ritual_interval,\n            goal_finished_at,\n            edit: true,\n        })\n\n        formikContext.setFieldValue('finished_at', formatDateWithTimezone(ritual_goal_finished_at))\n        formikContext.setFieldValue('goal_ritual', {\n            ...formikContext.values.goal_ritual,\n            ritual_interval: new_ritual_interval,\n        })\n    }\n\n    return <XSelect value={goal_ritual.ritual_interval} onChange={handleChange} options={DaysOfTheWeek} />\n}\n","import { useEffect } from 'react'\nimport { XInput } from '@/components-x/x-input/XInput'\nimport { generateNewRitualCircle } from '@/helpers/generateNewRitualCircle'\nimport { formatDateWithTimezone, convertStringDate, setMidnightTime } from '@/helpers/date.helpers'\nimport { useFormikContext } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\n\nexport const SelectDays = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { goal_ritual } = formikContext.values\n\n    useEffect(() => {\n        if (goal_ritual?.ritual_interval === 0) {\n            formikContext.setFieldValue('goal_ritual', {\n                ...formikContext.values.goal_ritual,\n                ritual_interval: 1,\n            })\n        }\n    }, [])\n\n    if (!goal_ritual) return null\n\n    const onRitualIntervalChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let value = +e.target.value || 0\n        if (+value > 31) {\n            value = 31\n        }\n\n        const ritual_type = goal_ritual.ritual_type\n\n        const goal_finished_at = formikContext.values.finished_at\n            ? setMidnightTime(convertStringDate(formikContext.values.finished_at))\n            : setMidnightTime(new Date())\n\n        if (!ritual_type) return\n\n        const { ritual_goal_finished_at } = generateNewRitualCircle({\n            ritual_type,\n            new_ritual_interval: value || 1,\n            goal_finished_at,\n            edit: true,\n        })\n\n        formikContext.setFieldValue('finished_at', formatDateWithTimezone(ritual_goal_finished_at))\n        formikContext.setFieldValue('goal_ritual', {\n            ...formikContext.values.goal_ritual,\n            ritual_interval: +value,\n        })\n\n        return e\n    }\n\n    return (\n        <XInput min={1} type='number' max={31} value={goal_ritual.ritual_interval} onChange={onRitualIntervalChange} />\n    )\n}\n","import { Switch, type SwitchProps } from 'antd'\n\nexport const XSwitch: React.FC<SwitchProps> = (props) => {\n    return <Switch {...props} className='!bg-blue-700 ' />\n}\n","import { XSwitch } from '@/components-x/x-switch/XSwitch'\nimport { type IGoalSchema, goalRitualType } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\n\nexport const RitualTypeSwitch = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { goal_ritual } = formikContext.values\n    const isIntervalDayOfWeek = goal_ritual?.ritual_type === goalRitualType.days_of_week\n\n    if (!goal_ritual) return null\n\n    return (\n        <div className='relative flex items-center justify-start gap-2'>\n            <div className='font-extralight'>Interval between days</div>\n            <XSwitch\n                checked={isIntervalDayOfWeek}\n                onChange={(e) =>\n                    formikContext.setFieldValue('goal_ritual', {\n                        ...formikContext.values.goal_ritual,\n                        ritual_type: e ? goalRitualType.days_of_week : goalRitualType.interval_in_days,\n                    })\n                }\n            />\n            <div className='font-extralight'>Day of week</div>\n        </div>\n    )\n}\n","import { FormLabel } from '@/components/form/FormLabel'\nimport { SelectDayOfWeek } from './SelectDayOfWeek'\nimport { SelectDays } from './SelectDays'\nimport { RitualTypeSwitch } from './RitualTypeSwitch'\nimport { type IGoalSchema, goalRitualType } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\n\nexport const GoalRitualEditMode = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { goal_ritual } = formikContext.values\n    const isIntervalDayOfWeek = goal_ritual?.ritual_type === goalRitualType.days_of_week\n\n    if (!goal_ritual) return null\n\n    return (\n        <div>\n            <FormLabel title='Ritual interval' />\n            <div className='flex flex-col gap-2'>\n                <RitualTypeSwitch />\n                {isIntervalDayOfWeek ? <SelectDayOfWeek /> : <SelectDays />}\n            </div>\n        </div>\n    )\n}\n","import { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { type IGoalRitualSchema, KEY_GoalRitualStore } from './types'\nimport { type IGoalSchema, goalRitualType } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { useGoalEditor$ } from '../goal-editor-store/useGoalEditor.store'\nimport { goalEditorMode } from '../goal-editor-store/types'\n\nexport const useGoalRitual$ = () => {\n    const queryClient = useQueryClient()\n    const formikContext = useFormikContext<IGoalSchema>()\n    const { setStore: setState } = useGoalEditor$()\n    const { data: state } = useQuery<IGoalRitualSchema>({\n        queryKey: KEY_GoalRitualStore(),\n        staleTime: Infinity,\n        refetchOnWindowFocus: false,\n        refetchOnMount: false,\n        initialData: { ritualize: false },\n    })\n\n    const toggleRitualize = () => {\n        const ritualize = !state.ritualize\n        setState({\n            goalId: formikContext.values.id,\n            open: true,\n            goalEditorMode: goalEditorMode.edit,\n            metadata: { viewModeRedirect: 'view', preventRerender: true },\n        })\n        queryClient.setQueryData<IGoalRitualSchema>(KEY_GoalRitualStore(), {\n            ...state,\n            ritualize,\n        })\n\n        if (ritualize) {\n            formikContext.setFieldValue('goal_ritual', {\n                ritual_id: crypto.randomUUID(),\n                ritual_type: goalRitualType.interval_in_days,\n                ritual_power: 0,\n                ritual_interval: 1,\n                created_at: formikContext.values.created_at || formatDateWithTimezone(),\n            })\n        } else {\n            formikContext.setFieldValue('goal_ritual', null)\n        }\n    }\n\n    return { ritualize: state.ritualize, toggleRitualize }\n}\n","import { useGoalRitual$ } from '../../../../../stores/goal-ritual-store/useGoalRitual.store'\nimport { GoalRitualEditMode } from './goal-ritual-edit-mode/GoalRitualEditMode'\nimport { Switch } from 'antd'\nimport { FormLabel } from '@/components/form/FormLabel'\n\nexport const GoalRitualNewMode: React.FC = () => {\n    const { toggleRitualize, ritualize } = useGoalRitual$()\n\n    return (\n        <div className='flex flex-col gap-5'>\n            <div className='h-fit w-fit flex gap-2 justify-center'>\n                <Switch checked={ritualize} onChange={toggleRitualize} />\n                <FormLabel title='Ritualize' />\n            </div>\n            {ritualize && <GoalRitualEditMode />}\n        </div>\n    )\n}\n","import { useFormikContext } from 'formik'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useGoalEditor$ } from '../../../../stores/goal-editor-store/useGoalEditor.store'\nimport { GoalRitualViewMode } from './components/GoalRitualViewMode'\nimport { GoalRitualEditMode } from './components/goal-ritual-edit-mode/GoalRitualEditMode'\nimport { GoalRitualNewMode } from './components/GoalRitualNewMode'\nimport { useMemo } from 'react'\n\nexport const GoalRitual: React.FC = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    const { viewMode } = useGoalEditor$()\n    const { goal_ritual } = formikContext.values\n\n    const goalRitualInitState = useMemo(() => goal_ritual, []) // initial constant value\n\n    if (viewMode && goalRitualInitState) return <GoalRitualViewMode />\n\n    if (!goalRitualInitState) {\n        return <GoalRitualNewMode />\n    }\n\n    return <GoalRitualEditMode />\n}\n","\nexport const GoalRelation: React.FC = () => {\n    return <div>GoalRelation</div>\n}\n","\nexport const GoalAttachments: React.FC = () => {\n    return <div>GoalAttachments</div>\n}\n","\nexport const GoalStory: React.FC = () => {\n    return <div>GoalStory</div>\n}\n","import { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { type TabsProps } from 'antd'\nimport { GoalInfo } from '../components/goal-info/GoalInfo'\nimport { GoalRitual } from '../components/goal-ritual/GoalRitual'\nimport { useGoalEditor$ } from '../../../stores/goal-editor-store/useGoalEditor.store'\nimport { useFormikContext } from 'formik'\nimport { calculateIsRitualWithPower } from '@/modules/goals/helpers/optimizeActiveGoalsData'\nimport { GoalRelation } from '../components/goal-relation/GoalRelation'\nimport { GoalAttachments } from '../components/goal-attachments/GoalAttachments'\nimport { GoalStory } from '../components/goal-story/GoalStory'\n\nexport const useGoalEditorTabs = () => {\n    const { viewMode, editMode } = useGoalEditor$()\n    const formikContext = useFormikContext<IGoalSchema>()\n    const isRitual = calculateIsRitualWithPower(formikContext.values) && viewMode\n\n    const goalEditorTabs: TabsProps['items'] = [\n        { key: '1', label: 'Info', children: <GoalInfo /> },\n        { key: '2', label: 'Story', children: <GoalStory /> },\n        { key: '3', label: 'Attachments', children: <GoalAttachments /> },\n        // { key: '4', label: 'Status', children: 'Goal status' },\n        // {\n        //     key: '5',\n        //     label: 'Settings',\n        //     children: 'Goal status',\n        // },\n    ]\n\n    if (editMode || isRitual) {\n        goalEditorTabs.push({ key: '4', label: 'Ritual', children: <GoalRitual />, active: isRitual })\n    }\n\n    goalEditorTabs.push({ key: '5', label: 'Relation', children: <GoalRelation />, active: isRitual })\n\n    return { goalEditorTabs }\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { type IGoalSchema, goalStatusEnum } from '@/modules/goals/shared-service/types'\nimport { isCompletedGoalStatus } from '@/modules/goals/helpers/goalsGuards'\nimport { useUpdateGoalStatus } from '../../../service/update-goal-status/useUpdateGoalStatus.service'\nimport { useGoalEditor$ } from '../../../stores/goal-editor-store/useGoalEditor.store'\nimport { calculateIsRitualWithPower } from '@/modules/goals/helpers/optimizeActiveGoalsData'\nimport { IconCompletedFilled } from '@/assets/icons/IconCompleted'\nimport { XTooltip } from '@/components-x/x-tooltip/XTooltip'\n\nexport const CompleteRitualGoal: React.FC<{ goal: IGoalSchema }> = ({ goal }) => {\n    const { updateGoalStatus } = useUpdateGoalStatus()\n    const { onCancel, newMode } = useGoalEditor$()\n    if (newMode || isCompletedGoalStatus(goal.status) || !calculateIsRitualWithPower(goal)) return null\n\n    return (\n        <>\n            <StyledButton\n                id='completeRitualGoal'\n                variant={'outlined'}\n                size={'small'}\n                className='group !border-blue-500/50'\n                startIcon={<IconCompletedFilled className='h-5 w-5' />}\n                onClick={() => {\n                    updateGoalStatus({\n                        goal,\n                        status: goalStatusEnum.completed,\n                        onSuccess: onCancel,\n                    })\n                }}\n            />\n            {<XTooltip anchorSelect='#completeRitualGoal'>Finish ritual</XTooltip>}\n        </>\n    )\n}\n","import { Tabs } from 'antd'\nimport { GoalEditorFormSubmit } from '../goal-editor-form-submit/GoalEditorFormSubmit'\nimport { useGoalEditorTabs } from './hooks/useGoalEditorTabs'\nimport { CompleteRitualGoal } from './components/CompleteRitualGoal'\nimport { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\n\nexport const GoalEditorTabs: React.FC = () => {\n    const { goalEditorTabs } = useGoalEditorTabs()\n    const formikContext = useFormikContext<IGoalSchema>()\n    return (\n        <Tabs\n            className='[&_.ant-tabs-nav::before]:border-slate-500 [&_.ant-tabs-nav]:bg-global-2-bg-plasma [&_.ant-tabs-nav]:sticky'\n            tabBarStyle={{\n                top: -20,\n                // position:'sticky',\n                // background: 'var(--colors-global-bg-plasma)',\n                zIndex: 10,\n            }}\n            defaultActiveKey='1'\n            items={goalEditorTabs}\n            tabBarExtraContent={\n                <div className='flex items-center justify-center gap-2'>\n                    <GoalEditorFormSubmit />\n                    <CompleteRitualGoal goal={formikContext.values} />\n                </div>\n            }\n            // onChange={onChange}\n            indicator={{ align: 'center' }}\n        />\n    )\n}\n","import { Form } from 'formik'\nimport { GoalEditorToolbar } from './goal-editor-toolbar/GoalEditorToolbar'\nimport { GoalEditorDetails } from './goal-editor-details/GoalEditorDetails'\nimport { useInitGoalEditorForm } from '../hooks/useInitGoalEditorForm'\nimport { useGoalEditorFormInitialValues } from '../hooks/useGoalEditorFormInitialValues'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { GoalEditorTabs } from './goal-editor-tabs/GoalEditorTabs'\n\nexport const GoalEditorForm = () => {\n    const { isLoading } = useGoalEditorFormInitialValues()\n    useInitGoalEditorForm()\n\n    return (\n        <Form>\n            {isLoading && (\n                <div className='w-full h-full z-[100] bg-global-bg-plasma left-0 flex items-center duration-300 justify-center top-0 fixed'>\n                    <IconInfiniteLoading className='w-20 h-20 text-blue-500 duration-300' />\n                </div>\n            )}\n            <GoalEditorToolbar />\n            <GoalEditorDetails />\n            <GoalEditorTabs />\n        </Form>\n    )\n}\n","import { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { Formik } from 'formik'\nimport { useGoalEditorFormInitialValues } from '../hooks/useGoalEditorFormInitialValues'\nimport { useGoalEditorFormOnSubmit } from '../hooks/on-submit/useGoalEditorFormOnSubmit'\nimport { useGoalEditorFormOnValidate } from '../hooks/useGoalEditorFormOnValidate'\nimport { GoalEditorForm } from './GoalEditorForm'\n\n/**\n * @goalId toggle between new goal and edit goal\n */\nconst GoalEditor = () => {\n    const { onSubmit } = useGoalEditorFormOnSubmit()\n    const { validate } = useGoalEditorFormOnValidate()\n    const { initialValues } = useGoalEditorFormInitialValues()\n\n    return (\n        <Formik<IGoalSchema> enableReinitialize initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n            <GoalEditorForm />\n        </Formik>\n    )\n}\n\nexport default GoalEditor\n"],"names":["IconSelect","props","jsx","query_fetchGoal","goalId","client","generateClient","query","graphql","goalResponseFr","res","request","goalSchema","parse","goals_by_pk","e","resolveError","useFetchGoal","isLoading","data","useQuery","queryKey","KEY_FetchGoal","queryFn","staleTime","refetchOnWindowFocus","refetchOnMount","enabled","useGoalData","store","state","useGoalEditor$","useGoalEditorFormInitialValues","initialValues","initialGoal","parentGoalId","metadata","goalEditorMode","id","crypto","randomUUID","created_at","formatDateWithTimezone","deleted_at","finished_at","is_favorite","title","slogan","description","status","goalStatusEnum","active","difficulty","goal_ritual","parent_goal_id","mutation_upsertGoal","goal","rest","goalRitualMutation","goalMutation","goal_id","insert_goals_one","setGoalDifficulty","timeInMonths","Number","formatDistanceStrict","Date","now","unit","roundingMethod","split","DIFFICULTY_ENUM","LIGHT","MEDIUM","LEGEND","EPIC","STAR","FRIEND_OF_DEATH","IMMORTAL","goalSnapshotOut","prepareFinishedAtForInsert","convertStringDate","useUpsertGoal","onSuccess","onGoalMutationSuccess","useInvalidateGoals","mutation","useMutation","mutationFn","upsertGoal","mutate","onSettled","useViewModeSubmit","onCancel","updateGoalStatus","useUpdateGoalStatus","ritualizeGoal","useRitualizeGoal","onViewModeSubmit","values","formikHelpers","setSubmitting","isActiveRitual","isActiveRitualStatus","isActiveGoal","isActiveGoalStatus","isCompletedGoalStatus","completed","useGoalEditorFormOnSubmit","viewMode","setStore","setState","onSubmit","parentGoalEditorMode","view","open","viewModeRedirect","useGoalEditorFormOnValidate","validate","result","safeParse","errors","success","issue","error","issues","key","path","message","length","ToggleFavoriteNewGoal","formikContext","useFormikContext","isFavorite","StyledButton","setFieldValue","IconHeart","GoalEditorToolbar","newMode","jsxs","ToggleEditGoal","GoalIsFavorite","CreateChildGoal","GoalDeletedAt","GoalEditorDetails","GoalDaysUntilDeadline","GoalRitualCount","ImageByGoalType","isRitual","calculateIsRitual","isExpired","calculateIsExpired","_isCompleted","goalIcon","IconFocus","IconExpired","IconInfinity","IconCompleted","ritual_power","_totalRemainingDays","calculateTotalRemainingDays","KEY_GoalRitualStore","z","object","ritualize","boolean","default","useInitGoalEditorForm","queryClient","useQueryClient","useEffect","preventRerender","resetQueries","setFormikState","prevState","useGoalEditorFormSubmit","OkText","tooltipText","disabled","isSubmitting","isFromFuture","calculateIsFromFuture","isCompleted","deletedAt","GoalEditorFormSubmit","IconInfiniteLoading","XTooltip","ActiveGoalCreatedAt","createdDaysAgo","calculateCreatedDaysAgo","createString","GoalCreatedAt","created","format","GoalDescriptionRichInput","FormLabel","XTiptap","content","GoalFinishCalendarInput","onDatePickerChange","day","onClear","cn","XDatePicker","undefined","getYear","GoalSloganInput","XInput","handleChange","touched","Boolean","GoalTitleInput","readOnly","value","onChange","errorMessage","GoalTitleInputIndex","GoalInfo","Fragment","useSelectDropdownClickOutside","options","childRef","childAction","inputAction","handleClickOutside","event","some","target","classList","contains","className","current","addEventListener","removeEventListener","XSelect","setOpen","useState","inputLabel","find","opt","toString","label","inputClicked","setInputClicked","onClick","isNaN","SelectOptions","action","onClose","useRef","useLayoutEffect","element","rect","getBoundingClientRect","offsetHeight","rectTop","y","window","scrollY","heightPosition","windowHeight","screen","height","add","clsx","map","GoalRitualViewMode","ritual_type","ritual_interval","isIntervalDayOfWeek","goalRitualType","days_of_week","DaysOfTheWeek","SelectDayOfWeek","new_ritual_interval","immutableFinishedAt","goal_finished_at","setMidnightTime","ritual_goal_finished_at","generateNewRitualCircle","edit","SelectDays","onRitualIntervalChange","XSwitch","Switch","RitualTypeSwitch","interval_in_days","GoalRitualEditMode","useGoalRitual$","Infinity","initialData","toggleRitualize","setQueryData","ritual_id","GoalRitualNewMode","GoalRitual","goalRitualInitState","useMemo","GoalRelation","GoalAttachments","GoalStory","useGoalEditorTabs","editMode","calculateIsRitualWithPower","goalEditorTabs","children","push","CompleteRitualGoal","IconCompletedFilled","GoalEditorTabs","Tabs","top","zIndex","align","GoalEditorForm","Form","GoalEditor","Formik"],"mappings":"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"}