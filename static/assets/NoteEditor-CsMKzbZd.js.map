{"version":3,"file":"NoteEditor-CsMKzbZd.js","sources":["../../src/modules/notes/shared-services/fetch-note/query_fetchNote.ts","../../src/modules/notes/shared-services/fetch-note/useFetchNote.ts","../../src/modules/notes/components/note-editor-dialog/hooks/useNoteData.ts","../../src/modules/notes/components/note-editor-dialog/hooks/useNoteEditorFormInitialValues.ts","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/topbar-extra-content/note-editor-form-submit/useNoteEditorFormSubmit.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/topbar-extra-content/note-editor-form-submit/NoteEditorFormSubmit.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/note-info/components/NoteDescriptionRichInput.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/note-info/components/NoteCreatedDaysAgo.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/note-info/components/NoteCreatedAt.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/note-info/components/NoteTagInput.tsx","../../src/components-x/x-autocomplete/XAutocomplete.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/note-info/components/SelectLabelsByRating.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/note-info/components/NoteLabelSelect.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/components/note-info/NoteInfo.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/hooks/useNoteEditorTabs.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-tabs/NoteEditorTabs.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-toolbar/components/ToggleFavoriteNewNote.tsx","../../src/modules/notes/components/note-editor-dialog/components/note-editor-toolbar/NoteEditorToolbar.tsx","../../src/modules/notes/components/note-editor-dialog/components/NoteEditorForm.tsx","../../src/modules/notes/components/note-editor-dialog/hooks/useNoteEditorFormOnValidate.ts","../../src/modules/notes/shared-services/upsert-note/mutation_upsertNote.ts","../../src/modules/notes/shared-services/upsert-note/useUpsertNote.ts","../../src/modules/notes/components/note-editor-dialog/hooks/useNoteEditorFormOnSubmit.ts","../../src/modules/notes/components/note-editor-dialog/components/NoteEditor.tsx"],"sourcesContent":["import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type INoteSchema, noteSchema } from '../types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from '../fragments/noteResponseFr'\n\nexport const query_fetchNote = async (props: { id: string | null }): Promise<INoteSchema | undefined> => {\n    try {\n        const { id } = props\n\n        if (!id) return\n\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_fetchNote($id: uuid!) {\n                    notes_by_pk(id: $id) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const data = await client.request(query, { id })\n\n        return noteSchema.parse(data.notes_by_pk)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useQuery } from '@tanstack/react-query'\nimport { notesKeys } from '../keys'\nimport { query_fetchNote } from './query_fetchNote'\n\nexport const useFetchNote = (props: { id: string | null }) => {\n    const { id } = props\n    const { isLoading, data } = useQuery({\n        queryKey: notesKeys.useFetchNote({ id }),\n        queryFn: async () => await query_fetchNote({ id }),\n        staleTime: 1000,\n        refetchOnWindowFocus: false,\n        refetchOnMount: true,\n        enabled: !!id,\n    })\n\n    return {\n        isLoading,\n        data,\n    }\n}\n","import { useFetchNote } from '@/modules/notes/shared-services/fetch-note/useFetchNote'\nimport { useNoteEditor$ } from '../stores/note-editor-store/useNoteEditor.store'\n\nexport const useNoteData = () => {\n    const { store } = useNoteEditor$()\n    const { isLoading, data } = useFetchNote({ id: store.id })\n    return {\n        isLoading,\n        data,\n    }\n}\n","import { useNoteEditor$ } from '../stores/note-editor-store/useNoteEditor.store.ts'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types.ts'\nimport { useNoteData } from './useNoteData.ts'\n\nexport const useNoteEditorFormInitialValues = () => {\n    const { store } = useNoteEditor$()\n    const { isLoading, data } = useNoteData()\n    const initialValues: INoteSchema = initialNote()\n\n    return { store, initialValues: data || initialValues, isLoading }\n}\n\nconst initialNote = (): INoteSchema => ({\n    id: crypto.randomUUID(),\n    created_at: formatDateWithTimezone(),\n    deleted_at: null,\n    is_favorite: false,\n    archived: false,\n    description: '',\n    tag: '',\n    label_id: null,\n    label: { name: '' },\n})\n","import { type IGoalSchema } from '@/modules/goals/shared-service'\nimport { useFormikContext } from 'formik'\n\nexport const useNoteEditorFormSubmit = () => {\n    const formikContext = useFormikContext<IGoalSchema>()\n\n    return { OkText: 'Save', tooltipText: '', disabled: false, isSubmitting: formikContext.isSubmitting }\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { XTooltip } from '@/components-x/x-tooltip/XTooltip'\nimport { useNoteEditorFormSubmit } from './useNoteEditorFormSubmit'\n\nexport const NoteEditorFormSubmit: React.FC = () => {\n    const { disabled, OkText, tooltipText, isSubmitting } = useNoteEditorFormSubmit()\n\n    return (\n        <div className='relative'>\n            <StyledButton\n                variant='outlined'\n                type='submit'\n                disabled={disabled || isSubmitting}\n                size='small'\n                className='z-10'\n            >\n                {!isSubmitting ? OkText : <IconInfiniteLoading className='w-6 h-6' />}\n            </StyledButton>\n            {disabled && tooltipText && (\n                <div\n                    id='disabledTooltip'\n                    className='pointer-events-auto absolute left-0 top-0\n                    z-20 h-full w-full rounded-lg bg-transparent'\n                />\n            )}\n            {disabled && tooltipText && <XTooltip anchorSelect='#disabledTooltip'>{tooltipText}</XTooltip>}\n        </div>\n    )\n}\n","import { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport { useNoteData } from '../../../../../hooks/useNoteData'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { XTiptap } from '@/components-x/x-tiptap/XTiptap'\n\nexport const NoteDescriptionRichInput = () => {\n    const formikContext = useFormikContext<INoteSchema>()\n    const { isLoading, data } = useNoteData()\n\n    return (\n        <div className='relative pb-2'>\n            <FormLabel title='Description *' />\n            <XTiptap\n                isLoading={isLoading}\n                content={data?.description || ''}\n                onChange={(content) => formikContext.setFieldValue('description', content)}\n                readonly={false}\n                error={formikContext.touched.description && Boolean(formikContext.errors.description)}\n                errorMessage={formikContext.errors.description}\n            />\n        </div>\n    )\n}\n","import { convertStringDate } from '@/helpers/date.helpers'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { useFormikContext } from 'formik'\n\nexport const NoteCreatedDaysAgo = () => {\n    const formikContext = useFormikContext<INoteSchema>()\n\n    const { created_at } = formikContext.values\n    const createdDaysAgo = calculateCreatedDaysAgo(formikContext.values)\n\n    const createString = !!createdDaysAgo ? `${createdDaysAgo} ${createdDaysAgo === 1 ? 'day' : 'days'} ago` : 'today'\n\n    return (\n        <>\n            {created_at && (\n                <div className='flex items-center gap-2 font-extralight text-xs min-w-fit'>\n                    {/* <span>created </span> */}\n                    {createString}\n                </div>\n            )}\n        </>\n    )\n}\n\nconst calculateCreatedDaysAgo = (note: INoteSchema): number => {\n    if (!note.created_at) return 0\n    const created = note.created_at\n    const today = Date.now()\n    const createdAt = convertStringDate(created).getTime()\n    const diff = new Date(today - createdAt)\n    return Math.floor(diff.getTime() / (1000 * 3600 * 24))\n}\n","import { format } from 'date-fns'\nimport { convertStringDate } from '@/helpers/date.helpers'\nimport { useFormikContext } from 'formik'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { NoteCreatedDaysAgo } from './NoteCreatedDaysAgo'\n\nexport const NoteCreatedAt = () => {\n    const formikContext = useFormikContext<INoteSchema>()\n\n    const created = formikContext.values.created_at\n\n    return created ? (\n        <div className='flex items-center gap-2 mb-5 opacity-80 flex-wrap'>\n            <div className='font-extralight text-xs min-w-fit'>created</div>\n            <NoteCreatedDaysAgo />\n            <div className='font-extralight text-xs min-w-fit'>\n                on {format(convertStringDate(created), 'do MMMM yyyy, EEEE')}\n            </div>\n        </div>\n    ) : null\n}\n","import { FormLabel } from '@/components/form/FormLabel'\nimport { NoteTagsList } from '../../../../../../../shared-components/NoteTagsList'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { XInput } from '@/components-x/x-input/XInput'\nimport { compact, uniq } from 'lodash-es'\nimport { useFormikContext } from 'formik'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { getNoteTags } from '@/modules/notes/helpers/getNoteTags'\nimport { useNoteEditorDialog$ } from '@/modules/notes/components/note-editor-dialog/mst/provider'\nimport { observer } from 'mobx-react-lite'\n\nexport const NoteTagInput = observer(() => {\n    const formikContext = useFormikContext<INoteSchema>()\n    const { tagInput, onChangeField } = useNoteEditorDialog$()\n    const newTagIsValid = (tag: string | null): boolean => {\n        const tagsOptimized = compact(tag?.split(',').map((t) => t.trim().toLowerCase())).slice()\n        return !!tagInput.length && !tagsOptimized.includes(tagInput.trim().toLowerCase())\n    }\n\n    const deleteTag = (tagToDelete: string) => {\n        const { noteTags } = getNoteTags(formikContext.values.tag)\n        if (!noteTags.length) return\n\n        const newTag = noteTags.filter((noteTag) => noteTag !== tagToDelete)\n        formikContext.setFieldValue('tag', newTag.toString())\n    }\n\n    return (\n        <div>\n            <FormLabel title='Tag:' />\n            <div className='mb-2 flex w-full items-center gap-2 '>\n                <XInput value={tagInput} onChange={(e) => onChangeField('tagInput', e.target.value)} />\n                <StyledButton\n                    disabled={!newTagIsValid(formikContext.values.tag)}\n                    onClick={() => {\n                        const startString = formikContext.values.tag ? formikContext.values.tag + ',' : ''\n                        formikContext.setFieldValue(\n                            'tag',\n                            startString + uniq(tagInput.split(',').map((tag) => tag.trim())).join(','),\n                        )\n                        onChangeField('tagInput', '')\n                    }}\n                >\n                    Add\n                </StyledButton>\n            </div>\n            <NoteTagsList note={formikContext.values} deleteAction={deleteTag} />\n        </div>\n    )\n})\n","import { AutoComplete, type AutoCompleteProps } from 'antd'\nimport './XAutocomplete.scss'\nexport const XAutocomplete: React.FC<AutoCompleteProps> = (props) => {\n    return (\n        <AutoComplete\n            {...props}\n            rootClassName='x-autocomplete-root'\n            popupClassName='x-autocomplete-popup-root'\n            className='x-autocomplete'\n            style={{ height: 40 }}\n            filterOption={(inputValue, option) =>\n                option?.value?.toString()?.toUpperCase()?.indexOf(inputValue.toUpperCase()) !== -1\n            }\n        />\n    )\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { useFetchNotesLabels } from '@/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/useFetchNotesLabels'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { useFormikContext } from 'formik'\nimport { sortBy } from 'lodash-es'\n\nexport const SelectLabelsByRating: React.FC<{ handleSelect: (value: string) => void }> = ({ handleSelect }) => {\n    const { notesLabels } = useFetchNotesLabels()\n    const formikContext = useFormikContext<INoteSchema>()\n\n    return (\n        <div className='flex gap-2 mt-4 flex-wrap'>\n            {sortBy(notesLabels, ['rating'])\n                .reverse()\n                .slice(0, 4)\n                .map((nl) => (\n                    <StyledButton\n                        onClick={() => {\n                            handleSelect(nl.id)\n                        }}\n                        size='small'\n                        variant={nl.id === formikContext.values.label_id ? 'contained' : 'outlined'}\n                        key={nl.name}\n                        className='capitalize'\n                    >\n                        {nl.name}\n                    </StyledButton> // Always include a unique key prop in React components generated in loops\n                ))}\n        </div>\n    )\n}\n","import { IconInfiniteLoading } from '@/assets/icons'\nimport { XAutocomplete } from '@/components-x/x-autocomplete/XAutocomplete'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFetchNotesLabels } from '@/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/useFetchNotesLabels'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { useFormikContext } from 'formik'\nimport { capitalize } from 'lodash-es'\nimport { useEffect } from 'react'\nimport { SelectLabelsByRating } from './SelectLabelsByRating'\nimport { cn } from '@/helpers/cn'\n\nexport const NoteLabelSelect: React.FC = () => {\n    const { isLoading, data, onChange, filter, notesLabels } = useFetchNotesLabels()\n    const formikContext = useFormikContext<INoteSchema>()\n\n    useEffect(() => {\n        onChange(formikContext.values.label?.name || '')\n    }, [formikContext.values.label?.name])\n\n    const handleSelect = (value: string) => {\n        const label = notesLabels.find((d) => d.id === value)?.name || ''\n        onChange(label)\n        formikContext.setFieldValue('label_id', value || null)\n    }\n\n    const handleClear = () => {\n        onChange('')\n        formikContext.setFieldValue('label_id', null)\n    }\n\n    return (\n        <div className='w-full flex flex-col'>\n            <FormLabel title='Label:' />\n            <XAutocomplete\n                suffixIcon={\n                    isLoading && (\n                        <div className='w-5 h-5 '>\n                            <IconInfiniteLoading className='text-blue-500' />\n                        </div>\n                    )\n                }\n                disabled={isLoading}\n                filterOption={false}\n                allowClear\n                className='x-autocomplete'\n                style={{ height: 40 }}\n                options={data.map((d) => ({ label: d.name, value: d.name, id: d.id }))}\n                searchValue={filter}\n                onSearch={(e) => onChange(e)}\n                value={capitalize(filter)}\n                onSelect={(_value, option) => {\n                    handleSelect(option['id'])\n                }}\n                onBlur={() => {\n                    formikContext.values.label_id\n                        ? onChange(notesLabels.find((d) => d.id === formikContext.values.label_id)?.name || '')\n                        : onChange('')\n                }}\n                onClear={handleClear}\n                optionRender={(opt) => {\n                    return (\n                        <div\n                            className={cn(\n                                'h-10 text-base flex items-center capitalize',\n                                opt.data['id'] === formikContext.values.label_id && '!text-blue-500',\n                            )}\n                        >\n                            {opt.value}\n                        </div>\n                    )\n                }}\n            />\n            <SelectLabelsByRating handleSelect={handleSelect} />\n        </div>\n    )\n}\n","import { NoteDescriptionRichInput } from './components/NoteDescriptionRichInput'\nimport { NoteCreatedAt } from './components/NoteCreatedAt'\nimport { NoteTagInput } from './components/NoteTagInput'\nimport { NoteLabelSelect } from './components/NoteLabelSelect'\n\nexport const NoteInfo: React.FC = () => {\n    return (\n        <>\n            <NoteCreatedAt />\n            <div className='flex flex-col gap-5'>\n                <NoteDescriptionRichInput />\n                <NoteLabelSelect />\n                <NoteTagInput />\n            </div>\n        </>\n    )\n}\n","import { type TabsProps } from 'antd'\nimport { NoteInfo } from '../components/note-info/NoteInfo'\n// import { NoteAttachments } from '../components/note-attachments/NoteAttachments'\n\nexport const useNoteEditorTabs = () => {\n    const noteEditorTabs: TabsProps['items'] = [\n        { key: '1', label: 'Note', children: <NoteInfo /> },\n        // { key: '2', label: 'Attachments', children: <NoteAttachments />, disabled: true },\n    ]\n\n    return { noteEditorTabs }\n}\n","import { Tabs } from 'antd'\nimport { NoteEditorFormSubmit } from './components/topbar-extra-content/note-editor-form-submit/NoteEditorFormSubmit'\nimport { useNoteEditorTabs } from './hooks/useNoteEditorTabs'\n\nexport const NoteEditorTabs = () => {\n    const { noteEditorTabs } = useNoteEditorTabs()\n\n    return (\n        <Tabs\n            className='[&_.ant-tabs-nav::before]:border-slate-500 '\n            tabBarStyle={{\n                position: 'sticky',\n                top: -20,\n                background: 'var(--colors-global-2-bg-plasma)',\n                zIndex: 10,\n            }}\n            defaultActiveKey='1'\n            items={noteEditorTabs}\n            tabBarExtraContent={<NoteEditorFormSubmit />}\n            // onChange={onChange}\n            indicator={{ align: 'center' }}\n        />\n    )\n}\n","import { StyledButton } from '@/components/buttons/StyledButton'\nimport { IconHeart } from '@/assets/icons/IconHeart'\nimport { useFormikContext } from 'formik'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\n\nexport const ToggleFavoriteNewNote = () => {\n    const formikContext = useFormikContext<INoteSchema>()\n    const isFavorite = formikContext.values.is_favorite\n    return (\n        <>\n            <StyledButton\n                id='toggleFavoriteNote'\n                error={!!isFavorite}\n                variant={isFavorite ? 'contained' : 'text'}\n                size={'small'}\n                onClick={() => {\n                    formikContext.setFieldValue('is_favorite', !isFavorite)\n                }}\n                startIcon={<IconHeart className='mb-0.5 h-6 w-6 opacity-70 hover:opacity-100' />}\n            />\n        </>\n    )\n}\n","import { useFormikContext } from 'formik'\nimport { useNoteEditor$ } from '../../stores/note-editor-store/useNoteEditor.store'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { ToggleFavoriteNewNote } from './components/ToggleFavoriteNewNote'\nimport { NoteIsFavorite } from '@/modules/notes/shared-components/note-is-favorite/NoteIsFavorite'\nimport { NoteIsArchived } from '@/modules/notes/shared-components/note-is-archived/NoteIsArchived'\nimport { NoteIsDeleted } from '@/modules/notes/shared-components/note-is-deleted/NoteIsDeleted'\n\nexport const NoteEditorToolbar = () => {\n    const { store } = useNoteEditor$()\n    const formikContext = useFormikContext<INoteSchema>()\n\n    return (\n        <div className='relative flex w-full min-h-[32px] flex-wrap items-center justify-center gap-5'>\n            {/* {store.id && <ToggleEditNote id={store.id} />} */}\n            {!store.id ? (\n                <ToggleFavoriteNewNote />\n            ) : (\n                <NoteIsFavorite id={store.id} isFavorite={!!formikContext.values.is_favorite} />\n            )}\n            {store.id && <NoteIsArchived id={store.id} isArchived={!!formikContext.values.archived} />}\n            {store.id && <NoteIsDeleted id={store.id} deletedAt={!!formikContext.values.deleted_at} />}\n        </div>\n    )\n}\n","import { Form } from 'formik'\nimport { IconInfiniteLoading } from '@/assets/icons'\nimport { useNoteEditorFormInitialValues } from '../hooks/useNoteEditorFormInitialValues'\nimport { NoteEditorTabs } from './note-editor-tabs/NoteEditorTabs'\nimport { NoteEditorToolbar } from './note-editor-toolbar/NoteEditorToolbar'\n\nexport const NoteEditorForm = () => {\n    const { isLoading } = useNoteEditorFormInitialValues()\n\n    return (\n        <Form>\n            {isLoading && (\n                <div className='w-full h-full z-[100] bg-global-bg-plasma left-0 flex items-center duration-300 justify-center top-0 fixed'>\n                    <IconInfiniteLoading className='w-20 h-20 text-blue-500 duration-300' />\n                </div>\n            )}\n            <NoteEditorToolbar />\n            <NoteEditorTabs />\n        </Form>\n    )\n}\n","import { extractTextFromHtml } from '@/helpers/extractTextFromHtml'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\n\nexport const useNoteEditorFormOnValidate = () => {\n    const validate = (values: INoteSchema) => {\n        const errors: Partial<Record<keyof INoteSchema, string>> = {}\n\n        if (!extractTextFromHtml(values.description).length) {\n            errors.description = 'Required field'\n        }\n\n        return errors\n    }\n\n    return { validate }\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { type INoteSchema, noteSchema } from '@/modules/notes/shared-services/types'\nimport { graphql } from '@/api/tada'\nimport { noteResponseFr } from '../fragments/noteResponseFr'\n\nexport const mutation_upsertNote = async (props: { note: INoteSchema }) => {\n    try {\n        const client = await generateClient()\n\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            note: { label, ...object },\n        } = props\n\n        const insertToneMutation = graphql(\n            `\n                mutation mutation_upsertNote($object: notes_insert_input!) {\n                    insert_notes_one(\n                        object: $object\n                        on_conflict: { constraint: tasks_pkey, update_columns: [description, tag, label_id] }\n                    ) {\n                        ...NoteResponseFr\n                    }\n                }\n            `,\n            [noteResponseFr],\n        )\n\n        const insertNoteRes = await client\n            .request(insertToneMutation, {\n                object,\n            })\n            .then((response) => {\n                const zParse = noteSchema.parse(response.insert_notes_one)\n                return zParse\n            })\n\n        const updateNoteLabelMutation = graphql(`\n            mutation Mutation_updateNoteLabelRating($id: uuid!) {\n                update_notes_labels_by_pk(pk_columns: { id: $id }, _inc: { rating: 1 }) {\n                    id\n                    name\n                    owner_id\n                    rating\n                }\n            }\n        `)\n\n        object.label_id && (await client.request(updateNoteLabelMutation, { id: object.label_id }))\n\n        return insertNoteRes\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { type INoteSchema } from '../types'\nimport { mutation_upsertNote } from './mutation_upsertNote'\nimport { useInvalidateNotes } from '@/modules/notes/shared-hooks/useInvalidateNotes'\n\nexport const useUpsertNote = () => {\n    const { onSuccess } = useInvalidateNotes()\n\n    const mutation = useMutation({\n        mutationFn: ({ note }: { note: INoteSchema }) => {\n            return mutation_upsertNote({ note })\n        },\n        onSuccess: () => {\n            onSuccess()\n        },\n    })\n\n    const upsertNote = (props: { note: INoteSchema; onSuccess?: () => void; onSettled?: () => void }) => {\n        mutation.mutate({ note: props.note }, { onSuccess: props.onSuccess, onSettled: props.onSettled })\n    }\n\n    return { upsertNote }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { useNoteEditor$ } from '../stores/note-editor-store/useNoteEditor.store'\nimport { useUpsertNote } from '../../../shared-services/upsert-note/useUpsertNote'\nimport { noteEditorDialog$ } from '../mst/provider'\nimport { notifySuccess } from '@/helpers/processMessage'\n\nexport const useNoteEditorFormOnSubmit = () => {\n    const { onCancel } = useNoteEditor$()\n    const { upsertNote } = useUpsertNote()\n\n    const onSubmit = (values: INoteSchema, formikHelpers: FormikHelpers<INoteSchema>) => {\n        const { setSubmitting } = formikHelpers\n        const tagInput = noteEditorDialog$.tagInput\n        upsertNote({\n            note: {\n                ...values,\n                tag: tagInput.length ? `${values.tag || ''}${!!values.tag?.length ? ',' : ''}${tagInput}` : values.tag,\n            },\n            onSuccess: () => {\n                onCancel()\n                formikHelpers.resetForm()\n                noteEditorDialog$.onChangeField('tagInput', '')\n                notifySuccess('Note saved')\n            },\n            onSettled: () => {\n                setSubmitting(false)\n            },\n        })\n    }\n\n    return { onSubmit }\n}\n","import { Formik } from 'formik'\nimport { NoteEditorForm } from './NoteEditorForm'\nimport { type INoteSchema } from '@/modules/notes/shared-services/types'\nimport { useNoteEditorFormInitialValues } from '../hooks/useNoteEditorFormInitialValues'\nimport { useNoteEditorFormOnValidate } from '../hooks/useNoteEditorFormOnValidate'\nimport { useNoteEditorFormOnSubmit } from '../hooks/useNoteEditorFormOnSubmit'\n\n/**\n * @goalId toggle between new note and edit note\n */\nconst NoteEditor = () => {\n    const { onSubmit } = useNoteEditorFormOnSubmit()\n    const { validate } = useNoteEditorFormOnValidate()\n    const { initialValues } = useNoteEditorFormInitialValues()\n\n    return (\n        <Formik<INoteSchema> enableReinitialize initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n            <NoteEditorForm />\n        </Formik>\n    )\n}\n\nexport default NoteEditor\n"],"names":["query_fetchNote","props","id","client","generateClient","query","graphql","noteResponseFr","data","request","noteSchema","parse","notes_by_pk","e","resolveError","useFetchNote","isLoading","useQuery","queryKey","notesKeys","queryFn","staleTime","refetchOnWindowFocus","refetchOnMount","enabled","useNoteData","store","useNoteEditor$","useNoteEditorFormInitialValues","initialValues","initialNote","crypto","randomUUID","created_at","formatDateWithTimezone","deleted_at","is_favorite","archived","description","tag","label_id","label","name","useNoteEditorFormSubmit","OkText","tooltipText","disabled","isSubmitting","useFormikContext","NoteEditorFormSubmit","jsxs","jsx","StyledButton","IconInfiniteLoading","XTooltip","NoteDescriptionRichInput","formikContext","FormLabel","XTiptap","setFieldValue","content","touched","Boolean","errors","NoteCreatedDaysAgo","values","createdDaysAgo","calculateCreatedDaysAgo","createString","note","created","today","Date","now","createdAt","convertStringDate","getTime","diff","Math","floor","NoteCreatedAt","format","NoteTagInput","observer","tagInput","onChangeField","useNoteEditorDialog$","newTagIsValid","tagsOptimized","compact","split","map","t","trim","toLowerCase","slice","length","includes","deleteTag","tagToDelete","noteTags","getNoteTags","newTag","filter","noteTag","toString","XInput","target","value","startString","uniq","join","NoteTagsList","XAutocomplete","AutoComplete","height","inputValue","option","toUpperCase","indexOf","SelectLabelsByRating","handleSelect","notesLabels","useFetchNotesLabels","sortBy","reverse","nl","NoteLabelSelect","onChange","useEffect","find","d","handleClear","capitalize","_value","opt","cn","NoteInfo","Fragment","useNoteEditorTabs","noteEditorTabs","key","children","NoteEditorTabs","Tabs","position","top","background","zIndex","align","ToggleFavoriteNewNote","isFavorite","IconHeart","NoteEditorToolbar","NoteIsFavorite","NoteIsArchived","NoteIsDeleted","NoteEditorForm","Form","useNoteEditorFormOnValidate","validate","extractTextFromHtml","mutation_upsertNote","object","insertToneMutation","insertNoteRes","then","response","insert_notes_one","updateNoteLabelMutation","useUpsertNote","onSuccess","useInvalidateNotes","mutation","useMutation","mutationFn","upsertNote","mutate","onSettled","useNoteEditorFormOnSubmit","onCancel","onSubmit","formikHelpers","setSubmitting","noteEditorDialog$","resetForm","notifySuccess","NoteEditor","Formik"],"mappings":"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"}