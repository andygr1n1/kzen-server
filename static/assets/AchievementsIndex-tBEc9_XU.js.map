{"version":3,"mappings":"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","names":["filteredAchievementsFabric","achievements","timeFrame","compact","uniq","map","item","created_at","format","convertStringDate","filteredAchievements","filter","AchMobile","lazy","AchDefault","AchIndex","ach","isMobile","jsx","Suspense","useAchFilter$","queryClient","useQueryClient","queryKey","data","store","useQuery","staleTime","Infinity","refetchOnWindowFocus","refetchOnMount","initialData","searchInput","serverSearchInput","onChangeServerSearchInput","useMemo","debounce","e","setQueryData","target","value","onChange","useAchsData","queryFilter","location","useLocation","state","id","userId","useUser$","achs","fetchNextPage","hasNextPage","isLoading","isFetchingNextPage","useFetchAchs","limit","AchList","observer","ref","inView","useInView","useWindowMatchMedia","useEffect","jsxs","tp","renderAch","length","React","FormLabel","IsLoading","useGetAchParamsFilter","paramFilter","isAll","isStatusAll","isActive","isStatusActive","isFavorite","isStatusFavorite","isDeleted","isStatusDeleted","isArchived","isStatusArchived","ActiveFilterIcon","icon","IconFocus","IconAll","IconFavorite","IconDeleteTemp","IconArchive","AchFilterSelectButton","StyledButton","cn","AchFilterSelect","open","setOpen","useState","navigate","useNavigate","onClose","pathname","search","XDropdown","x","DropdownRender","XMenuDropdown","XMenuItem","artifactStatus","all","AddAch","onChangeField","useAchEditorDialog$","add","IconNew","SearchAchInput","cancel","XInput","IconSearch","AchHeader","AchEditorDialog","__vitePreload","AchsByFilter","ModuleWrapper","AchEditorDialog$Provider","achEditorDialog$","AchievementsIndex","Routes","Route","Navigate"],"ignoreList":[],"sources":["../../src/modules/achievements/components/achs-by-filter/ach-list/filteredAchievementsFabric.ts","../../src/modules/achievements/components/achs-by-filter/ach-list/components/ach/AchIndex.tsx","../../src/modules/achievements/components/achs-by-filter/ach-header/components/search-ach-input/useAchFilter.store.ts","../../src/modules/achievements/hooks/useAchsData.ts","../../src/modules/achievements/components/achs-by-filter/ach-list/AchList.tsx","../../src/modules/achievements/components/achs-by-filter/ach-header/components/ach-filter-select-button/useGetAchParamsFilter.ts","../../src/modules/achievements/components/achs-by-filter/ach-header/components/ach-filter-select-button/ActiveFilterIcon.tsx","../../src/modules/achievements/components/achs-by-filter/ach-header/components/ach-filter-select-button/AchFilterSelectButton.tsx","../../src/modules/achievements/components/achs-by-filter/ach-header/components/AchFilterSelect.tsx","../../src/modules/achievements/components/achs-by-filter/ach-header/components/AddAch.tsx","../../src/modules/achievements/components/achs-by-filter/ach-header/components/search-ach-input/SearchAchInput.tsx","../../src/modules/achievements/components/achs-by-filter/ach-header/AchHeader.tsx","../../src/modules/achievements/components/achs-by-filter/AchsByFilter.tsx","../../src/modules/achievements/AchievementsIndex.tsx"],"sourcesContent":["import { convertStringDate } from '@/helpers/date.helpers'\nimport { format } from 'date-fns'\nimport { compact, uniq } from 'lodash-es'\nimport { type IAch } from '../../../services/types'\n\nexport const filteredAchievementsFabric = (achievements: IAch[]) => {\n    const timeFrame = compact(\n        uniq(achievements.map((item) => item.created_at && format(convertStringDate(item.created_at), 'yyyy'))),\n    )\n\n    const filteredAchievements = (timeFrame: string) => {\n        return achievements.filter(\n            (item) => item.created_at && format(convertStringDate(item.created_at), 'yyyy') === timeFrame,\n        )\n    }\n\n    return { timeFrame, filteredAchievements }\n}\n","import type { MEDIA_QUERY_VALUES_ENUM } from '@/hooks/useMatchMedia.hook'\nimport { type IAch } from '@/modules/achievements/services/types'\nimport { lazy, Suspense } from 'react'\n\nconst AchMobile = lazy(() => import('./ach-mobile/AchMobile'))\nconst AchDefault = lazy(() => import('./ach-default/AchDefault'))\n\nexport const AchIndex: React.FC<{ ach: IAch; isMobile: MEDIA_QUERY_VALUES_ENUM }> = ({ ach, isMobile }) => {\n    return isMobile ? (\n        <Suspense fallback={null}>\n            <AchMobile ach={ach} />\n        </Suspense>\n    ) : (\n        <Suspense fallback={null}>\n            <AchDefault ach={ach} />\n        </Suspense>\n    )\n}\n","import { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { type ChangeEvent, useMemo } from 'react'\nimport { debounce } from 'lodash-es'\nimport { type IInputFilter$Schema } from '@/services/types'\n\nexport const useAchFilter$ = () => {\n    const queryClient = useQueryClient()\n    const queryKey = ['useAchFilter$']\n\n    const { data: store } = useQuery<IInputFilter$Schema>({\n        queryKey,\n        staleTime: Infinity,\n        refetchOnWindowFocus: false,\n        refetchOnMount: false,\n        initialData: { searchInput: '', serverSearchInput: '' },\n    })\n\n    const onChangeServerSearchInput = useMemo(() => {\n        return debounce((e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            queryClient.setQueryData(queryKey, {\n                ...store,\n                serverSearchInput: e.target.value,\n                searchInput: e.target.value,\n            })\n        }, 1000)\n    }, [])\n\n    const onChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        queryClient.setQueryData(queryKey, { ...store, searchInput: e.target.value })\n        onChangeServerSearchInput(e)\n    }\n\n    const serverSearchInput = store.serverSearchInput\n    const searchInput = store.searchInput\n\n    return {\n        store,\n        serverSearchInput,\n        onChange,\n        onChangeServerSearchInput,\n        searchInput,\n    }\n}\n","import { useLocation } from 'react-router-dom'\nimport { useAchFilter$ } from '../components/achs-by-filter/ach-header/components/search-ach-input/useAchFilter.store'\nimport { useFetchAchs } from '../services/fetch-achs/useFetchAchs'\nimport { type IArtifactStatus } from '@/services/types'\nimport { useUser$ } from '@/modules/app/mst/StoreProvider'\n\nexport const useAchsData = () => {\n    const { serverSearchInput } = useAchFilter$()\n    const location = useLocation()\n    const queryFilter: IArtifactStatus = location.state?.filter\n    const { id: userId } = useUser$()\n\n    const { achs, fetchNextPage, hasNextPage, isLoading, isFetchingNextPage } = useFetchAchs({\n        serverSearchInput,\n        limit: 20,\n        userId,\n        queryFilter,\n    })\n\n    return { achs, fetchNextPage, hasNextPage, isLoading, isFetchingNextPage }\n}\n","import { observer } from 'mobx-react-lite'\nimport { filteredAchievementsFabric } from './filteredAchievementsFabric'\nimport { IsLoading } from '@/components/loading/IsLoading'\nimport React, { useEffect } from 'react'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { AchIndex } from './components/ach/AchIndex'\nimport { useAchsData } from '../../../hooks/useAchsData'\nimport { useInView } from 'react-intersection-observer'\nimport { useWindowMatchMedia } from '@/hooks/useMatchMedia.hook'\n\nexport const AchList = observer(() => {\n    const { isLoading, achs, hasNextPage, fetchNextPage } = useAchsData()\n\n    const { timeFrame, filteredAchievements } = filteredAchievementsFabric(achs)\n\n    const { ref, inView } = useInView()\n\n    const { isMobile } = useWindowMatchMedia(['isMobile'])\n\n    useEffect(() => {\n        inView && hasNextPage && fetchNextPage()\n    }, [inView, hasNextPage])\n\n    return (\n        <div className='flex flex-col gap-5 w-full justify-center mx-auto relative'>\n            {timeFrame.map((tp) => {\n                const renderAch = filteredAchievements(tp)\n                return renderAch.length ? (\n                    <React.Fragment key={tp}>\n                        <div>{tp && <FormLabel title={tp} />}</div>\n                        <div className='flex flex-wrap gap-5 md:gap-2 items-center'>\n                            {renderAch.map((ach) => {\n                                return <AchIndex key={ach.id} ach={ach} isMobile={isMobile} />\n                            })}\n                        </div>\n                    </React.Fragment>\n                ) : null\n            })}\n\n            <div ref={ref} className='flex relative w-full min-h-[100px] justify-center'>\n                <IsLoading isLoading={isLoading} />\n            </div>\n        </div>\n    )\n})\n","import { isStatusActive, isStatusAll, isStatusArchived, isStatusDeleted, isStatusFavorite } from '@/services/guards'\nimport { type IArtifactStatus } from '@/services/types'\nimport { useLocation } from 'react-router-dom'\n\nexport const useGetAchParamsFilter = () => {\n    const location = useLocation()\n    const paramFilter: IArtifactStatus = location.state?.filter\n\n    const isAll = isStatusAll(paramFilter)\n    const isActive = isStatusActive(paramFilter)\n    const isFavorite = isStatusFavorite(paramFilter)\n    const isDeleted = isStatusDeleted(paramFilter)\n    const isArchived = isStatusArchived(paramFilter)\n\n    return { paramFilter, isAll, isActive, isFavorite, isDeleted, isArchived }\n}\n","import { IconDeleteTemp, IconFavorite } from '@/assets/icons'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { useGetAchParamsFilter } from './useGetAchParamsFilter'\nimport { IconAll } from '@/assets/icons/IconAll'\nimport { IconArchive } from '@/assets/icons/IconArchive'\n\nexport const ActiveFilterIcon: React.FC = () => {\n    const { isAll, isActive, isFavorite, isDeleted, isArchived } = useGetAchParamsFilter()\n\n    let icon = <IconFocus width={24} height={24} className='min-h-[24px] min-w-[24px]' />\n\n    if (isAll) icon = <IconAll width={24} height={24} className='min-h-[24px] min-w-[24px] text-sky-400' />\n    if (isActive) icon = <IconFocus width={24} height={24} className='min-h-[24px] min-w-[24px]' />\n    if (isFavorite) icon = <IconFavorite width={24} height={24} className='min-h-[24px] min-w-[24px] text-rose-600' />\n    if (isDeleted) icon = <IconDeleteTemp width={24} height={24} className='min-h-[24px] min-w-[24px] text-slate-600' />\n    if (isArchived) icon = <IconArchive width={24} height={24} className='min-h-[24px] min-w-[24px] text-violet-600' />\n    return icon\n}\n","import { observer } from 'mobx-react-lite'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { ActiveFilterIcon } from './ActiveFilterIcon'\nimport { cn } from '@/helpers/cn'\nimport { useGetAchParamsFilter } from './useGetAchParamsFilter'\n\nexport const AchFilterSelectButton: React.FC = observer(() => {\n    const { isAll, isFavorite, isDeleted, isArchived } = useGetAchParamsFilter()\n    return (\n        <StyledButton\n            startIcon={<ActiveFilterIcon />}\n            // onClick={ }\n            className={cn(\n                '!border-blue-600 hover:!bg-blue-600/20',\n                isAll && '!border-sky-400/20 hover:!bg-sky-400/20',\n                isFavorite && '!border-rose-500/20 hover:!bg-rose-500/20',\n                isArchived && '!border-violet-500/20 hover:!bg-violet-500/20',\n                isDeleted && '!border-slate-500/20 hover:!bg-slate-500/20',\n            )}\n            variant='outlined'\n        />\n    )\n})\n","import { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { useState } from 'react'\nimport { IconDeleteTemp, IconFavorite } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useNavigate } from 'react-router-dom'\nimport { IconFocus } from '@/assets/icons/IconFocus'\nimport { AchFilterSelectButton } from './ach-filter-select-button/AchFilterSelectButton'\nimport { type IArtifactStatus, artifactStatus } from '@/services/types'\nimport { IconAll } from '@/assets/icons/IconAll'\nimport { IconArchive } from '@/assets/icons/IconArchive'\n\nexport const AchFilterSelect = () => {\n    const [open, setOpen] = useState(false)\n    const navigate = useNavigate()\n\n    const onClose = (filter: IArtifactStatus) => {\n        navigate(\n            { pathname: '/achievements/filtered-achievements', search: `?filter=${filter}` },\n            { state: { filter } },\n        )\n        setOpen(false)\n    }\n\n    return (\n        <XDropdown\n            onOpenChange={(x) => {\n                setOpen(x)\n            }}\n            trigger={['hover']}\n            open={open}\n            dropdownRender={() => <DropdownRender onClose={onClose} />}\n            placement='bottomRight'\n            overlayClassName='!z-[55]'\n        >\n            <div>\n                <AchFilterSelectButton />\n            </div>\n        </XDropdown>\n    )\n}\n\nconst DropdownRender: React.FC<{ onClose: (filter: IArtifactStatus) => void }> = ({ onClose }) => {\n    return (\n        <XMenuDropdown>\n            <XMenuItem\n                onClick={() => {\n                    onClose('active')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFocus className='text-blue-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-blue-500'>Active</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('favorite')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconFavorite className='text-rose-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-rose-500'>Favorite</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('archived')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconArchive className='text-violet-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-violet-500'>Archived</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose('deleted')\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconDeleteTemp className='text-slate-500' width={24} height={24} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-slate-500'>Deleted</span>\n                </StyledButton>\n            </XMenuItem>\n            <XMenuItem\n                onClick={() => {\n                    onClose(artifactStatus.all)\n                }}\n            >\n                <StyledButton\n                    variant='text'\n                    size='small'\n                    startIcon={<IconAll className='text-sky-400' width={26} height={26} />}\n                >\n                    <span className='flex w-[110px] justify-start capitalize text-sky-400'>All</span>\n                </StyledButton>\n            </XMenuItem>\n        </XMenuDropdown>\n    )\n}\n","import { IconNew } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { useAchEditorDialog$ } from '../../../ach-editor-dialog/mst/provider'\n\nexport const AddAch: React.FC = () => {\n    const { onChangeField } = useAchEditorDialog$()\n\n    const add = () => {\n        onChangeField('open', true)\n    }\n\n    return (\n        <div className='opacity-70'>\n            <StyledButton startIcon={<IconNew width={24} height={24} />} onClick={add} variant='text'>\n                Add achievement\n            </StyledButton>\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { IconSearch } from '@/assets/icons/IconSearch'\nimport { useEffect } from 'react'\nimport { useAchFilter$ } from './useAchFilter.store'\n\nexport const SearchAchInput = () => {\n    const { store, onChange, onChangeServerSearchInput } = useAchFilter$()\n\n    useEffect(() => {\n        return () => {\n            onChangeServerSearchInput.cancel()\n        }\n    }, [])\n\n    return (\n        <XInput\n            type='text'\n            autoFocus={false}\n            value={store.searchInput}\n            onChange={onChange}\n            startIcon={<IconSearch className='text-slate-500/50' width={20} height={20} />}\n            placeholder='Search'\n            width='!max-w-[600px] !w-full'\n        />\n    )\n}\n","import { AchFilterSelect } from './components/AchFilterSelect'\nimport { AddAch } from './components/AddAch'\nimport { SearchAchInput } from './components/search-ach-input/SearchAchInput'\n\nexport const AchHeader: React.FC = () => {\n    return (\n        <div className='flex w-full mx-auto gap-8'>\n            <div className='flex flex-col w-full gap-4'>\n                <AddAch />\n                <div className='flex w-full items-center justify-end gap-2'>\n                    <SearchAchInput />\n                    <div className='flex gap-2 w-[108px]'>\n                        <AchFilterSelect />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import { ModuleWrapper } from '@/components/ModuleWrapper'\nimport { useLocation } from 'react-router-dom'\nimport { Suspense, lazy } from 'react'\nimport { type IArtifactStatus } from '@/services/types'\nimport { AchList } from './ach-list/AchList'\nimport { AchHeader } from './ach-header/AchHeader'\nimport { achEditorDialog$, AchEditorDialog$Provider } from '../ach-editor-dialog/mst/provider'\n\nconst AchEditorDialog = lazy(() => import('@/modules/achievements/components/ach-editor-dialog/AchEditorDialog'))\n\nexport const AchsByFilter: React.FC = () => {\n    const location = useLocation()\n    const queryFilter: IArtifactStatus = location.state?.filter\n\n    return (\n        <ModuleWrapper>\n            <div className='flex flex-col gap-10 w-full max-w-[600px] mx-auto relative'>\n                <AchEditorDialog$Provider store={achEditorDialog$}>\n                    <Suspense fallback={null}>\n                        <AchHeader />\n                        <AchEditorDialog />\n                    </Suspense>\n                    <AchList key={queryFilter} />\n                </AchEditorDialog$Provider>\n            </div>\n        </ModuleWrapper>\n    )\n}\n","import { Navigate, Route, Routes } from 'react-router-dom'\nimport { AchsByFilter } from './components/achs-by-filter/AchsByFilter'\n\nconst AchievementsIndex: React.FC = () => {\n    return (\n        <Routes>\n            <Route\n                path={'/'}\n                element={\n                    <Navigate to={`/achievements/filtered-achievements?filter=active`} state={{ filter: 'active' }} />\n                }\n            />\n            <Route path='filtered-achievements' element={<AchsByFilter />} />\n        </Routes>\n    )\n}\n\nexport default AchievementsIndex\n"],"file":"assets/AchievementsIndex-tBEc9_XU.js"}