{"version":3,"file":"achResponseFr-DHzlt_Pk.js","sources":["../../src/modules/achievements/services/types.ts","../../src/modules/achievements/services/achService.ts","../../src/modules/achievements/services/fragments/achResponseFr.ts"],"sourcesContent":["import { type IArtifactStatus } from '@/services/types'\nimport { z } from 'zod'\nimport type { achResponseFr } from './fragments/achResponseFr'\nimport type { ResultOf } from 'gql.tada'\n\nexport const achSchema = z.object({\n    id: z.string().uuid(),\n    title: z.string(),\n    description: z.string().nullable(),\n    created_at: z.string(),\n    deleted_at: z.string().nullable(),\n    is_favorite: z.boolean(),\n    img_path: z.string().nullable(),\n    archived: z.boolean(),\n    freezed: z.boolean(),\n    /*  */\n    img_src: z.string().optional(),\n    img_src_buffer: z.string().optional(),\n})\n\nexport type IAch = ResultOf<typeof achResponseFr>\n\nexport type IAchEditor = z.infer<typeof achSchema>\n\nexport const achsResponseSchema = z.object({\n    achievements: z.array(achSchema),\n})\n\nexport type IUseFetchAchs = {\n    queryFilter: IArtifactStatus\n    limit: number\n    serverSearchInput: string\n    userId: string\n}\n\nexport type IUseFetchAchsQuery = {\n    limit: number\n    serverSearchInput: string\n    offset?: number\n}\n","export const achService = {\n    instance: ['achService'],\n    fetchAchsKey: (key: string) => [achService.instance, 'fetchAchsKey', key],\n    fetchAchKey: (key: string | null) => [achService.instance, 'fetchAchKey', key],\n}\n","import { graphql } from '@/api/tada'\n\nexport const achResponseFr = graphql(`\n    fragment AchResponseFr on achievements @_unmask {\n        id\n        title\n        img_path\n        created_at\n        updated_at\n        deleted_at\n        archived\n        is_favorite\n        description\n        freezed\n    }\n`)\n"],"names":["achSchema","z","object","id","string","uuid","title","description","nullable","created_at","deleted_at","is_favorite","boolean","img_path","archived","freezed","img_src","optional","img_src_buffer","achievements","array","achService","instance","fetchAchsKey","key","fetchAchKey","achResponseFr","graphql"],"mappings":"+CAKaA,MAAAA,EAAYC,EAAEC,OAAO,CAC9BC,GAAIF,EAAEG,OAAO,EAAEC,KAAK,EACpBC,MAAOL,EAAEG,OAAO,EAChBG,YAAaN,EAAEG,OAAO,EAAEI,SAAS,EACjCC,WAAYR,EAAEG,OAAO,EACrBM,WAAYT,EAAEG,OAAO,EAAEI,SAAS,EAChCG,YAAaV,EAAEW,QAAQ,EACvBC,SAAUZ,EAAEG,OAAO,EAAEI,SAAS,EAC9BM,SAAUb,EAAEW,QAAQ,EACpBG,QAASd,EAAEW,QAAQ,EAEnBI,QAASf,EAAEG,OAAO,EAAEa,SAAS,EAC7BC,eAAgBjB,EAAEG,OAAO,EAAEa,SAAS,CACxC,CAAC,EAMiChB,EAAEC,OAAO,CACvCiB,aAAclB,EAAEmB,MAAMpB,CAAS,CACnC,CAAC,EC1BM,MAAMqB,EAAa,CACtBC,SAAU,CAAC,YAAY,EACvBC,aAAeC,GAAgB,CAACH,EAAWC,SAAU,eAAgBE,CAAG,EACxEC,YAAcD,GAAuB,CAACH,EAAWC,SAAU,cAAeE,CAAG,CACjF,ECFaE,EAAgBC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAarC"}