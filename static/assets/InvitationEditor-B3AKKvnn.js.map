{"version":3,"file":"InvitationEditor-B3AKKvnn.js","sources":["../../src/modules/wedding-story-admin/components/create-invitation-editor/components/form-fields/GuestNameInput.tsx","../../src/modules/wedding-story-admin/components/create-invitation-editor/components/form-fields/GuestSurnameInput.tsx","../../src/modules/wedding-story-admin/components/create-invitation-editor/components/InvitationEditorForm.tsx","../../src/modules/wedding-story-admin/helpers/generateBookingNumber.ts","../../src/modules/wedding-story-admin/hooks/useInvitationEditorFormCreateInvitation.ts","../../src/modules/wedding-story-admin/hooks/useInvitationEditorFormOnSubmit.ts","../../src/modules/wedding-story-admin/components/create-invitation-editor/components/InvitationEditor.tsx"],"sourcesContent":["import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport type { IInvitationEditorSchema } from '@/modules/wedding-story-admin/services/types'\n\nexport const GuestNameInput: React.FC<{ type: 'name1' | 'name2' }> = ({ type }) => {\n    const formikContext = useFormikContext<IInvitationEditorSchema>()\n\n    return (\n        <div>\n            <FormLabel title={`${type === 'name1' ? 'First guest name *' : 'Second guest name'}`} />\n            <XInput\n                data-testid={`guest-name-input-${type}`}\n                autoFocus={type === 'name1'}\n                value={formikContext.values[type]}\n                name={type}\n                onChange={formikContext.handleChange}\n                error={formikContext.touched[type] && Boolean(formikContext.errors[type])}\n                errorMessage={formikContext.errors[type]}\n            />\n        </div>\n    )\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport type { IInvitationEditorSchema } from '@/modules/wedding-story-admin/services/types'\n\nexport const GuestSurnameInput: React.FC<{ type: 'surname1' | 'surname2' }> = ({ type }) => {\n    const formikContext = useFormikContext<IInvitationEditorSchema>()\n\n    return (\n        <div>\n            <FormLabel title={`${type === 'surname1' ? 'First guest surname' : 'Second guest surname'}`} />\n            <XInput\n                data-testid={`guest-surname-input-${type}`}\n                value={formikContext.values[type]}\n                name={type}\n                onChange={formikContext.handleChange}\n                error={formikContext.touched[type] && Boolean(formikContext.errors[type])}\n                errorMessage={formikContext.errors[type]}\n            />\n        </div>\n    )\n}\n","import { IconInvitationMail } from '@/assets/icons/IconInvitationMail'\nimport { GuestNameInput } from './form-fields/GuestNameInput'\nimport { GroupNameInput } from './form-fields/GroupNameInput'\nimport { IconAwardStar } from '@/assets/icons'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { Form } from 'formik'\nimport { GuestSurnameInput } from './form-fields/GuestSurnameInput'\n\nexport const InvitationEditorForm = () => {\n    return (\n        <Form className='flex flex-col gap-4 h-full'>\n            <div className='flex flex-col gap-4 flex-auto'>\n                <div className='flex justify-center'>\n                    <IconInvitationMail className='w-10 h-10 text-cText opacity-70' />\n                </div>\n                <GroupNameInput />\n                <div className='flex gap-2 my-2 justify-center'>\n                    <IconAwardStar className='w-5 h-5 justify-center text-cText opacity-70' />\n                </div>\n                <GuestNameInput type='name1' />\n                <GuestSurnameInput type='surname1' />\n                <div className='flex gap-2 my-2 justify-center'>\n                    <IconAwardStar className='w-5 h-5 justify-center text-cText opacity-70' />\n                </div>\n                <GuestNameInput type='name2' />\n                <GuestSurnameInput type='surname2' />\n            </div>\n            <StyledButton type='submit' className='w-full' size='large'>\n                Create Invitation\n            </StyledButton>\n        </Form>\n    )\n}\n","export const generateBookingNumber = (): string => {\n    const array = new Uint8Array(5)\n    crypto.getRandomValues(array)\n    return Array.from(array, (byte) => ('0' + (byte % 36).toString(36)).slice(-1).toUpperCase()).join('')\n}\n","import type { IInvitationEditorSchema } from '../services/types'\nimport { useInsertWeddingGroupMutation, useInsertWeddingGuestsMutation } from '../services/apiWeddingStorySlice'\nimport { generateBookingNumber } from '../helpers/generateBookingNumber'\n\nexport const useInvitationEditorFormCreateInvitation = () => {\n    const [actionInsertGroup] = useInsertWeddingGroupMutation()\n    const [actionInsertGuests] = useInsertWeddingGuestsMutation()\n\n    const createInvitation = async ({\n        values,\n        onSuccess,\n    }: {\n        values: IInvitationEditorSchema\n        onSuccess: () => void\n    }) => {\n        const group_id = crypto.randomUUID()\n        const booking_number = generateBookingNumber()\n\n        const object = {\n            id: group_id,\n            name: values.groupName,\n            booking_number,\n        }\n\n        await actionInsertGroup({ object })\n\n        const objects = [\n            {\n                group_id,\n                first_name: values.name1,\n                last_name: values.surname1,\n                primary: true,\n            },\n        ]\n\n        if (values.name2) {\n            objects.push({\n                group_id,\n                first_name: values.name2,\n                last_name: values.surname2,\n                primary: false,\n            })\n        }\n\n        await actionInsertGuests({ objects })\n            .unwrap()\n            .then(() => onSuccess())\n    }\n\n    return { createInvitation }\n}\n","import { type FormikHelpers } from 'formik'\nimport type { IInvitationEditorSchema } from '../services/types'\nimport { useInvitationEditorFormCreateInvitation } from './useInvitationEditorFormCreateInvitation'\nimport { useDispatch } from 'react-redux'\nimport { updateField } from '../services/weddingStoryEditorSlice'\n\nexport const useInvitationEditorFormOnSubmit = () => {\n    const dispatch = useDispatch()\n    const { createInvitation } = useInvitationEditorFormCreateInvitation()\n\n    const onClose = () => {\n        dispatch(updateField({ field: 'open', value: false }))\n    }\n\n    const onSubmit = (values: IInvitationEditorSchema, formikHelpers: FormikHelpers<IInvitationEditorSchema>) => {\n        const { setSubmitting } = formikHelpers\n        createInvitation({\n            values,\n            onSuccess: () => {\n                setSubmitting(false)\n                // notifySuccess('Invitation created successfully')\n                onClose()\n            },\n        })\n    }\n\n    return { onSubmit }\n}\n","import { Formik } from 'formik'\nimport { InvitationEditorForm } from './InvitationEditorForm'\nimport type { IInvitationEditorSchema } from '@/modules/wedding-story-admin/services/types'\nimport { useInvitationEditorFormOnSubmit } from '@/modules/wedding-story-admin/hooks/useInvitationEditorFormOnSubmit'\nimport { useInvitationEditorFormOnValidate } from '@/modules/wedding-story-admin/hooks/useInvitationEditorFormOnValidate'\nimport { useInvitationEditorFormInitialValues } from '@/modules/wedding-story-admin/hooks/useInvitationEditorFormInitialValues'\n\nconst InvitationEditor = () => {\n    const { onSubmit } = useInvitationEditorFormOnSubmit()\n    const { validate } = useInvitationEditorFormOnValidate()\n    const { initialValues } = useInvitationEditorFormInitialValues()\n\n    return (\n        <Formik<IInvitationEditorSchema>\n            enableReinitialize\n            initialValues={initialValues}\n            validate={validate}\n            onSubmit={onSubmit}\n        >\n            <InvitationEditorForm />\n        </Formik>\n    )\n}\n\nexport default InvitationEditor\n"],"names":["GuestNameInput","type","formikContext","useFormikContext","jsx","FormLabel","XInput","values","handleChange","touched","Boolean","errors","GuestSurnameInput","InvitationEditorForm","jsxs","Form","IconInvitationMail","GroupNameInput","IconAwardStar","StyledButton","generateBookingNumber","array","Uint8Array","crypto","getRandomValues","Array","from","byte","toString","slice","toUpperCase","join","useInvitationEditorFormCreateInvitation","actionInsertGroup","useInsertWeddingGroupMutation","actionInsertGuests","useInsertWeddingGuestsMutation","createInvitation","onSuccess","group_id","randomUUID","booking_number","object","id","name","groupName","objects","first_name","name1","last_name","surname1","primary","name2","push","surname2","unwrap","then","useInvitationEditorFormOnSubmit","dispatch","useDispatch","onClose","updateField","field","value","onSubmit","formikHelpers","setSubmitting","InvitationEditor","validate","useInvitationEditorFormOnValidate","initialValues","useInvitationEditorFormInitialValues","Formik"],"mappings":"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"}