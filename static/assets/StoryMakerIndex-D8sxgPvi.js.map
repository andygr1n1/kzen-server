{"version":3,"mappings":"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","names":["query_fetchStoryInfo","storyId","client","generateClient","query","graphql","storyResponseFr","request","then","res","stories","e","resolveError","useFetchStoryInfo","data","isLoading","useQuery","queryKey","storyMakerService","queryFn","cast","staleTime","refetchOnWindowFocus","refetchOnMount","enabled","useStoryData","location","useLocation","uuidRegex","match","pathname","story","StoryMakerDetails","observer","jsxs","jsx","XSkeleton","img_path","NoImage","title","storyMessageResponseFr","mutation_insertStoryMessage","html","imgPath","updatedAt","mutation","object","story_id","description","mutation_updateStoryMessage","id","useUuidFromPath","useSaveStoryMessage","createMutation","useMutation","mutationFn","formatDateWithTimezone","updateMutation","formatISO","Date","saveStoryMessage","onSuccess","onSettled","mutate","updateStoryMessage","StoryTipTap","queryClient","useQueryClient","isMobile","useWindowMatchMedia","XTiptap","clearEditor","extractTextFromHtml","trim","length","notify","invalidateQueries","useFetchStoryMessages","storyMessagesResponseFr","query_fetchStoryMessages","useStoryMessagesData","StoryMessageMobile","lazy","__vitePreload","StoryMessageDefault","StoryMessageIndex","message","Suspense","StoryMessagesList","stories_messages","map","StoryMessages","StoryMaker$","types","model","editSelectedMessageId","maybe","string","actions","self","onChangeField","field","value","storeContext","createContext","storyMaker$","create","useStoryMaker$","store","useContext","Error","StoryMaker$Provider","children","StoryMakerContextMenu","action","onClose","XMenuDropdown","XMenuItem","EditStory","StoryMakerMenu","popoverState","setPopoverState","useTogglePopoverState","StoryEditorDialog$Provider","storyEditorDialog$","StoryEditorDialog","XDropdown","StyledButton","IconThreeDots","StoryMakerIndex","ModuleWrapper"],"ignoreList":[],"sources":["../../src/modules/stories/components/story-maker/service/query_fetchStoryInfo.ts","../../src/modules/stories/components/story-maker/service/useFetchStory.ts","../../src/modules/stories/components/story-maker/hooks/useStoryData.ts","../../src/modules/stories/components/story-maker/components/story-maker-details/StoryMakerDetails.tsx","../../src/modules/stories/services/fragments/storyMessageResponseFr.ts","../../src/modules/stories/components/story-maker/service/mutation_insertStoryMessage.ts","../../src/modules/stories/components/story-maker/service/mutation_updateStoryMessage.ts","../../src/hooks/useUuidFromPath.ts","../../src/modules/stories/components/story-maker/service/useSaveStoryMessage.ts","../../src/modules/stories/components/story-maker/components/story-tip-tap/StoryTipTap.tsx","../../src/modules/stories/services/fragments/storyMessagesResponseFragment.ts","../../src/modules/stories/components/story-maker/service/query_fetchStoryMessages.ts","../../src/modules/stories/components/story-maker/service/useFetchStoryMessages.ts","../../src/modules/stories/components/story-maker/hooks/useStoryMessagesData.ts","../../src/modules/stories/components/story-maker/components/story-message/StoryMessageIndex.tsx","../../src/modules/stories/components/story-maker/components/story-messages-list/StoryMessagesList.tsx","../../src/modules/stories/components/story-maker/components/story-messages/StoryMessages.tsx","../../src/modules/stories/components/story-maker/mst/stores/StoryMaker.store.ts","../../src/modules/stories/components/story-maker/mst/provider.tsx","../../src/modules/stories/components/story-maker/components/story-maker-menu/StoryMakerContextMenu.tsx","../../src/modules/stories/components/story-maker/components/story-maker-menu/StoryMakerMenu.tsx","../../src/modules/stories/components/story-maker/StoryMakerIndex.tsx"],"sourcesContent":["import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\nimport { storyResponseFr } from '@/modules/stories/services/fragments/storyResponseFr'\n\nexport const query_fetchStoryInfo = async ({ storyId }: { storyId: string }) => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_full_story($storyId: uuid!) {\n                    stories(where: { id: { _eq: $storyId } }) {\n                        id\n                        ...StoryResponseFr\n                    }\n                }\n            `,\n            [storyResponseFr],\n        )\n\n        return await client.request(query, { storyId }).then((res) => res?.stories?.[0])\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useQuery } from '@tanstack/react-query'\nimport { cast } from '@/helpers'\nimport { query_fetchStoryInfo } from './query_fetchStoryInfo'\nimport { storyMakerService } from './storyMakerService'\n\nexport const useFetchStoryInfo = ({ storyId }: { storyId?: string }) => {\n    const { data, isLoading } = useQuery({\n        queryKey: storyMakerService.useFetchStoryInfo(storyId),\n        queryFn: () => query_fetchStoryInfo({ storyId: cast(storyId) }),\n        staleTime: 1000,\n        refetchOnWindowFocus: false,\n        refetchOnMount: true,\n        enabled: !!storyId,\n    })\n\n    return { data, isLoading }\n}\n","import { useLocation } from 'react-router-dom'\nimport { useFetchStoryInfo } from '../service/useFetchStory'\n\nexport const useStoryData = () => {\n    const location = useLocation()\n    const uuidRegex = /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/\n    const match = location.pathname.match(uuidRegex)\n    const { data: story, isLoading } = useFetchStoryInfo({ storyId: match?.[0] })\n    return { story, isLoading }\n}\n","import { observer } from 'mobx-react-lite'\nimport { useStoryData } from '../../hooks/useStoryData'\nimport { XSkeleton } from '@/components-x/x-skeleton/XSkeleton'\nimport { NoImage } from '@/components/NoImage'\n\nexport const StoryMakerDetails: React.FC = observer(() => {\n    const { story, isLoading } = useStoryData()\n    if (!story) return null\n    return (\n        <div className='flex gap-4 animate-opacity-3 w-full h-32'>\n            {isLoading && <XSkeleton length={3} />}\n            <div className='h-32 w-32'>\n                {story.img_path ? (\n                    <img\n                        src={`${import.meta.env['VITE_FIRE_BUNNY_STORAGE']}stories/${story.img_path}`}\n                        className='animate-opacity-3 rounded-lg h-32 w-32'\n                    />\n                ) : (\n                    <NoImage />\n                )}\n            </div>\n            <div className='py-2 text-xl font-atkinson text-cText'>{story?.title}</div>\n        </div>\n    )\n})\n","import { graphql } from '@/api/tada'\n\nexport const storyMessageResponseFr = graphql(`\n    fragment StoryMessageResponseFr on stories_messages @_unmask {\n        id\n        description\n        img_path\n        active_by_user\n        created_at\n        updated_at\n        created_by\n        updated_by\n        updated_by_user {\n            avatar\n            name\n        }\n        story {\n            users\n        }\n    }\n`)\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { storyMessageResponseFr } from '@/modules/stories/services/fragments/storyMessageResponseFr'\n\nexport const mutation_insertStoryMessage = async ({\n    html,\n    storyId,\n    imgPath,\n    updatedAt,\n}: {\n    html: string\n    storyId: string\n    imgPath: string[]\n    updatedAt: string\n}) => {\n    try {\n        const client = await generateClient()\n\n        const mutation = graphql(\n            `\n                mutation mutation_insertStoryMessage(\n                    $object: stories_messages_insert_input!\n                    $storyId: uuid!\n                    $updatedAt: timestamptz\n                ) {\n                    insert_stories_messages_one(object: $object) {\n                        ...StoryMessageResponseFr\n                    }\n                    update_stories_by_pk(pk_columns: { id: $storyId }, _set: { updated_at: $updatedAt }) {\n                        id\n                    }\n                }\n            `,\n            [storyMessageResponseFr],\n        )\n\n        const object = {\n            story_id: storyId,\n            description: html,\n            img_path: imgPath,\n        }\n\n        return await client.request(mutation, {\n            object,\n            storyId,\n            updatedAt,\n        })\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { storyMessageResponseFr } from '@/modules/stories/services/fragments/storyMessageResponseFr'\n\nexport const mutation_updateStoryMessage = async ({\n    id,\n    description,\n    storyId,\n    updatedAt,\n}: {\n    description: string\n    id: string\n    storyId: string\n    updatedAt: string\n}) => {\n    try {\n        const client = await generateClient()\n\n        const mutation = graphql(\n            `\n                mutation mutation_updateStoryMessage(\n                    $id: uuid!\n                    $description: String\n                    $storyId: uuid!\n                    $updatedAt: timestamptz\n                ) {\n                    update_stories_messages_by_pk(pk_columns: { id: $id }, _set: { description: $description }) {\n                        ...StoryMessageResponseFr\n                    }\n                    update_stories_by_pk(pk_columns: { id: $storyId }, _set: { updated_at: $updatedAt }) {\n                        id\n                    }\n                }\n            `,\n            [storyMessageResponseFr],\n        )\n\n        return await client.request(mutation, { id, description, storyId, updatedAt })\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useLocation } from 'react-router-dom'\n\nexport const useUuidFromPath = () => {\n    const location = useLocation()\n    const uuidRegex = /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/\n    const match = location.pathname.match(uuidRegex)\n\n    return { id: match?.[0] }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { mutation_insertStoryMessage } from './mutation_insertStoryMessage'\nimport { mutation_updateStoryMessage } from './mutation_updateStoryMessage'\nimport { formatDateWithTimezone } from '@/helpers/date.helpers'\nimport { useUuidFromPath } from '@/hooks/useUuidFromPath'\nimport { cast } from '@/helpers'\nimport { formatISO } from 'date-fns'\n\nexport const useSaveStoryMessage = () => {\n    const { id: storyId } = useUuidFromPath()\n    const createMutation = useMutation({\n        mutationFn: async ({ html, storyId, imgPath }: { html: string; storyId: string; imgPath: string[] }) => {\n            return mutation_insertStoryMessage({\n                html,\n                storyId,\n                imgPath,\n                updatedAt: formatDateWithTimezone(),\n            })\n        },\n    })\n\n    const updateMutation = useMutation({\n        mutationFn: async ({ id, description }: { description: string; id: string }) => {\n            return mutation_updateStoryMessage({\n                description,\n                id,\n                storyId: cast(storyId),\n                updatedAt: formatISO(new Date()),\n            })\n        },\n    })\n\n    const saveStoryMessage = ({\n        html,\n        storyId,\n        imgPath,\n        onSuccess,\n        onSettled,\n    }: {\n        html: string\n        storyId: string\n        imgPath: string[]\n        onSuccess?: () => void\n        onSettled?: () => void\n    }) => {\n        createMutation.mutate(\n            { html, storyId, imgPath },\n            {\n                onSuccess: () => {\n                    onSuccess?.()\n                },\n                onSettled,\n            },\n        )\n    }\n\n    const updateStoryMessage = ({\n        description,\n        id,\n        onSuccess,\n        onSettled,\n    }: {\n        description: string\n        id: string\n        onSuccess?: () => void\n        onSettled?: () => void\n    }) => {\n        updateMutation.mutate(\n            { description, id },\n            {\n                onSuccess: () => {\n                    onSuccess?.()\n                },\n                onSettled,\n            },\n        )\n    }\n\n    return { saveStoryMessage, updateStoryMessage }\n}\n","import { XTiptap } from '@/components-x/x-tiptap/XTiptap'\nimport { observer } from 'mobx-react-lite'\nimport { useSaveStoryMessage } from '../../service/useSaveStoryMessage'\nimport { useUuidFromPath } from '@/hooks/useUuidFromPath'\nimport { cast } from '@/helpers'\nimport { storyMakerService } from '../../service/storyMakerService'\nimport { useQueryClient } from '@tanstack/react-query'\nimport { extractTextFromHtml } from '@/helpers/extractTextFromHtml'\nimport { notify } from '@/helpers/processMessage'\nimport { useWindowMatchMedia } from '@/hooks/useMatchMedia.hook'\n\nexport const StoryTipTap: React.FC = observer(() => {\n    const queryClient = useQueryClient()\n    const { saveStoryMessage } = useSaveStoryMessage()\n    const { id } = useUuidFromPath()\n    const { isMobile } = useWindowMatchMedia(['isMobile'])\n    return (\n        <div className='flex flex-col w-full'>\n            <XTiptap\n                showSaveButtonTooltip={!isMobile}\n                content=''\n                customToolbar\n                onSave={({ html, clearEditor }) => {\n                    if (!extractTextFromHtml(html).trim().length) {\n                        notify('Type something')\n                        return\n                    }\n                    saveStoryMessage({\n                        html,\n                        imgPath: [],\n                        storyId: cast(id),\n                        onSuccess: () => {\n                            queryClient.invalidateQueries({ queryKey: storyMakerService.useFetchStoryMessages(id) })\n                        },\n                    })\n                    clearEditor()\n                }}\n            ></XTiptap>\n        </div>\n    )\n})\n","import { graphql } from '@/api/tada'\n\nexport const storyMessagesResponseFr = graphql(`\n    fragment StoryMessagesResponseFr on stories @_unmask {\n        stories_messages(order_by: { created_at: desc }, where: { deleted_at: { _is_null: true } }) {\n            id\n            description\n            img_path\n            active_by_user\n            created_at\n            updated_at\n            created_by\n            updated_by\n            updated_by_user {\n                avatar\n                name\n            }\n            story {\n                users\n            }\n        }\n    }\n`)\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { graphql } from '@/api/tada'\nimport { storyMessagesResponseFr } from '@/modules/stories/services/fragments/storyMessagesResponseFragment'\n\nexport const query_fetchStoryMessages = async ({ storyId }: { storyId: string }) => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(\n            `\n                query query_full_story($storyId: uuid!) {\n                    stories(where: { id: { _eq: $storyId } }) {\n                        id\n\n                        ...StoryMessagesResponseFr\n                    }\n                }\n            `,\n            [storyMessagesResponseFr],\n        )\n\n        return await client.request(query, { storyId }).then((res) => res?.stories?.[0])\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useQuery } from '@tanstack/react-query'\nimport { cast } from '@/helpers'\nimport { query_fetchStoryMessages } from './query_fetchStoryMessages'\nimport { storyMakerService } from './storyMakerService'\n\nexport const useFetchStoryMessages = ({ storyId }: { storyId?: string }) => {\n    const { data, isLoading } = useQuery({\n        queryKey: storyMakerService.useFetchStoryMessages(storyId),\n        queryFn: () => query_fetchStoryMessages({ storyId: cast(storyId) }),\n        staleTime: 1000,\n        refetchOnWindowFocus: false,\n        refetchOnMount: true,\n        enabled: !!storyId,\n    })\n\n    return { data, isLoading }\n}\n","import { useLocation } from 'react-router-dom'\nimport { useFetchStoryMessages } from '../service/useFetchStoryMessages'\n\nexport const useStoryMessagesData = () => {\n    const location = useLocation()\n    const uuidRegex = /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/\n    const match = location.pathname.match(uuidRegex)\n    const { data: story, isLoading } = useFetchStoryMessages({ storyId: match?.[0] })\n    return { story, isLoading }\n}\n","import type { MEDIA_QUERY_VALUES_ENUM } from \"@/hooks/useMatchMedia.hook\";\nimport type { IStoryMessage } from \"@/modules/stories/services/types\";\nimport { lazy, Suspense } from 'react'\n\nconst StoryMessageMobile = lazy(() => import('./story-message-mobile/StoryMessageMobile'))\nconst StoryMessageDefault = lazy(() => import('./story-message-default/StoryMessageDefault'))\n\nexport const StoryMessageIndex: React.FC<{ message: IStoryMessage; isMobile: MEDIA_QUERY_VALUES_ENUM }> = ({\n    message,\n    isMobile,\n}) => {\n    return isMobile ? (\n        <Suspense fallback={<div>null</div>}>\n            <StoryMessageMobile message={message} />\n        </Suspense>\n    ) : (\n        <Suspense fallback={<div>null</div>}>\n            <StoryMessageDefault message={message} />\n        </Suspense>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport { useStoryMessagesData } from '../../hooks/useStoryMessagesData'\nimport { XSkeleton } from '@/components-x/x-skeleton/XSkeleton'\nimport { useWindowMatchMedia } from '@/hooks/useMatchMedia.hook'\nimport { StoryMessageIndex } from '../story-message/StoryMessageIndex'\n\nexport const StoryMessagesList: React.FC = observer(() => {\n    const { story, isLoading } = useStoryMessagesData()\n    const { isMobile } = useWindowMatchMedia(['isMobile'])\n    return (\n        <div className='flex flex-col flex-auto h-full'>\n            {isLoading && <XSkeleton length={4} />}\n            <div>\n                {story?.stories_messages?.map((message) => (\n                    <StoryMessageIndex key={message.id} message={message} isMobile={isMobile} />\n                ))}\n            </div>\n        </div>\n    )\n})\n","import { StoryTipTap } from '../story-tip-tap/StoryTipTap'\nimport { StoryMessagesList } from '../story-messages-list/StoryMessagesList'\n\nexport const StoryMessages = () => {\n    return (\n        <div className='h-full flex flex-col gap-5 w-full '>\n            <StoryTipTap />\n            <div className='flex flex-col flex-auto h-full'>\n                <StoryMessagesList />\n            </div>\n        </div>\n    )\n}\n","import { type Instance, types } from 'mobx-state-tree'\n\nexport const StoryMaker$ = types\n    .model('StoryMaker$', {\n        editSelectedMessageId: types.maybe(types.string),\n    })\n    .actions((self) => ({\n        onChangeField<Key extends keyof typeof self>(field: Key, value: (typeof self)[Key]) {\n            self[field] = value\n        },\n    }))\n\nexport interface IStoryMaker$ extends Instance<typeof StoryMaker$> {}\n","import { type ReactNode, createContext, useContext } from 'react'\nimport { type IStoryMaker$, StoryMaker$ } from './stores/StoryMaker.store'\nconst storeContext = createContext<IStoryMaker$ | null>(null)\n\nexport const storyMaker$ = StoryMaker$.create({})\n\nexport const useStoryMaker$ = (): IStoryMaker$ => {\n    const store = useContext(storeContext)\n    if (!store) {\n        throw new Error('useStoryMaker$ shall be used within StoreProvider')\n    }\n\n    return store\n}\n\nexport const StoryMaker$Provider = ({ children, store }: { children: ReactNode; store: IStoryMaker$ }) => {\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n","import { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { EditStory } from '../../../stories-cms/components/story/components/edit-story/EditStory'\nimport { useUuidFromPath } from '@/hooks/useUuidFromPath'\nimport { cast } from '@/helpers'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\n\nexport const StoryMakerContextMenu: React.FC<{ action: () => void }> = ({ action: onClose }) => {\n    const { id } = useUuidFromPath()\n    return (\n        <XMenuDropdown>\n            <XMenuItem>\n                <EditStory\n                    onClose={onClose}\n                    id={cast(id)}\n                    label={<span className='flex w-[110px] justify-start capitalize'>Edit</span>}\n                />\n            </XMenuItem>\n        </XMenuDropdown>\n    )\n}\n","import { IconThreeDots } from '@/assets/icons/IconThreeDots'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { storyEditorDialog$, StoryEditorDialog$Provider } from '../../../story-editor-dialog/mst/provider'\nimport { Suspense } from 'react'\nimport StoryEditorDialog from '../../../story-editor-dialog/StoryEditorDialog'\nimport { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { useTogglePopoverState } from '@/hooks/useTogglePopoverState.hook'\nimport { StoryMakerContextMenu } from './StoryMakerContextMenu'\n\nexport const StoryMakerMenu: React.FC = () => {\n    const { popoverState, setPopoverState } = useTogglePopoverState()\n\n    return (\n        <StoryEditorDialog$Provider store={storyEditorDialog$}>\n            <Suspense fallback={null}>\n                <StoryEditorDialog />\n            </Suspense>\n            <XDropdown\n                onOpenChange={() => {\n                    setPopoverState(!popoverState)\n                }}\n                trigger={['click', 'contextMenu']}\n                dropdownRender={() => <StoryMakerContextMenu action={() => setPopoverState(false)} />}\n            >\n                {/* div is important for context menu positioning */}\n                <div>\n                    <StyledButton variant='text'>\n                        <IconThreeDots className='w-5 h-5' />\n                    </StyledButton>\n                </div>\n            </XDropdown>\n        </StoryEditorDialog$Provider>\n    )\n}\n","import { ModuleWrapper } from '@/components/ModuleWrapper'\nimport { StoryMakerDetails } from './components/story-maker-details/StoryMakerDetails'\nimport { StoryMessages } from './components/story-messages/StoryMessages'\nimport { storyMaker$, StoryMaker$Provider } from './mst/provider'\nimport { StoryMakerMenu } from './components/story-maker-menu/StoryMakerMenu'\n\nconst StoryMakerIndex = () => {\n    return (\n        <StoryMaker$Provider store={storyMaker$}>\n            <ModuleWrapper\n                topBarNodes={\n                    <div className='w-full justify-end items-center flex'>\n                        <StoryMakerMenu />\n                    </div>\n                }\n            >\n                <div className='flex flex-col gap-10 w-full h-full max-w-[600px] mx-auto relative'>\n                    <StoryMakerDetails />\n                    <StoryMessages />\n                </div>\n            </ModuleWrapper>\n        </StoryMaker$Provider>\n    )\n}\n\nexport default StoryMakerIndex\n"],"file":"assets/StoryMakerIndex-D8sxgPvi.js"}