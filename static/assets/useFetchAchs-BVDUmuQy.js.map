{"version":3,"file":"useFetchAchs-BVDUmuQy.js","sources":["../../src/modules/achievements/services/fetch-achs/query_allAchs.ts","../../src/modules/achievements/services/fetch-achs/query_favoriteAchs.ts","../../src/modules/achievements/services/fetch-achs/query_activeAchs.ts","../../src/modules/achievements/services/fetch-achs/query_deletedAchs.ts","../../src/modules/achievements/services/fetch-achs/query_archivedAchs.ts","../../src/modules/achievements/services/fetch-achs/useFetchAchs.ts"],"sourcesContent":["import { graphql } from '@/api/tada'\nimport { type IAch, type IUseFetchAchsQuery } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { achResponseFr } from '../fragments/achResponseFr'\nimport { generateClient } from '@/api/client'\n\nexport const query_allAchs = async ({\n    limit,\n    serverSearchInput,\n    offset,\n}: IUseFetchAchsQuery): Promise<IAch[] | undefined> => {\n    try {\n        const query = graphql(\n            `\n                query query_allAchs($limit: Int, $offset: Int, $title: String) {\n                    achievements(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { created_at: desc, description: asc }\n                        where: { _or: { title: { _ilike: $title }, description: { _ilike: $title } } }\n                    ) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        const data = await client.request(query, { limit, offset, title: '%' + serverSearchInput + '%' })\n\n        return data?.achievements\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { graphql } from '@/api/tada'\nimport { type IAch, type IUseFetchAchsQuery } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { achResponseFr } from '../fragments/achResponseFr'\nimport { generateClient } from '@/api/client'\n\nexport const query_favoriteAchs = async ({\n    limit,\n    serverSearchInput,\n    offset,\n}: IUseFetchAchsQuery): Promise<IAch[] | undefined> => {\n    try {\n        const query = graphql(\n            `\n                query query_favoriteAchs($limit: Int, $offset: Int, $title: String) {\n                    achievements(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { created_at: desc, description: asc }\n                        where: {\n                            _and: [\n                                {\n                                    _or: { title: { _ilike: $title }, description: { _ilike: $title } }\n                                    is_favorite: { _eq: true }\n                                }\n                            ]\n                        }\n                    ) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        const data = await client.request(query, { limit, offset, title: '%' + serverSearchInput + '%' })\n\n        return data?.achievements\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { type IUseFetchAchsQuery } from '../types'\nimport { graphql } from '@/api/tada'\nimport { achResponseFr } from '../fragments/achResponseFr'\n\nexport const query_activeAchs = async ({ limit, serverSearchInput, offset }: IUseFetchAchsQuery) => {\n    try {\n        const query = graphql(\n            `\n                query query_activeAchs($limit: Int, $offset: Int, $title: String) {\n                    achievements(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { created_at: desc, description: asc }\n                        where: {\n                            _and: [\n                                {\n                                    _or: { title: { _ilike: $title }, description: { _ilike: $title } }\n                                    deleted_at: { _is_null: true }\n                                    archived: { _eq: false }\n                                }\n                            ]\n                        }\n                    ) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        const data = await client.request(query, { limit, offset, title: '%' + serverSearchInput + '%' })\n\n        return data?.achievements\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { graphql } from '@/api/tada'\nimport { type IAch, type IUseFetchAchsQuery } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { achResponseFr } from '../fragments/achResponseFr'\nimport { generateClient } from '@/api/client'\n\nexport const query_deletedAchs = async ({\n    limit,\n    serverSearchInput,\n    offset,\n}: IUseFetchAchsQuery): Promise<IAch[] | undefined> => {\n    try {\n        const query = graphql(\n            `\n                query query_deletedAchs($limit: Int, $offset: Int, $title: String) {\n                    achievements(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { created_at: desc, description: asc }\n                        where: {\n                            _and: [\n                                {\n                                    _or: { title: { _ilike: $title }, description: { _ilike: $title } }\n                                    deleted_at: { _is_null: false }\n                                }\n                            ]\n                        }\n                    ) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        const data = await client.request(query, { limit, offset, title: '%' + serverSearchInput + '%' })\n\n        return data?.achievements\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { graphql } from '@/api/tada'\nimport { type IAch, type IUseFetchAchsQuery } from '../types'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { achResponseFr } from '../fragments/achResponseFr'\nimport { generateClient } from '@/api/client'\n\nexport const query_archivedAchs = async ({\n    limit,\n    serverSearchInput,\n    offset,\n}: IUseFetchAchsQuery): Promise<IAch[] | undefined> => {\n    try {\n        const query = graphql(\n            `\n                query query_archivedAchs($limit: Int, $offset: Int, $title: String) {\n                    achievements(\n                        limit: $limit\n                        offset: $offset\n                        order_by: { created_at: desc, description: asc }\n                        where: {\n                            _and: [\n                                {\n                                    _or: { title: { _ilike: $title }, description: { _ilike: $title } }\n                                    deleted_at: { _is_null: true }\n                                    archived: { _eq: true }\n                                }\n                            ]\n                        }\n                    ) {\n                        ...AchResponseFr\n                    }\n                }\n            `,\n            [achResponseFr],\n        )\n\n        const client = await generateClient()\n\n        const data = await client.request(query, { limit, offset, title: '%' + serverSearchInput + '%' })\n\n        return data?.achievements\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useInfiniteQuery } from '@tanstack/react-query'\nimport { compact, flatten, last, uniqWith } from 'lodash-es'\nimport { artifactStatus } from '@/services/types'\nimport { achService } from '../achService'\nimport { type IAch, type IUseFetchAchs } from '../types'\nimport { query_allAchs } from './query_allAchs'\nimport { query_favoriteAchs } from './query_favoriteAchs'\nimport { query_activeAchs } from './query_activeAchs'\nimport { query_deletedAchs } from './query_deletedAchs'\nimport { query_archivedAchs } from './query_archivedAchs'\n\nexport const useFetchAchs = (props: IUseFetchAchs) => {\n    const { data, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage } = useInfiniteQuery({\n        queryKey: achService.fetchAchsKey(JSON.stringify(props)),\n        queryFn: async (queryProps) => {\n            const { queryFilter = artifactStatus.active, limit = 20, serverSearchInput = '' } = props\n            const offset = queryProps.pageParam\n            const nextCursor = queryProps.pageParam + 5\n            let data: IAch[] | undefined = []\n\n            if (queryFilter === artifactStatus.all) {\n                data = await query_allAchs({ limit, offset, serverSearchInput })\n            }\n            if (queryFilter === artifactStatus.favorite) {\n                data = await query_favoriteAchs({ limit, offset, serverSearchInput })\n            }\n            if (queryFilter === artifactStatus.active) {\n                data = await query_activeAchs({ limit, offset, serverSearchInput })\n            }\n\n            if (queryFilter === artifactStatus.deleted) {\n                data = await query_deletedAchs({ limit, offset, serverSearchInput })\n            }\n\n            if (queryFilter === artifactStatus.archived) {\n                data = await query_archivedAchs({ limit, offset, serverSearchInput })\n            }\n\n            return { data, nextCursor }\n        },\n        initialPageParam: 0,\n        getNextPageParam: (lastPage, pages) => {\n            return last(pages)?.data?.length ? lastPage?.nextCursor : undefined\n        },\n\n        staleTime: 1000,\n        refetchOnWindowFocus: false,\n        refetchOnMount: true,\n        enabled: !!props.userId,\n    })\n\n    const achs = uniqWith(compact(flatten(data?.pages.map((page) => page.data))), (a, b) => a.id === b.id)\n\n    return {\n        isLoading: isFetching,\n        fetchNextPage,\n        isFetchingNextPage,\n        hasNextPage,\n        achs: achs || [],\n    }\n}\n"],"names":["query_allAchs","limit","serverSearchInput","offset","query","graphql","achResponseFr","data","generateClient","request","title","achievements","e","resolveError","query_favoriteAchs","query_activeAchs","query_deletedAchs","query_archivedAchs","useFetchAchs","props","fetchNextPage","hasNextPage","isFetching","isFetchingNextPage","useInfiniteQuery","queryKey","achService","fetchAchsKey","JSON","stringify","queryFn","queryProps","queryFilter","artifactStatus","active","pageParam","nextCursor","all","favorite","deleted","archived","initialPageParam","getNextPageParam","lastPage","pages","last","length","undefined","staleTime","refetchOnWindowFocus","refetchOnMount","enabled","userId","achs","uniqWith","compact","flatten","map","page","a","b","id","isLoading"],"mappings":"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"}