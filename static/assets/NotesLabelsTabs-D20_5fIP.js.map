{"version":3,"file":"NotesLabelsTabs-D20_5fIP.js","sources":["../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/hooks/useLabelFormOnValidate.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/mutation_insertNoteLabel.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/hooks/useInvalidateNotesLabels.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/service/useInsertNoteLabel.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/label-name/service/validation_noteLabelName.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/hooks/useLabelFormOnSubmit.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/label-name/LabelName.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/CreateLabelForm.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/CreateLabelFormik.tsx","../../src/modules/notes/shared-services/getQueryFields.ts","../../src/modules/notes/shared-services/mutation_deleteNoteLabel.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/notes-labels-editor/components/useDeleteNoteLabel.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/notes-labels-editor/components/NLIDropdownRender.tsx","../../src/modules/notes/shared-services/mutation_updateNoteLabel.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/notes-labels-editor/components/useUpdateNoteLabel.ts","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/notes-labels-editor/components/NoteLabelEditorItem.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/notes-labels-editor/NotesLabelsEditor.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/hooks/useNotesLabelsTabs.tsx","../../src/modules/notes/components/notes-cms/components/notes-header/components/note-label/notes-labels-dialog/components/NotesLabelsTabs.tsx"],"sourcesContent":["// import { goalSchema } from '@/modules/goals/shared-service'\nimport { type ICreateLabelForm } from '../service/types'\n\nexport const useLabelFormOnValidate = () => {\n    const validate = (values: ICreateLabelForm) => {\n        // const result = goalSchema.safeParse(values)\n        const errors: Partial<Record<keyof ICreateLabelForm, string>> = {}\n        // if (!result.success) {\n        //     for (const issue of result.error.issues) {\n        //         const key = issue.path[0] as keyof ICreateLabelForm\n        //         errors[key] = issue.message\n        //     }\n        // }\n\n        if (!values.name.length) {\n            errors.name = 'Required field'\n        }\n\n\n        if (values.duplicateName) {\n            errors.name = 'Label already exists'\n        }\n\n        return errors\n    }\n\n    return { validate }\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { type ICreateLabelForm, createLabelFormSchema } from './types'\nimport { graphql } from '@/api/tada'\n\nexport const mutation_insertNoteLabel = async ({ values: object }: { values: ICreateLabelForm }) => {\n    try {\n        const client = await generateClient()\n\n        const mutation = graphql(`\n            mutation mutation_insertNoteLabel($object: notes_labels_insert_input!) {\n                insert_notes_labels_one(object: $object) {\n                    id\n                    name\n                }\n            }\n        `)\n\n        const res = await client.request(mutation, {\n            object: {\n                name: object.name.toLowerCase(),\n            },\n        })\n\n        return createLabelFormSchema.parse(res.insert_notes_labels_one)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useUser$ } from '@/modules/app/mst/StoreProvider'\nimport { useQueryClient } from '@tanstack/react-query'\nimport { noteLabelsService } from '../service/noteLabelsService'\n\nexport const useInvalidateNotesLabels = () => {\n    const queryClient = useQueryClient()\n    const { id: userId } = useUser$()\n\n    const onSuccess = () => {\n        queryClient.invalidateQueries({ queryKey: noteLabelsService.KEY_fetchNotesLabels({ userId }) })\n    }\n\n    return { onSuccess }\n}\n","import { useMutation } from '@tanstack/react-query'\nimport { type ICreateLabelForm } from './types'\nimport { mutation_insertNoteLabel } from './mutation_insertNoteLabel'\nimport { useInvalidateNotesLabels } from '../hooks/useInvalidateNotesLabels'\n\nexport const useInsertNoteLabel = () => {\n    const { onSuccess: invalidateNoteLabels } = useInvalidateNotesLabels()\n\n    const mutation = useMutation({\n        mutationFn: ({ values }: { values: ICreateLabelForm }) => {\n            return mutation_insertNoteLabel({ values })\n        },\n    })\n\n    const insertNoteLabel = ({\n        values,\n        onSuccess,\n        onSettled,\n    }: {\n        values: ICreateLabelForm\n        onSuccess?: () => void\n        onSettled?: () => void\n    }) => {\n        mutation.mutate(\n            { values },\n            {\n                onSuccess: () => {\n                    invalidateNoteLabels()\n                    onSuccess?.()\n                },\n                onSettled,\n                onError: () => {},\n            },\n        )\n    }\n\n    return { insertNoteLabel }\n}\n","import { resolveError } from '@/helpers/tryCatchRequest'\nimport { generateClient } from '@/api/client'\nimport { notesLabelsResponseSchema } from '../../../service/types'\nimport { graphql } from '@/api/tada'\n\nexport const validation_noteLabelName = async ({ value }: { value: string }) => {\n    try {\n        const client = await generateClient()\n\n        const query = graphql(`\n            query validation_noteLabelName($where: notes_labels_bool_exp) {\n                notes_labels(where: $where, limit: 1) {\n                    id\n                    name\n                }\n            }\n        `)\n\n        const response = await client.request(query, { where: { name: { _eq: value.toLowerCase() } } })\n\n        return notesLabelsResponseSchema.parse(response.notes_labels)\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { type FormikHelpers } from 'formik'\nimport { type ICreateLabelForm } from '../service/types'\nimport { useInsertNoteLabel } from '../service/useInsertNoteLabel'\nimport { notifySuccess } from '@/helpers/processMessage'\nimport { validation_noteLabelName } from '../components/label-name/service/validation_noteLabelName'\n\nexport const useLabelFormOnSubmit = () => {\n    const { insertNoteLabel } = useInsertNoteLabel()\n\n    const onSubmit = async (values: ICreateLabelForm, formikHelpers: FormikHelpers<ICreateLabelForm>) => {\n        const { setSubmitting } = formikHelpers\n\n        await validation_noteLabelName({ value: values.name }).then((res) => {\n            if (res.length) {\n                formikHelpers.setFieldValue('duplicateName', true)\n            } else {\n                insertNoteLabel({\n                    values,\n\n                    onSettled: () => {\n                        setSubmitting(false)\n                    },\n\n                    onSuccess: () => {\n                        setSubmitting(false)\n                        notifySuccess('Label saved')\n                    },\n                })\n            }\n        })\n    }\n\n    return { onSubmit }\n}\n","import { XInput } from '@/components-x/x-input/XInput'\nimport { FormLabel } from '@/components/form/FormLabel'\nimport { useFormikContext } from 'formik'\nimport { type ICreateLabelForm } from '../../service/types'\n\nexport const LabelName = () => {\n    const formikContext = useFormikContext<ICreateLabelForm>()\n\n    return (\n        <div className='w-full'>\n            <FormLabel title='Name' />\n            <XInput\n                data-testid='label-name'\n                autoFocus={true}\n                value={formikContext.values.name}\n                name='name'\n                onChange={(e) => {\n                    formikContext.handleChange(e)\n                    formikContext.setFieldValue('duplicateName', false)\n                    formikContext.setFieldError('duplicateName', undefined)\n                }}\n                error={formikContext.touched.name && Boolean(formikContext.errors.name)}\n                errorMessage={formikContext.errors.name}\n            />\n        </div>\n    )\n}\n","import { Form /* , useFormikContext */ } from 'formik'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { LabelName } from './label-name/LabelName'\n// import { type ICreateLabelForm } from '../service/types'\nexport const CreateLabelForm = () => {\n    // const formikContext = useFormikContext<ICreateLabelForm>()\n    return (\n        <Form className='flex flex-col h-full  gap-5'>\n            {/* accessibility */}\n            <input type='text' style={{ display: 'none' }} autoComplete='off' name='accessibility' />\n            <div className='flex w-full'>\n                <LabelName />\n            </div>\n            <div className='flex justify-end w-full mt-5'>\n                <StyledButton\n                    // onClick={() => {\n                    //     formikContext.handleSubmit()\n                    // }}\n                    type='submit'\n                >\n                    Save\n                </StyledButton>\n            </div>\n        </Form>\n    )\n}\n","import { Formik } from 'formik'\nimport { type ICreateLabelForm } from '../service/types'\nimport { useLabelFormOnValidate } from '../hooks/useLabelFormOnValidate'\nimport { useLabelFormOnSubmit } from '../hooks/useLabelFormOnSubmit'\nimport { CreateLabelForm } from './CreateLabelForm'\nexport const CreateLabelFormik = () => {\n    const { validate } = useLabelFormOnValidate()\n    const { onSubmit } = useLabelFormOnSubmit()\n\n    return (\n        <Formik<ICreateLabelForm>\n            enableReinitialize\n            initialValues={{ name: '', id: crypto.randomUUID(), duplicateName: false, rating: 0 }}\n            validate={validate}\n            onSubmit={onSubmit}\n        >\n            <CreateLabelForm />\n        </Formik>\n    )\n}\n","export const getQueryFields = () => ({\n    id: true,\n    description: true,\n    tag: true,\n    created_at: true,\n    deleted_at: true,\n    is_favorite: true,\n    archived: true,\n    label_id: true,\n    label: {\n        name: true,\n    },\n})\n\nexport const getNotesLabelsGqlFields = () => {\n    return `\n        id\n        name\n        owner_id\n        rating\n    `\n}\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { getNotesLabelsGqlFields } from './getQueryFields'\n\nexport const mutation_deleteNoteLabel = async ({ id }: { id: string }) => {\n    try {\n        const client = await generateClient()\n\n        await client.request(\n            graphql(`\n                mutation mutation_updateNotes($id: uuid!) {\n                    update_notes(where: { label_id: { _eq: $id } }, _set: { label_id: null }) {\n                        affected_rows\n                    }\n                }\n            `),\n            { id },\n        )\n        const response = await client.request(\n            graphql(`\n                mutation mutation_deleteNoteLabel($id: uuid!) {\n                    delete_notes_labels_by_pk(id: $id) {\n                        ${getNotesLabelsGqlFields()}\n                    }\n                }\n            `),\n            { id },\n        )\n\n        return response\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { mutation_deleteNoteLabel } from '@/modules/notes/shared-services/mutation_deleteNoteLabel'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\n\nexport const useDeleteNoteLabel = () => {\n    const queryClient = useQueryClient()\n\n    const mutation = useMutation({\n        mutationFn: ({ id }: { id: string }) => mutation_deleteNoteLabel({ id }),\n        onSuccess: () => {\n            queryClient.invalidateQueries()\n        },\n    })\n\n    const deleteNoteLabel = ({ id }: { id: string }) => {\n        mutation.mutate({ id })\n    }\n\n    return { deleteNoteLabel }\n}\n","import { IconDeleteForever, IconEdit } from '@/assets/icons'\nimport { XMenuDropdown } from '@/components-x/x-dropdown/XMenuDropdown'\nimport { XMenuItem } from '@/components-x/x-dropdown/XMenuItem'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { observer } from 'mobx-react-lite'\nimport { type ICreateLabelForm } from '../../../service/types'\nimport { useLabelDialog$ } from '../../../mst/provider'\nimport { useDeleteNoteLabel } from './useDeleteNoteLabel'\nimport { type InputRef } from 'antd'\n\nexport const NLIDropdownRender: React.FC<{ label: ICreateLabelForm; inputEl?: InputRef | null }> = observer(\n    ({ label, inputEl }) => {\n        const { deleteNoteLabel } = useDeleteNoteLabel()\n        const { toggleEdit, selectedLabel } = useLabelDialog$()\n        const isSelected = selectedLabel === label.id\n        return (\n            <XMenuDropdown>\n                <XMenuItem\n                    onClick={() => {\n                        toggleEdit({ id: label.id })\n                        setTimeout(() => inputEl?.focus(), 5)\n                    }}\n                >\n                    <StyledButton variant='text' size='small' startIcon={<IconEdit width={24} height={24} />}>\n                        <span className='flex w-[110px] justify-start capitalize'>{isSelected ? 'Save' : 'Edit'}</span>\n                    </StyledButton>\n                </XMenuItem>\n                <XMenuItem onClick={() => deleteNoteLabel({ id: label.id })}>\n                    <StyledButton variant='text' size='small' startIcon={<IconDeleteForever width={24} height={24} />}>\n                        <span className='flex w-[110px] justify-start capitalize'>Delete</span>\n                    </StyledButton>\n                </XMenuItem>\n            </XMenuDropdown>\n        )\n    },\n)\n","import { generateClient } from '@/api/client'\nimport { resolveError } from '@/helpers/tryCatchRequest'\nimport { graphql } from '@/api/tada'\nimport { getNotesLabelsGqlFields } from './getQueryFields'\n\nexport const mutation_updateNoteLabel = async ({ id, name }: { id: string; name: string }) => {\n    try {\n        const client = await generateClient()\n\n        const mutation = graphql(`\n                mutation mutation_updateNoteLabel($id: uuid!, $name: String) {\n                    update_notes_labels_by_pk(pk_columns: { id: $id }, _set: { name: $name }) {\n                       ${getNotesLabelsGqlFields()}\n                    }\n                }\n            `)\n\n        return await client.request(mutation, { id, name })\n    } catch (e) {\n        return await resolveError(e)\n    }\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { mutation_updateNoteLabel } from '@/modules/notes/shared-services/mutation_updateNoteLabel'\n\nexport const useUpdateNoteLabel = () => {\n    const queryClient = useQueryClient()\n\n    const mutation = useMutation({\n        mutationFn: ({ id, name }: { id: string; name: string }) => mutation_updateNoteLabel({ id, name }),\n        onSuccess: () => {\n            queryClient.invalidateQueries()\n        },\n    })\n\n    const updateNoteLabel = ({ id, name }: { id: string; name: string }) => {\n        mutation.mutate({ id, name })\n    }\n\n    return { updateNoteLabel }\n}\n","import { type ICreateLabelForm } from '../../../service/types'\nimport { useRef, useState } from 'react'\nimport { StyledButton } from '@/components/buttons/StyledButton'\nimport { XDropdown } from '@/components-x/x-dropdown/XDropdown'\nimport { NLIDropdownRender } from './NLIDropdownRender'\nimport { observer } from 'mobx-react-lite'\nimport { useLabelDialog$ } from '../../../mst/provider'\nimport { Input, type InputRef } from 'antd'\nimport { cn } from '@/helpers/cn'\nimport { useUpdateNoteLabel } from './useUpdateNoteLabel'\nimport { IconEnterButton } from '@/assets/icons/IconEnterButton'\nimport { IconThreeDots } from '@/assets/icons/IconThreeDots'\n\nexport const NoteLabelEditorItem: React.FC<{ label: ICreateLabelForm }> = observer(({ label }) => {\n    const { selectedLabel, onChangeField } = useLabelDialog$()\n    const { updateNoteLabel } = useUpdateNoteLabel()\n    const [value, setValue] = useState(label.name)\n    const inputRef = useRef<InputRef | null>(null)\n\n    const readonly = selectedLabel !== label.id\n\n    return (\n        <div\n            className='h-10 flex w-full items-center border-b-[1px] py-2 border-b-solid border-gray-200/50'\n            key={label.id}\n        >\n            <div className='flex flex-auto mx-2'>\n                <Input\n                    suffix={!readonly && <IconEnterButton className='opacity-80' />}\n                    autoFocus\n                    ref={inputRef}\n                    size='large'\n                    value={value}\n                    onBlur={() => {\n                        updateNoteLabel({ id: label.id, name: value })\n                        onChangeField('selectedLabel', null)\n                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                            inputRef.current?.blur()\n                        }\n                    }}\n                    onChange={(e) => setValue(e.target.value)}\n                    disabled={selectedLabel !== label.id}\n                    className={cn(readonly && '!bg-transparent !border-transparent', 'disabled:!cursor-default')}\n                />\n            </div>\n            <div className='w-14 gap-2 flex items-center justify-center'>\n                <XDropdown\n                    trigger={['hover']}\n                    dropdownRender={() => <NLIDropdownRender label={label} inputEl={inputRef?.current} />}\n                    placement='bottom'\n                    overlayClassName='!z-[9000]'\n                >\n                    <StyledButton variant='text'>\n                        <IconThreeDots className='min-w-3 min-h-3 cursor-pointer' />\n                    </StyledButton>\n                </XDropdown>\n            </div>\n        </div>\n    )\n})\n","import { observer } from 'mobx-react-lite'\nimport { useFetchNotesLabels } from '../../service/useFetchNotesLabels'\nimport { XSkeleton } from '@/components-x/x-skeleton/XSkeleton'\nimport { NoteLabelEditorItem } from './components/NoteLabelEditorItem'\n\nexport const NotesLabelsEditor: React.FC = observer(() => {\n    const { isLoading, notesLabels } = useFetchNotesLabels()\n    return (\n        <div className='flex flex-col w-[calc(100%-8px)] h-full pr-2 relative overflow-auto scrollbar-thumb-blue-500/50 scrollbar-track-global-bg scrollbar-thin'>\n            {isLoading && <XSkeleton length={5} />}\n            {notesLabels.map((label) => (\n                <NoteLabelEditorItem key={label.id} label={label} />\n            ))}\n        </div>\n    )\n})\n","import { type TabsProps } from 'antd'\nimport { CreateLabelFormik } from '../components/CreateLabelFormik'\nimport { NotesLabelsEditor } from '../components/notes-labels-editor/NotesLabelsEditor'\n\nexport const useNotesLabelsTabs = () => {\n    const notesLabelsTabs: TabsProps['items'] = [\n        { key: '1', label: 'New Label', children: <CreateLabelFormik /> },\n        { key: '2', label: 'Labels', children: <NotesLabelsEditor /> },\n    ]\n\n    return { notesLabelsTabs }\n}\n","import { Tabs } from 'antd'\nimport { useNotesLabelsTabs } from '../hooks/useNotesLabelsTabs'\n\nexport const NotesLabelsTabs: React.FC = () => {\n    const { notesLabelsTabs } = useNotesLabelsTabs()\n    return (\n        <Tabs\n            className='[&_.ant-tabs-nav::before]:border-slate-500 [&_.ant-tabs-nav]:bg-global-2-bg-plasma\n            [&_.ant-tabs-nav]:sticky h-full [&_.ant-tabs-content]:h-full\n            [&_.ant-tabs-tabpane]:h-full'\n            tabBarStyle={{\n                top: -20,\n                // position:'sticky',\n                // background: 'var(--colors-global-bg-plasma)',\n                zIndex: 10,\n            }}\n            defaultActiveKey='1'\n            items={notesLabelsTabs}\n            // tabBarExtraContent={}\n            // onChange={onChange}\n            indicator={{ align: 'center' }}\n        />\n    )\n}\n\nexport default NotesLabelsTabs\n"],"names":["useLabelFormOnValidate","validate","values","errors","name","length","duplicateName","mutation_insertNoteLabel","object","client","generateClient","mutation","graphql","res","request","toLowerCase","createLabelFormSchema","parse","insert_notes_labels_one","e","resolveError","useInvalidateNotesLabels","queryClient","useQueryClient","id","userId","useUser$","onSuccess","invalidateQueries","queryKey","noteLabelsService","KEY_fetchNotesLabels","useInsertNoteLabel","invalidateNoteLabels","useMutation","mutationFn","insertNoteLabel","onSettled","mutate","onError","validation_noteLabelName","value","query","response","where","_eq","notesLabelsResponseSchema","notes_labels","useLabelFormOnSubmit","onSubmit","formikHelpers","setSubmitting","then","setFieldValue","notifySuccess","LabelName","formikContext","useFormikContext","jsxs","jsx","FormLabel","XInput","handleChange","setFieldError","undefined","touched","Boolean","CreateLabelForm","Form","display","StyledButton","CreateLabelFormik","Formik","crypto","randomUUID","rating","getNotesLabelsGqlFields","mutation_deleteNoteLabel","useDeleteNoteLabel","deleteNoteLabel","NLIDropdownRender","observer","label","inputEl","toggleEdit","selectedLabel","useLabelDialog$","isSelected","XMenuDropdown","XMenuItem","setTimeout","focus","IconEdit","IconDeleteForever","mutation_updateNoteLabel","useUpdateNoteLabel","updateNoteLabel","NoteLabelEditorItem","onChangeField","setValue","useState","inputRef","useRef","readonly","Input","IconEnterButton","key","current","blur","target","cn","XDropdown","IconThreeDots","NotesLabelsEditor","isLoading","notesLabels","useFetchNotesLabels","XSkeleton","map","useNotesLabelsTabs","notesLabelsTabs","children","NotesLabelsTabs","Tabs","top","zIndex","align"],"mappings":"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"}